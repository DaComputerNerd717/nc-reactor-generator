package net.ncplanner.plannerator.planner.file.reader;
import java.io.InputStream;
import java.util.function.Supplier;
import net.ncplanner.plannerator.config2.Config;
import net.ncplanner.plannerator.config2.ConfigList;
import net.ncplanner.plannerator.ncpf.element.NCPFOredictElement;
import net.ncplanner.plannerator.planner.StringUtil;
import net.ncplanner.plannerator.planner.file.ForgeConfig;
import net.ncplanner.plannerator.planner.file.FormatReader;
import net.ncplanner.plannerator.planner.file.recovery.RecoveryHandler;
import net.ncplanner.plannerator.planner.ncpf.Project;
import net.ncplanner.plannerator.planner.ncpf.configuration.builder.OverhaulMSRConfigurationBuilder;
import net.ncplanner.plannerator.planner.ncpf.configuration.builder.OverhaulSFRConfigurationBuilder;
import net.ncplanner.plannerator.planner.ncpf.configuration.builder.OverhaulTurbineConfigurationBuilder;
import net.ncplanner.plannerator.planner.ncpf.configuration.overhaulSFR.CoolantRecipe;
import net.ncplanner.plannerator.planner.ncpf.configuration.overhaulSFR.IrradiatorRecipe;
public class OverhaulNCConfigReader implements FormatReader{
    @Override
    public boolean formatMatches(Supplier<InputStream> in){
        return ForgeConfig.parse(in.get()).getConfig("fission").hasProperty("fission_sink_cooling_rate");
    }
    @Override
    public synchronized Project read(Supplier<InputStream> in, RecoveryHandler recovery){
        Config config = ForgeConfig.parse(in.get());
        Config fission = config.get("fission");
        Config turbine = config.get("turbine");
        Project ncpf = new Project();
        //<editor-fold defaultstate="collapsed" desc="Fission SFR">
        OverhaulSFRConfigurationBuilder overhaulSFR = new OverhaulSFRConfigurationBuilder("NuclearCraft", "Unknown");
        overhaulSFR.block("nuclearcraft:solid_fission_controller", "Solid Fission Controller", "overhaul/controller").controller();
        overhaulSFR.block("nuclearcraft:fission_casing", "Reactor Casing", "overhaul/casing").casing(true);
        overhaulSFR.block("nuclearcraft:fission_glass", "Reactor Glass", "overhaul/glass").casing(false);
        overhaulSFR.coolantVent("nuclearcraft:fission_vent", "Vent (Input)", "overhaul/vent", "Vent (Output)", "overhaul/vent_output");
        overhaulSFR.settings.coolingEfficiencyLeniency = fission.getInt("fission_cooling_efficiency_leniency");
        overhaulSFR.settings.minSize = fission.getInt("fission_min_size");
        overhaulSFR.settings.maxSize = fission.getInt("fission_max_size");
        overhaulSFR.settings.neutronReach = fission.getInt("fission_neutron_reach");
        double fuelTimeMult = fission.getDouble("fission_fuel_time_multiplier");
        ConfigList sparsity = fission.getConfigList("fission_sparsity_penalty_params");
        overhaulSFR.settings.sparsityPenaltyMultiplier = (float) sparsity.getDouble(0);
        overhaulSFR.settings.sparsityPenaltyThreshold = (float) sparsity.getDouble(1);
        ConfigList sourceEfficiency = fission.getConfigList("fission_source_efficiency");
        overhaulSFR.block("nuclearcraft:fission_source:0", "Ra-Be Neutron Source", "overhaul/ra-be").blockstate("type", "radium_beryllium").source((float) sourceEfficiency.getDouble(0));
        overhaulSFR.block("nuclearcraft:fission_source:1", "Po-Be Neutron Source", "overhaul/po-be").blockstate("type", "polonium_beryllium").source((float) sourceEfficiency.getDouble(1));
        overhaulSFR.block("nuclearcraft:fission_source:2", "Cf-252 Neutron Source", "overhaul/cf-252").blockstate("type", "californium").source((float) sourceEfficiency.getDouble(2));
        ConfigList coolingRates = fission.getConfigList("fission_sink_cooling_rate");
        ConfigList rules = fission.getConfigList("fission_sink_rule");
        overhaulSFR.block("nuclearcraft:solid_fission_sink:0", "Water Heat Sink", "overhaul/water").blockstate("type", "water").heatsink(coolingRates.getInt(0), rules.getString(0));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:1", "Iron Heat Sink", "overhaul/iron").blockstate("type", "iron").heatsink(coolingRates.getInt(1), rules.getString(1));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:2", "Redstone Heat Sink", "overhaul/redstone").blockstate("type", "redstone").heatsink(coolingRates.getInt(2), rules.getString(2));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:3", "Quartz Heat Sink", "overhaul/quartz").blockstate("type", "quartz").heatsink(coolingRates.getInt(3), rules.getString(3));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:4", "Obsidian Heat Sink", "overhaul/obsidian").blockstate("type", "obsidian").heatsink(coolingRates.getInt(4), rules.getString(4));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:5", "Nether Brick Heat Sink", "overhaul/nether brick").blockstate("type", "nether_brick").heatsink(coolingRates.getInt(5), rules.getString(5));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:6", "Glowstone Heat Sink", "overhaul/glowstone").blockstate("type", "glowstone").heatsink(coolingRates.getInt(6), rules.getString(6));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:7", "Lapis Heat Sink", "overhaul/lapis").blockstate("type", "lapis").heatsink(coolingRates.getInt(7), rules.getString(7));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:8", "Gold Heat Sink", "overhaul/gold").blockstate("type", "gold").heatsink(coolingRates.getInt(8), rules.getString(8));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:9", "Prismarine Heat Sink", "overhaul/prismarine").blockstate("type", "prismarine").heatsink(coolingRates.getInt(9), rules.getString(9));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:10", "Slime Heat Sink", "overhaul/slime").blockstate("type", "slime").heatsink(coolingRates.getInt(10), rules.getString(10));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:11", "End Stone Heat Sink", "overhaul/end stone").blockstate("type", "end_stone").heatsink(coolingRates.getInt(11), rules.getString(11));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:12", "Purpur Heat Sink", "overhaul/purpur").blockstate("type", "purpur").heatsink(coolingRates.getInt(12), rules.getString(12));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:13", "Diamond Heat Sink", "overhaul/diamond").blockstate("type", "diamond").heatsink(coolingRates.getInt(13), rules.getString(13));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:14", "Emerald Heat Sink", "overhaul/emerald").blockstate("type", "emerald").heatsink(coolingRates.getInt(14), rules.getString(14));
        overhaulSFR.block("nuclearcraft:solid_fission_sink:15", "Copper Heat Sink", "overhaul/copper").blockstate("type", "copper").heatsink(coolingRates.getInt(15), rules.getString(15));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:0", "Tin Heat Sink", "overhaul/tin").blockstate("type", "tin").heatsink(coolingRates.getInt(16), rules.getString(16));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:1", "Lead Heat Sink", "overhaul/lead").blockstate("type", "lead").heatsink(coolingRates.getInt(17), rules.getString(17));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:2", "Boron Heat Sink", "overhaul/boron").blockstate("type", "boron").heatsink(coolingRates.getInt(18), rules.getString(18));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:3", "Lithium Heat Sink", "overhaul/lithium").blockstate("type", "lithium").heatsink(coolingRates.getInt(19), rules.getString(19));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:4", "Magnesium Heat Sink", "overhaul/magnesium").blockstate("type", "magnesium").heatsink(coolingRates.getInt(20), rules.getString(20));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:5", "Manganese Heat Sink", "overhaul/manganese").blockstate("type", "manganese").heatsink(coolingRates.getInt(21), rules.getString(21));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:6", "Aluminum Heat Sink", "overhaul/aluminum").blockstate("type", "aluminum").heatsink(coolingRates.getInt(22), rules.getString(22));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:7", "Silver Heat Sink", "overhaul/silver").blockstate("type", "silver").heatsink(coolingRates.getInt(23), rules.getString(23));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:8", "Fluorite Heat Sink", "overhaul/fluorite").blockstate("type", "fluorite").heatsink(coolingRates.getInt(24), rules.getString(24));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:9", "Villiaumite Heat Sink", "overhaul/villiaumite").blockstate("type", "villiaumite").heatsink(coolingRates.getInt(25), rules.getString(25));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:10", "Carobbiite Heat Sink", "overhaul/carobbiite").blockstate("type", "carobbiite").heatsink(coolingRates.getInt(26), rules.getString(26));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:11", "Arsenic Heat Sink", "overhaul/arsenic").blockstate("type", "arsenic").heatsink(coolingRates.getInt(27), rules.getString(27));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:12", "Liquid Nitrogen Heat Sink", "overhaul/nitrogen").blockstate("type", "liquid_nitrogen").heatsink(coolingRates.getInt(28), rules.getString(28));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:13", "Liquid Helium Heat Sink", "overhaul/helium").blockstate("type", "liquid_helium").heatsink(coolingRates.getInt(29), rules.getString(29));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:14", "Enderium Heat Sink", "overhaul/enderium").blockstate("type", "enderium").heatsink(coolingRates.getInt(30), rules.getString(30));
        overhaulSFR.block("nuclearcraft:solid_fission_sink2:15", "Cryotheum Heat Sink", "overhaul/cryotheum").blockstate("type", "cryotheum").heatsink(coolingRates.getInt(31), rules.getString(31));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulSFR.BlockElement cell = overhaulSFR.block("nuclearcraft:solid_fission_cell", "Fuel Cell", "overhaul/cell").cell().block;
        overhaulSFR.port(cell, "nuclearcraft:fission_cell_port", "Fuel Cell Port (Input)", "overhaul/cell_port_input", "Fuel Cell Port (Output)", "overhaul/cell_port_output");
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulSFR.BlockElement irradiator = overhaulSFR.block("nuclearcraft:fission_irradiator", "Neutron Irradiator", "overhaul/irradiator").irradiator().block;
        overhaulSFR.port(irradiator, "nuclearcraft:fission_irradiator_port", "Neutron Irradiator Port (Input)", "overhaul/irradiator_port_input", "Neutron Irradiator Port (Output)", "overhaul/irradiator_port_output");
        overhaulSFR.block("nuclearcraft:fission_conductor", "Conductor", "overhaul/conductor").conductor();
        ConfigList fluxFac = fission.getConfigList("fission_moderator_flux_factor");
        ConfigList modEff = fission.getConfigList("fission_moderator_efficiency");
        overhaulSFR.block(new NCPFOredictElement("blockGraphite"), "Graphite Moderator", "overhaul/graphite").moderator(fluxFac.getInt(0), (float) modEff.getDouble(0))
                .legacy("nuclearcraft:ingot_block:8");
        overhaulSFR.block(new NCPFOredictElement("blockBeryllium"), "Beryllium Moderator", "overhaul/beryllium").moderator(fluxFac.getInt(1), (float) modEff.getDouble(1))
                .legacy("nuclearcraft:ingot_block:9");
        overhaulSFR.block("nuclearcraft:heavy_water_moderator", "Heavy Water Moderator", "overhaul/heavy water").moderator(fluxFac.getInt(2), (float) modEff.getDouble(2));
        ConfigList refEff = fission.getConfigList("fission_reflector_efficiency");
        ConfigList refRef = fission.getConfigList("fission_reflector_reflectivity");
        overhaulSFR.block("nuclearcraft:fission_reflector:0", "Beryllium-Carbon Reflector", "overhaul/beryllium-carbon").blockstate("type", "beryllium_carbon").reflector((float) refEff.getDouble(0), (float) refRef.getDouble(0));
        overhaulSFR.block("nuclearcraft:fission_reflector:1", "Lead-Steel Reflector", "overhaul/lead-steel").blockstate("type", "lead_steel").reflector((float) refEff.getDouble(1), (float) refRef.getDouble(1));
        ConfigList shieldHeat = fission.getConfigList("fission_shield_heat_per_flux");
        ConfigList shieldEff = fission.getConfigList("fission_shield_efficiency");
        overhaulSFR.shield("nuclearcraft:fission_shield:0", "boron_silver", "Boron-Silver Neutron Shield", "overhaul/boron-silver", "overhaul/boron-silver_closed", (int) shieldHeat.getDouble(0), (float) shieldEff.getDouble(0));
        ConfigList irrHeat = fission.getConfigList("fission_irradiator_heat_per_flux");
        ConfigList irrEff = fission.getConfigList("fission_irradiator_efficiency");
        //TODO ingots are also accepted! figure out how to do that?
        overhaulSFR.irradiatorRecipe(new NCPFOredictElement("dustThorium"), "Thorium Dust", "overhaul/item/thorium_dust", "nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", (float)irrEff.getDouble(0), (float)irrHeat.getDouble(0)).legacy("nuclearcraft:dust:3");
        overhaulSFR.irradiatorRecipe(new NCPFOredictElement(), "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", "nuclearcraft:fission_dust:4", "Protactinium-233 Dust", "overhaul/item/protactinium_dust", (float)irrEff.getDouble(1), (float)irrHeat.getDouble(1)).legacy("nuclearcraft:fission_dust:3");
        overhaulSFR.irradiatorRecipe(new NCPFOredictElement(), "Bismuth Dust", "overhaul/item/bismuth_dust", "nuclearcraft:fission_dust:2", "Polonium Dust", "overhaul/item/polonium_dust", (float)irrEff.getDouble(2), (float)irrHeat.getDouble(2)).legacy("nuclearcraft:fission_dust:0");
        overhaulSFR.coolantRecipe("water", "Water", "fluids/water", "high_pressure_steam", "High Pressure Steam", "fluids/hps", 64, 4);
        overhaulSFR.coolantRecipe("preheated_water", "Preheated Water", "fluids/preheated_water", "high_pressure_steam", "High Pressure Steam", "fluids/hps", 32, 4);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "thorium", null, "TBU Oxide", "TBU Nitride", "TBU-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "uranium", null, "LEU-233 Oxide", "LEU-233 Nitride", "LEU-233-Zirconium Alloy", null, null, "HEU-233 Oxide", "HEU-233 Nitride", "HEU-233-Zirconium Alloy", null, null, "LEU-235 Oxide", "LEU-235 Nitride", "LEU-235-Zirconium Alloy", null, null, "HEU-235 Oxide", "HEU-235 Nitride", "HEU-235-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "neptunium", null, "LEN-236 Oxide", "LEN-236 Nitride", "LEN-236-Zirconium Alloy", null, null, "HEN-236 Oxide", "HEN-236 Nitride", "HEN-236-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "plutonium", null, "LEP-239 Oxide", "LEP-239 Nitride", "LEP-239-Zirconium Alloy", null, null, "HEP-239 Oxide", "HEP-239 Nitride", "HEP-239-Zirconium Alloy", null, null, "LEP-241 Oxide", "LEP-241 Nitride", "LEP-241-Zirconium Alloy", null, null, "HEP-241 Oxide", "HEP-241 Nitride", "HEP-241-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "mixed", null, "MOX-239", "MNI-239", "MZA-239", null, null, "MOX-241", "MNI-241", "MZA-241", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "americium", null, "LEA-242 Oxide", "LEA-242 Nitride", "LEA-242-Zirconium Alloy", null, null, "HEA-242 Oxide", "HEA-242 Nitride", "HEA-242-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "curium", null, "LECm-243 Oxide", "LECm-243 Nitride", "LECm-243-Zirconium Alloy", null, null, "HECm-243 Oxide", "HECm-243 Nitride", "HECm-243-Zirconium Alloy", null, null, "LECm-245 Oxide", "LECm-245 Nitride", "LECm-245-Zirconium Alloy", null, null, "HECm-245 Oxide", "HECm-245 Nitride", "HECm-245-Zirconium Alloy", null, null, "LECm-247 Oxide", "LECm-247 Nitride", "LECm-247-Zirconium Alloy", null, null, "HECm-247 Oxide", "HECm-247 Nitride", "HECm-247-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "berkelium", null, "LEB-248 Oxide", "LEB-248 Nitride", "LEB-248-Zirconium Alloy", null, null, "HEB-248 Oxide", "HEB-248 Nitride", "HEB-248-Zirconium Alloy", null);
        addSFRFuels(overhaulSFR, fission, fuelTimeMult, "californium", null, "LECf-249 Oxide", "LECf-249 Nitride", "LECf-249-Zirconium Alloy", null, null, "HECf-249 Oxide", "HECf-249 Nitride", "HECf-249-Zirconium Alloy", null, null, "LECf-251 Oxide", "LECf-251 Nitride", "LECf-251-Zirconium Alloy", null, null, "HECf-251 Oxide", "HECf-251 Nitride", "HECf-251-Zirconium Alloy", null);
        ncpf.setConfiguration(overhaulSFR.build());
//</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="Fission MSR">
        OverhaulMSRConfigurationBuilder overhaulMSR = new OverhaulMSRConfigurationBuilder("NuclearCraft", "Unknown");
        overhaulMSR.controller("nuclearcraft:salt_fission_controller", "Molten Salt Fission Controller", "overhaul/msr/controller");
        overhaulMSR.casing("nuclearcraft:fission_casing", "Reactor Casing", "overhaul/casing", true);
        overhaulMSR.casing("nuclearcraft:fission_glass", "Reactor Glass", "overhaul/glass", false);
        overhaulMSR.settings.coolingEfficiencyLeniency = fission.getInt("fission_cooling_efficiency_leniency");
        overhaulMSR.settings.minSize = fission.getInt("fission_min_size");
        overhaulMSR.settings.maxSize = fission.getInt("fission_max_size");
        overhaulMSR.settings.neutronReach = fission.getInt("fission_neutron_reach");
        overhaulMSR.settings.sparsityPenaltyMultiplier = (float) sparsity.getDouble(0);
        overhaulMSR.settings.sparsityPenaltyThreshold = (float) sparsity.getDouble(1);
        overhaulMSR.source("nuclearcraft:fission_source:0", "Ra-Be Neutron Source", "overhaul/ra-be", (float) sourceEfficiency.getDouble(0));
        overhaulMSR.source("nuclearcraft:fission_source:1", "Po-Be Neutron Source", "overhaul/po-be", (float) sourceEfficiency.getDouble(1));
        overhaulMSR.source("nuclearcraft:fission_source:2", "Cf-252 Neutron Source", "overhaul/cf-252", (float) sourceEfficiency.getDouble(2));
        coolingRates = fission.getConfigList("fission_heater_cooling_rate");
        rules = fission.getConfigList("fission_heater_rule");
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mstandard = overhaulMSR.heater("nuclearcraft:salt_fission_heater:0", "Standard Coolant Heater", "overhaul/msr/standard", rules.getString(0));
        overhaulMSR.port(mstandard, "nuclearcraft:fission_heater_port:0", "Standard Coolant Heater Port (Input)", "overhaul/msr/port/standard", "Standard Coolant Heater Port (Output)", "overhaul/msr/port/output/standard");
        overhaulMSR.heaterRecipe(mstandard, "nak", "Eutectic NAK Alloy", "overhaul/msr/coolant/nak", "nak_hot", "Hot Eutectic NaK Alloy", "overhaul/msr/coolant/hot/nak", 1, 1, coolingRates.getInt(0));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement miron = overhaulMSR.heater("nuclearcraft:salt_fission_heater:1", "Iron Coolant Heater", "overhaul/msr/iron", rules.getString(1));
        overhaulMSR.port(miron, "nuclearcraft:fission_heater_port:1", "Iron Coolant Heater Port (Input)", "overhaul/msr/port/iron", "Iron Coolant Heater Port (Output)", "overhaul/msr/port/output/iron");
        overhaulMSR.heaterRecipe(miron, "iron_nak", "Eutectic NaK-Iron Mixture", "overhaul/msr/coolant/iron", "iron_nak_hot", "Hot Eutectic NaK-Iron Mixture", "overhaul/msr/coolant/hot/iron", 1, 1, coolingRates.getInt(1));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mredstone = overhaulMSR.heater("nuclearcraft:salt_fission_heater:2", "Redstone Coolant Heater", "overhaul/msr/redstone", rules.getString(2));
        overhaulMSR.port(mredstone, "nuclearcraft:fission_heater_port:2", "Redstone Coolant Heater Port (Input)", "overhaul/msr/port/redstone", "Redstone Coolant Heater Port (Output)", "overhaul/msr/port/output/redstone");
        overhaulMSR.heaterRecipe(mredstone, "redstone_nak", "Eutectic NaK-Redstone Mixture", "overhaul/msr/coolant/redstone", "redstone_nak_hot", "Hot Eutectic NaK-Redstone Mixture", "overhaul/msr/coolant/hot/redstone", 1, 1, coolingRates.getInt(2));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mquartz = overhaulMSR.heater("nuclearcraft:salt_fission_heater:3", "Quartz Coolant Heater", "overhaul/msr/quartz", rules.getString(3));
        overhaulMSR.port(mquartz, "nuclearcraft:fission_heater_port:3", "Quartz Coolant Heater Port (Input)", "overhaul/msr/port/quartz", "Quartz Coolant Heater Port (Output)", "overhaul/msr/port/output/quartz");
        overhaulMSR.heaterRecipe(mquartz, "quartz_nak", "Eutectic NaK-Quartz Mixture", "overhaul/msr/coolant/quartz", "quartz_nak_hot", "Hot Eutectic NaK-Quartz Mixture", "overhaul/msr/coolant/hot/quartz", 1, 1, coolingRates.getInt(3));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mobsidian = overhaulMSR.heater("nuclearcraft:salt_fission_heater:4", "Obsidian Coolant Heater", "overhaul/msr/obsidian", rules.getString(4));
        overhaulMSR.port(mobsidian, "nuclearcraft:fission_heater_port:4", "Obsidian Coolant Heater Port (Input)", "overhaul/msr/port/obsidian", "Obsidian Coolant Heater Port (Output)", "overhaul/msr/port/output/obsidian");
        overhaulMSR.heaterRecipe(mobsidian, "obsidian_nak", "Eutectic NaK-Obsidian Mixture", "overhaul/msr/coolant/obsidian", "obsidian_nak_hot", "Hot Eutectic NaK-Obsidian Mixture", "overhaul/msr/coolant/hot/obsidian", 1, 1, coolingRates.getInt(4));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mnetherBrick = overhaulMSR.heater("nuclearcraft:salt_fission_heater:5", "Nether Brick Coolant Heater", "overhaul/msr/nether brick", rules.getString(5));
        overhaulMSR.port(mnetherBrick, "nuclearcraft:fission_heater_port:5", "Nether Brick Coolant Heater Port (Input)", "overhaul/msr/port/nether_brick", "Nether Brick Coolant Heater Port (Output)", "overhaul/msr/port/output/nether_brick");
        overhaulMSR.heaterRecipe(mnetherBrick, "nether_brick_nak", "Eutectic NaK-Nether Brick Mixture", "overhaul/msr/coolant/nether_brick", "nether_brick_nak_hot", "Hot Eutectic NaK-Nether Brick Mixture", "overhaul/msr/coolant/hot/nether_brick", 1, 1, coolingRates.getInt(5));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mglowstone = overhaulMSR.heater("nuclearcraft:salt_fission_heater:6", "Glowstone Coolant Heater", "overhaul/msr/glowstone", rules.getString(6));
        overhaulMSR.port(mglowstone, "nuclearcraft:fission_heater_port:6", "Glowstone Coolant Heater Port (Input)", "overhaul/msr/port/glowstone", "Glowstone Coolant Heater Port (Output)", "overhaul/msr/port/output/glowstone");
        overhaulMSR.heaterRecipe(mglowstone, "glowstone_nak", "Eutectic NaK-Glowstone Mixture", "overhaul/msr/coolant/glowstone", "glowstone_nak_hot", "Hot Eutectic NaK-Glowstone Mixture", "overhaul/msr/coolant/hot/glowstone", 1, 1, coolingRates.getInt(6));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mlapis = overhaulMSR.heater("nuclearcraft:salt_fission_heater:7", "Lapis Coolant Heater", "overhaul/msr/lapis", rules.getString(7));
        overhaulMSR.port(mlapis, "nuclearcraft:fission_heater_port:7", "Lapis Coolant Heater Port (Input)", "overhaul/msr/port/lapis", "Lapis Coolant Heater Port (Output)", "overhaul/msr/port/output/lapis");
        overhaulMSR.heaterRecipe(mlapis, "lapis_nak", "Eutectic NaK-Lapis Mixture", "overhaul/msr/coolant/lapis", "lapis_nak_hot", "Hot Eutectic NaK-Lapis Mixture", "overhaul/msr/coolant/hot/lapis", 1, 1, coolingRates.getInt(7));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mgold = overhaulMSR.heater("nuclearcraft:salt_fission_heater:8", "Gold Coolant Heater", "overhaul/msr/gold", rules.getString(8));
        overhaulMSR.port(mgold, "nuclearcraft:fission_heater_port:8", "Gold Coolant Heater Port (Input)", "overhaul/msr/port/gold", "Gold Coolant Heater Port (Output)", "overhaul/msr/port/output/gold");
        overhaulMSR.heaterRecipe(mgold, "gold_nak", "Eutectic NaK-Gold Mixture", "overhaul/msr/coolant/gold", "gold_nak_hot", "Hot Eutectic NaK-Gold Mixture", "overhaul/msr/coolant/hot/gold", 1, 1, coolingRates.getInt(8));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mprismarine = overhaulMSR.heater("nuclearcraft:salt_fission_heater:9", "Prismarine Coolant Heater", "overhaul/msr/prismarine", rules.getString(9));
        overhaulMSR.port(mprismarine, "nuclearcraft:fission_heater_port:9", "Prismarine Coolant Heater Port (Input)", "overhaul/msr/port/prismarine", "Prismarine Coolant Heater Port (Output)", "overhaul/msr/port/output/prismarine");
        overhaulMSR.heaterRecipe(mprismarine, "prismarine_nak", "Eutectic NaK-Prismarine Mixture", "overhaul/msr/coolant/prismarine", "prismarine_nak_hot", "Hot Eutectic NaK-Prismarine Mixture", "overhaul/msr/coolant/hot/prismarine", 1, 1, coolingRates.getInt(9));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mslime = overhaulMSR.heater("nuclearcraft:salt_fission_heater:10", "Slime Coolant Heater", "overhaul/msr/slime", rules.getString(10));
        overhaulMSR.port(mslime, "nuclearcraft:fission_heater_port:10", "Slime Coolant Heater Port (Input)", "overhaul/msr/port/slime", "Slime Coolant Heater Port (Output)", "overhaul/msr/port/output/slime");
        overhaulMSR.heaterRecipe(mslime, "slime_nak", "Eutectic NaK-Slime Mixture", "overhaul/msr/coolant/slime", "slime_nak_hot", "Hot Eutectic NaK-Slime Mixture", "overhaul/msr/coolant/hot/slime", 1, 1, coolingRates.getInt(10));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mendStone = overhaulMSR.heater("nuclearcraft:salt_fission_heater:11", "End Stone Coolant Heater", "overhaul/msr/end stone", rules.getString(11));
        overhaulMSR.port(mendStone, "nuclearcraft:fission_heater_port:11", "End Stone Coolant Heater Port (Input)", "overhaul/msr/port/end_stone", "End Stone Coolant Heater Port (Output)", "overhaul/msr/port/output/end_stone");
        overhaulMSR.heaterRecipe(mendStone, "end_stone_nak", "Eutectic NaK-End Stone Mixture", "overhaul/msr/coolant/end_stone", "end_stone_nak_hot", "Hot Eutectic NaK-End Stone Mixture", "overhaul/msr/coolant/hot/end_stone", 1, 1, coolingRates.getInt(11));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mpurpur = overhaulMSR.heater("nuclearcraft:salt_fission_heater:12", "Purpur Coolant Heater", "overhaul/msr/purpur", rules.getString(12));
        overhaulMSR.port(mpurpur, "nuclearcraft:fission_heater_port:12", "Purpur Coolant Heater Port (Input)", "overhaul/msr/port/purpur", "Purpur Coolant Heater Port (Output)", "overhaul/msr/port/output/purpur");
        overhaulMSR.heaterRecipe(mpurpur, "purpur_nak", "Eutectic NaK-Purpur Mixture", "overhaul/msr/coolant/purpur", "purpur_nak_hot", "Hot Eutectic NaK-Purpur Mixture", "overhaul/msr/coolant/hot/purpur", 1, 1, coolingRates.getInt(12));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mdiamond = overhaulMSR.heater("nuclearcraft:salt_fission_heater:13", "Diamond Coolant Heater", "overhaul/msr/diamond", rules.getString(13));
        overhaulMSR.port(mdiamond, "nuclearcraft:fission_heater_port:13", "Diamond Coolant Heater Port (Input)", "overhaul/msr/port/diamond", "Diamond Coolant Heater Port (Output)", "overhaul/msr/port/output/diamond");
        overhaulMSR.heaterRecipe(mdiamond, "diamond_nak", "Eutectic NaK-Diamond Mixture", "overhaul/msr/coolant/diamond", "diamond_nak_hot", "Hot Eutectic NaK-Diamond Mixture", "overhaul/msr/coolant/hot/diamond", 1, 1, coolingRates.getInt(13));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement memerald = overhaulMSR.heater("nuclearcraft:salt_fission_heater:14", "Emerald Coolant Heater", "overhaul/msr/emerald", rules.getString(14));
        overhaulMSR.port(memerald, "nuclearcraft:fission_heater_port:14", "Emerald Coolant Heater Port (Input)", "overhaul/msr/port/emerald", "Emerald Coolant Heater Port (Output)", "overhaul/msr/port/output/emerald");
        overhaulMSR.heaterRecipe(memerald, "emerald_nak", "Eutectic NaK-Emerald Mixture", "overhaul/msr/coolant/emerald", "emerald_nak_hot", "Hot Eutectic NaK-Emerald Mixture", "overhaul/msr/coolant/hot/emerald", 1, 1, coolingRates.getInt(14));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mcopper = overhaulMSR.heater("nuclearcraft:salt_fission_heater:15", "Copper Coolant Heater", "overhaul/msr/copper", rules.getString(15));
        overhaulMSR.port(mcopper, "nuclearcraft:fission_heater_port:15", "Copper Coolant Heater Port (Input)", "overhaul/msr/port/copper", "Copper Coolant Heater Port (Output)", "overhaul/msr/port/output/copper");
        overhaulMSR.heaterRecipe(mcopper, "copper_nak", "Eutectic NaK-Copper Mixture", "overhaul/msr/coolant/copper", "copper_nak_hot", "Hot Eutectic NaK-Copper Mixture", "overhaul/msr/coolant/hot/copper", 1, 1, coolingRates.getInt(15));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mtin = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:0", "Tin Coolant Heater", "overhaul/msr/tin", rules.getString(16));
        overhaulMSR.port(mtin, "nuclearcraft:fission_heater_port2:0", "Tin Coolant Heater Port (Input)", "overhaul/msr/port/tin", "Tin Coolant Heater Port (Output)", "overhaul/msr/port/output/tin");
        overhaulMSR.heaterRecipe(mtin, "tin_nak", "Eutectic NaK-Tin Mixture", "overhaul/msr/coolant/tin", "tin_nak_hot", "Hot Eutectic NaK-Tin Mixture", "overhaul/msr/coolant/hot/tin", 1, 1, coolingRates.getInt(16));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mlead = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:1", "Lead Coolant Heater", "overhaul/msr/lead", rules.getString(17));
        overhaulMSR.port(mlead, "nuclearcraft:fission_heater_port2:1", "Lead Coolant Heater Port (Input)", "overhaul/msr/port/lead", "Lead Coolant Heater Port (Output)", "overhaul/msr/port/output/lead");
        overhaulMSR.heaterRecipe(mlead, "lead_nak", "Eutectic NaK-Lead Mixture", "overhaul/msr/coolant/lead", "lead_nak_hot", "Hot Eutectic NaK-Lead Mixture", "overhaul/msr/coolant/hot/lead", 1, 1, coolingRates.getInt(17));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mboron = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:2", "Boron Coolant Heater", "overhaul/msr/boron", rules.getString(18));
        overhaulMSR.port(mboron, "nuclearcraft:fission_heater_port2:2", "Boron Coolant Heater Port (Input)", "overhaul/msr/port/boron", "Boron Coolant Heater Port (Output)", "overhaul/msr/port/output/boron");
        overhaulMSR.heaterRecipe(mboron, "boron_nak", "Eutectic NaK-Boron Mixture", "overhaul/msr/coolant/boron", "boron_nak_hot", "Hot Eutectic NaK-Boron Mixture", "overhaul/msr/coolant/hot/boron", 1, 1, coolingRates.getInt(18));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mlithium = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:3", "Lithium Coolant Heater", "overhaul/msr/lithium", rules.getString(19));
        overhaulMSR.port(mlithium, "nuclearcraft:fission_heater_port2:3", "Lithium Coolant Heater Port (Input)", "overhaul/msr/port/lithium", "Lithium Coolant Heater Port (Output)", "overhaul/msr/port/output/lithium");
        overhaulMSR.heaterRecipe(mlithium, "lithium_nak", "Eutectic NaK-Lithium Mixture", "overhaul/msr/coolant/lithium", "lithium_nak_hot", "Hot Eutectic NaK-Lithium Mixture", "overhaul/msr/coolant/hot/lithium", 1, 1, coolingRates.getInt(19));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mmagnesium = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:4", "Magnesium Coolant Heater", "overhaul/msr/magnesium", rules.getString(20));
        overhaulMSR.port(mmagnesium, "nuclearcraft:fission_heater_port2:4", "Magnesium Coolant Heater Port (Input)", "overhaul/msr/port/magnesium", "Magnesium Coolant Heater Port (Output)", "overhaul/msr/port/output/magnesium");
        overhaulMSR.heaterRecipe(mmagnesium, "magnesium_nak", "Eutectic NaK-Magnesium Mixture", "overhaul/msr/coolant/magnesium", "magnesium_nak_hot", "Hot Eutectic NaK-Magnesium Mixture", "overhaul/msr/coolant/hot/magnesium", 1, 1, coolingRates.getInt(20));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mmanganese = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:5", "Manganese Coolant Heater", "overhaul/msr/manganese", rules.getString(21));
        overhaulMSR.port(mmanganese, "nuclearcraft:fission_heater_port2:5", "Manganese Coolant Heater Port (Input)", "overhaul/msr/port/manganese", "Manganese Coolant Heater Port (Output)", "overhaul/msr/port/output/manganese");
        overhaulMSR.heaterRecipe(mmanganese, "manganese_nak", "Eutectic NaK-Manganese Mixture", "overhaul/msr/coolant/manganese", "manganese_nak_hot", "Hot Eutectic NaK-Manganese Mixture", "overhaul/msr/coolant/hot/manganese", 1, 1, coolingRates.getInt(21));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement maluminum = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:6", "Aluminum Coolant Heater", "overhaul/msr/aluminum", rules.getString(22));
        overhaulMSR.port(maluminum, "nuclearcraft:fission_heater_port2:6", "Aluminum Coolant Heater Port (Input)", "overhaul/msr/port/aluminum", "Aluminum Coolant Heater Port (Output)", "overhaul/msr/port/output/aluminum");
        overhaulMSR.heaterRecipe(maluminum, "aluminum_nak", "Eutectic NaK-Aluminum Mixture", "overhaul/msr/coolant/aluminum", "aluminum_nak_hot", "Hot Eutectic NaK-Aluminum Mixture", "overhaul/msr/coolant/hot/aluminum", 1, 1, coolingRates.getInt(22));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement msilver = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:7", "Silver Coolant Heater", "overhaul/msr/silver", rules.getString(23));
        overhaulMSR.port(msilver, "nuclearcraft:fission_heater_port2:7", "Silver Coolant Heater Port (Input)", "overhaul/msr/port/silver", "Silver Coolant Heater Port (Output)", "overhaul/msr/port/output/silver");
        overhaulMSR.heaterRecipe(msilver, "silver_nak", "Eutectic NaK-Silver Mixture", "overhaul/msr/coolant/silver", "silver_nak_hot", "Hot Eutectic NaK-Silver Mixture", "overhaul/msr/coolant/hot/silver", 1, 1, coolingRates.getInt(23));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mfluorite = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:8", "Fluorite Coolant Heater", "overhaul/msr/fluorite", rules.getString(24));
        overhaulMSR.port(mfluorite, "nuclearcraft:fission_heater_port2:8", "Fluorite Coolant Heater Port (Input)", "overhaul/msr/port/fluorite", "Fluorite Coolant Heater Port (Output)", "overhaul/msr/port/output/fluorite");
        overhaulMSR.heaterRecipe(mfluorite, "fluorite_nak", "Eutectic NaK-Fluorite Mixture", "overhaul/msr/coolant/fluorite", "fluorite_nak_hot", "Hot Eutectic NaK-Fluorite Mixture", "overhaul/msr/coolant/hot/fluorite", 1, 1, coolingRates.getInt(24));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mvilliaumite = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:9", "Villiaumite Coolant Heater", "overhaul/msr/villiaumite", rules.getString(25));
        overhaulMSR.port(mvilliaumite, "nuclearcraft:fission_heater_port2:9", "Villiaumite Coolant Heater Port (Input)", "overhaul/msr/port/villiaumite", "Villiaumite Coolant Heater Port (Output)", "overhaul/msr/port/output/villiaumite");
        overhaulMSR.heaterRecipe(mvilliaumite, "villiaumite_nak", "Eutectic NaK-Villiaumite Mixture", "overhaul/msr/coolant/villiaumite", "villiaumite_nak_hot", "Hot Eutectic NaK-Villiaumite Mixture", "overhaul/msr/coolant/hot/villiaumite", 1, 1, coolingRates.getInt(25));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mcarobbiite = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:10", "Carobbiite Coolant Heater", "overhaul/msr/carobbiite", rules.getString(26));
        overhaulMSR.port(mcarobbiite, "nuclearcraft:fission_heater_port2:10", "Carobbiite Coolant Heater Port (Input)", "overhaul/msr/port/carobbiite", "Carobbiite Coolant Heater Port (Output)", "overhaul/msr/port/output/carobbiite");
        overhaulMSR.heaterRecipe(mcarobbiite, "carobbiite_nak", "Eutectic NaK-Carobbiite Mixture", "overhaul/msr/coolant/carobbiite", "carobbiite_nak_hot", "Hot Eutectic NaK-Carobbiite Mixture", "overhaul/msr/coolant/hot/carobbiite", 1, 1, coolingRates.getInt(26));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement marsenic = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:11", "Arsenic Coolant Heater", "overhaul/msr/arsenic", rules.getString(27));
        overhaulMSR.port(marsenic, "nuclearcraft:fission_heater_port2:11", "Arsenic Coolant Heater Port (Input)", "overhaul/msr/port/arsenic", "Arsenic Coolant Heater Port (Output)", "overhaul/msr/port/output/arsenic");
        overhaulMSR.heaterRecipe(marsenic, "arsenic_nak", "Eutectic NaK-Arsenic Mixture", "overhaul/msr/coolant/arsenic", "arsenic_nak_hot", "Hot Eutectic NaK-Arsenic Mixture", "overhaul/msr/coolant/hot/arsenic", 1, 1, coolingRates.getInt(27));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mnitrogen = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:12", "Liquid Nitrogen Coolant Heater", "overhaul/msr/nitrogen", rules.getString(28));
        overhaulMSR.port(mnitrogen, "nuclearcraft:fission_heater_port2:12", "Liquid Nitrogen Coolant Heater Port (Input)", "overhaul/msr/port/nitrogen", "Liquid Nitrogen Coolant Heater Port (Output)", "overhaul/msr/port/output/nitrogen");
        overhaulMSR.heaterRecipe(mnitrogen, "liquid_nitrogen_nak", "Eutectic NaK-Nitrogen Mixture", "overhaul/msr/coolant/nitrogen", "liquid_nitrogen_nak_hot", "Hot Eutectic NaK-Nitrogen Mixture", "overhaul/msr/coolant/hot/nitrogen", 1, 1, coolingRates.getInt(28));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mhelium = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:13", "Liquid Helium Coolant Heater", "overhaul/msr/helium", rules.getString(29));
        overhaulMSR.port(mhelium, "nuclearcraft:fission_heater_port2:13", "Liquid Helium Coolant Heater Port (Input)", "overhaul/msr/port/helium", "Liquid Helium Coolant Heater Port (Output)", "overhaul/msr/port/output/helium");
        overhaulMSR.heaterRecipe(mhelium, "liquid_helium_nak", "Eutectic NaK-Helium Mixture", "overhaul/msr/coolant/helium", "liquid_helium_nak_hot", "Hot Eutectic NaK-Helium Mixture", "overhaul/msr/coolant/hot/helium", 1, 1, coolingRates.getInt(29));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement menderium = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:14", "Enderium Coolant Heater", "overhaul/msr/enderium", rules.getString(30));
        overhaulMSR.port(menderium, "nuclearcraft:fission_heater_port2:14", "Enderium Coolant Heater Port (Input)", "overhaul/msr/port/enderium", "Enderium Coolant Heater Port (Output)", "overhaul/msr/port/output/enderium");
        overhaulMSR.heaterRecipe(menderium, "enderium_nak", "Eutectic NaK-Enderium Mixture", "overhaul/msr/coolant/enderium", "enderium_nak_hot", "Hot Eutectic NaK-Enderium Mixture", "overhaul/msr/coolant/hot/enderium", 1, 1, coolingRates.getInt(30));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mcryotheum = overhaulMSR.heater("nuclearcraft:salt_fission_heater2:15", "Cryotheum Coolant Heater", "overhaul/msr/cryotheum", rules.getString(31));
        overhaulMSR.port(mcryotheum, "nuclearcraft:fission_heater_port2:15", "Cryotheum Coolant Heater Port (Input)", "overhaul/msr/port/cryotheum", "Cryotheum Coolant Heater Port (Output)", "overhaul/msr/port/output/cryotheum");
        overhaulMSR.heaterRecipe(mcryotheum, "cryotheum_nak", "Eutectic NaK-Cryotheum Mixture", "overhaul/msr/coolant/cryotheum", "cryotheum_nak_hot", "Hot Eutectic NaK-Cryotheum Mixture", "overhaul/msr/coolant/hot/cryotheum", 1, 1, coolingRates.getInt(31));
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement vessel = overhaulMSR.vessel("nuclearcraft:salt_fission_vessel", "Fuel Vessel", "overhaul/msr/vessel");
        overhaulMSR.port(vessel, "nuclearcraft:fission_vessel_port", "Fuel Vessel Port (Input)", "overhaul/msr/vessel_port_input", "Fuel Vessel Port (Output)", "overhaul/msr/vessel_port_output");
        net.ncplanner.plannerator.planner.ncpf.configuration.overhaulMSR.BlockElement mirradiator = overhaulMSR.irradiator("nuclearcraft:fission_irradiator", "Neutron Irradiator", "overhaul/irradiator");
        overhaulMSR.port(mirradiator, "nuclearcraft:fission_irradiator_port", "Neutron Irradiator Port (Input)", "overhaul/irradiator_port_input", "Neutron Irradiator Port (Output)", "overhaul/irradiator_port_output");
        overhaulMSR.conductor("nuclearcraft:fission_conductor", "Conductor", "overhaul/conductor");
        overhaulMSR.moderator("nuclearcraft:ingot_block:8", "Graphite Moderator", "overhaul/graphite", fluxFac.getInt(0), (float) modEff.getDouble(0));
        overhaulMSR.moderator("nuclearcraft:ingot_block:9", "Beryllium Moderator", "overhaul/beryllium", fluxFac.getInt(1), (float) modEff.getDouble(1));
        overhaulMSR.moderator("nuclearcraft:heavy_water_moderator", "Heavy Water Moderator", "overhaul/heavy water", fluxFac.getInt(2), (float) modEff.getDouble(2));
        overhaulMSR.reflector("nuclearcraft:fission_reflector:0", "Beryllium-Carbon Reflector", "overhaul/beryllium-carbon", (float) refEff.getDouble(0), (float) refRef.getDouble(0));
        overhaulMSR.reflector("nuclearcraft:fission_reflector:1", "Lead-Steel Reflector", "overhaul/lead-steel", (float) refEff.getDouble(1), (float) refRef.getDouble(1));
        overhaulMSR.shield("nuclearcraft:fission_shield:0", "Boron-Silver Neutron Shield", "overhaul/boron-silver", "overhaul/boron-silver_closed", (int) shieldHeat.getDouble(0), (float) shieldEff.getDouble(0));
        overhaulMSR.irradiatorRecipe("nuclearcraft:dust:3", "Thorium Dust", "overhaul/item/thorium_dust", "nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", (float)irrEff.getDouble(0), (float)irrHeat.getDouble(0));
        overhaulMSR.irradiatorRecipe("nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", "nuclearcraft:fission_dust:4", "Protactinium-233 Dust", "overhaul/item/protactinium_dust", (float)irrEff.getDouble(1), (float)irrHeat.getDouble(1));
        overhaulMSR.irradiatorRecipe("nuclearcraft:fission_dust:0", "Bismuth Dust", "overhaul/item/bismuth_dust", "nuclearcraft:fission_dust:2", "Polonium Dust", "overhaul/item/polonium_dust", (float)irrEff.getDouble(2), (float)irrHeat.getDouble(2));
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "thorium", null, null, null, null, "TBU Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "uranium", null, null, null, null, "LEU-233 Fluoride", null, null, null, null, "HEU-233 Fluoride", null, null, null, null, "LEU-235 Fluoride", null, null, null, null, "HEU-235 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "neptunium", null, null, null, null, "LEN-236 Fluoride", null, null, null, null, "HEN-236 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "plutonium", null, null, null, null, "LEP-239 Fluoride", null, null, null, null, "HEP-239 Fluoride", null, null, null, null, "LEP-241 Fluoride", null, null, null, null, "HEP-241 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "mixed", null, null, null, null, "MF4-239", null, null, null, null, "MF4-241");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "americium", null, null, null, null, "LEA-242 Fluoride", null, null, null, null, "HEA-242 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "curium", null, null, null, null, "LECm-243 Fluoride", null, null, null, null, "HECm-243 Fluoride", null, null, null, null, "LECm-245 Fluoride", null, null, null, null, "HECm-245 Fluoride", null, null, null, null, "LECm-247 Fluoride", null, null, null, null, "HECm-247 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "berkelium", null, null, null, null, "LEB-248 Fluoride", null, null, null, null, "HEB-248 Fluoride");
        addMSRFuels(overhaulMSR, fission, fuelTimeMult, "californium", null, null, null, null, "LECf-249 Fluoride", null, null, null, null, "HECf-249 Fluoride", null, null, null, null, "LECf-251 Fluoride", null, null, null, null, "HECf-251 Fluoride");
        ncpf.setConfiguration(overhaulMSR.build());
//</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="Turbine">
        OverhaulTurbineConfigurationBuilder overhaulTurbine = new OverhaulTurbineConfigurationBuilder("NuclearCraft", "Unknown");
        overhaulTurbine.controller("nuclearcraft:turbine_controller", "Turbine Controller", "overhaul/turbine/controller");
        overhaulTurbine.casing("nuclearcraft:turbine_casing", "Turbine Casing", "overhaul/turbine/casing", true);
        overhaulTurbine.casing("nuclearcraft:turbine_glass", "Turbine Glass", "overhaul/turbine/glass", false);
        overhaulTurbine.inlet("nuclearcraft:turbine_inlet", "Fluid Inlet", "overhaul/turbine/inlet");
        overhaulTurbine.outlet("nuclearcraft:turbine_outlet", "Fluid Outlet", "overhaul/turbine/outlet");
        overhaulTurbine.settings.fluidPerBlade = turbine.getInt("turbine_mb_per_blade");
        overhaulTurbine.settings.minLength = turbine.getInt("turbine_min_size");
        overhaulTurbine.settings.minWidth = Math.max(3, turbine.getInt("turbine_min_size"));
        overhaulTurbine.settings.maxSize = turbine.getInt("turbine_max_size");
        ConfigList effLenParams = turbine.getConfigList("turbine_throughput_leniency_params");
        overhaulTurbine.settings.throughputEfficiencyLeniencyMultiplier = (float)effLenParams.getDouble(0);
        overhaulTurbine.settings.throughputEfficiencyLeniencyThreshold = (float)effLenParams.getDouble(1);
        overhaulTurbine.settings.throughputFactor = (float)turbine.getDouble("turbine_tension_throughput_factor");
        overhaulTurbine.settings.powerBonus = (float)turbine.getDouble("turbine_power_bonus_multiplier");
        ConfigList bladeEffs = turbine.getConfigList("turbine_blade_efficiency");
        ConfigList bladeExps = turbine.getConfigList("turbine_blade_expansion");
        overhaulTurbine.blade("nuclearcraft:turbine_rotor_blade_steel", "Steel Rotor Blade", "overhaul/turbine/steel", (float)bladeEffs.getDouble(0), (float)bladeExps.getDouble(0));
        overhaulTurbine.blade("nuclearcraft:turbine_rotor_blade_extreme", "Extreme Alloy Rotor Blade", "overhaul/turbine/extreme", (float)bladeEffs.getDouble(1), (float)bladeExps.getDouble(1));
        overhaulTurbine.blade("nuclearcraft:turbine_rotor_blade_sic_sic_cmc", "SiC-SiC CMC Rotor Blade", "overhaul/turbine/sic", (float)bladeEffs.getDouble(2), (float)bladeExps.getDouble(2));
        overhaulTurbine.stator("nuclearcraft:turbine_rotor_stator", "Rotor Stator", "overhaul/turbine/stator", (float)turbine.getDouble("turbine_stator_expansion"));
        ConfigList coilEffs = turbine.getConfigList("turbine_coil_conductivity");
        ConfigList coilRules = turbine.getConfigList("turbine_coil_rule");
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:0", "Magnesium Dynamo Coil", "overhaul/turbine/magnesium", (float)coilEffs.getDouble(0), coilRules.getString(0));
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:1", "Beryllium Dynamo Coil", "overhaul/turbine/beryllium", (float)coilEffs.getDouble(1), coilRules.getString(1));
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:2", "Aluminum Dynamo Coil", "overhaul/turbine/aluminum", (float)coilEffs.getDouble(2), coilRules.getString(2));
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:3", "Gold Dynamo Coil", "overhaul/turbine/gold", (float)coilEffs.getDouble(3), coilRules.getString(3));
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:4", "Copper Dynamo Coil", "overhaul/turbine/copper", (float)coilEffs.getDouble(4), coilRules.getString(4));
        overhaulTurbine.coil("nuclearcraft:turbine_dynamo_coil:5", "Silver Dynamo Coil", "overhaul/turbine/silver", (float)coilEffs.getDouble(5), coilRules.getString(5));
        overhaulTurbine.connector("nuclearcraft:turbine_coil_connector", "Dynamo Coil Connector", "overhaul/turbine/connector", turbine.getConfigList("turbine_connector_rule").getString(0));
        overhaulTurbine.bearing("nuclearcraft:turbine_rotor_bearing", "Rotor Bearing", "overhaul/turbine/bearing");
        overhaulTurbine.shaft("nuclearcraft:turbine_rotor_shaft", "Rotor Shaft", "overhaul/turbine/shaft");
        ConfigList rPows = turbine.getConfigList("turbine_power_per_mb");
        ConfigList rCoeffs = turbine.getConfigList("turbine_expansion_level");
        overhaulTurbine.recipe("high_pressure_steam", "High Pressure Steam", "fluids/hps", "exhaust_steam", "Exhaust Steam", "fluids/exhaust_steam", rPows.getDouble(0), rCoeffs.getDouble(0));
        overhaulTurbine.recipe("low_pressure_steam", "Low Pressure Steam", "fluids/lps", "low_quality_steam", "Low Quality Steam", "fluids/lqs", rPows.getDouble(1), rCoeffs.getDouble(1));
        overhaulTurbine.recipe("steam", "Steam", "fluids/steam", "low_quality_steam", "Low Quality Steam", "fluids/lqs", rPows.getDouble(2), rCoeffs.getDouble(2));
        ncpf.setConfiguration(overhaulTurbine.build());
//</editor-fold>
        return ncpf;
    }
    private void addSFRFuels(OverhaulSFRConfigurationBuilder overhaulSFR, Config config, double timeMult, String baseName, String... fuelNames){
        ConfigList time = config.getConfigList("fission_"+baseName+"_fuel_time");
        ConfigList heat = config.getConfigList("fission_"+baseName+"_heat_generation");
        ConfigList efficiency = config.getConfigList("fission_"+baseName+"_efficiency");
        ConfigList criticality = config.getConfigList("fission_"+baseName+"_criticality");
        ConfigList selfPriming = config.getConfigList("fission_"+baseName+"_self_priming");
        for(int i = 0; i<fuelNames.length; i++){
            if(fuelNames[i]==null)continue;
            int fuelIndex = i-i/5;
            String tex = StringUtil.superReplace(StringUtil.toLowerCase(fuelNames[i]), " oxide", "_ox", "-", "_", " nitride", "_ni", "_zirconium alloy", "_za");
            overhaulSFR.fuel("nuclearcraft:fuel_"+baseName+":"+fuelIndex, fuelNames[i], "overhaul/fuel/"+tex, "nuclearcraft:depleted_fuel_"+baseName+":"+fuelIndex, "Depleted "+fuelNames[i], "overhaul/fuel/depleted/"+tex, efficiency.getAsFloat(i), heat.getAsInt(i), (int)(time.getAsInt(i)*timeMult), criticality.getAsInt(i), selfPriming.getBoolean(i));
        }
    }
    private void addMSRFuels(OverhaulMSRConfigurationBuilder overhaulMSR, Config config, double timeMult, String baseName, String... fuelNames){
        ConfigList time = config.getConfigList("fission_"+baseName+"_fuel_time");
        ConfigList heat = config.getConfigList("fission_"+baseName+"_heat_generation");
        ConfigList efficiency = config.getConfigList("fission_"+baseName+"_efficiency");
        ConfigList criticality = config.getConfigList("fission_"+baseName+"_criticality");
        ConfigList selfPriming = config.getConfigList("fission_"+baseName+"_self_priming");
        for(int i = 0; i<fuelNames.length; i++){
            if(fuelNames[i]==null)continue;
            String baseNam = StringUtil.superReplace(StringUtil.toLowerCase(fuelNames[i]), "-", "_", " ", "_", "mf4","mix")+"_flibe";
            if(baseName.equals("mixed"))baseNam = StringUtil.superReplace(StringUtil.toLowerCase(fuelNames[i]), "-", "_", " ", "_", "mf4","mix")+"_fluoride_flibe";
            String tex = StringUtil.superReplace(StringUtil.toLowerCase(fuelNames[i]), "-", "_", " fluoride", "", "mf4","mix");
            overhaulMSR.fuel(baseNam, fuelNames[i], "overhaul/fuel/msr/"+tex, "depleted_"+baseNam, "Depleted "+fuelNames[i], "overhaul/fuel/depleted/msr/"+tex, efficiency.getAsFloat(i), heat.getAsInt(i), (int)(time.getAsInt(i)*timeMult), criticality.getAsInt(i), selfPriming.getBoolean(i));
        }
    }
}