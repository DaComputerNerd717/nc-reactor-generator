package planner.file;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import multiblock.CuboidalMultiblock;
import multiblock.Multiblock;
import multiblock.configuration.Configuration;
import multiblock.configuration.PartialConfiguration;
import multiblock.configuration.overhaul.OverhaulConfiguration;
import multiblock.configuration.overhaul.fissionsfr.CoolantRecipe;
import multiblock.configuration.underhaul.UnderhaulConfiguration;
import multiblock.overhaul.fissionmsr.OverhaulMSR;
import multiblock.overhaul.fissionsfr.OverhaulSFR;
import multiblock.overhaul.fusion.OverhaulFusionReactor;
import multiblock.overhaul.turbine.OverhaulTurbine;
import multiblock.underhaul.fissionsfr.UnderhaulSFR;
import planner.Core;
import planner.ForgeConfig;
import planner.JSON;
import planner.JSON.JSONArray;
import planner.JSON.JSONObject;
import simplelibrary.config2.Config;
import simplelibrary.config2.ConfigList;
import simplelibrary.config2.ConfigNumberList;
public class FileReader{
    public static final ArrayList<FormatReader> formats = new ArrayList<>();
    static{
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                return ForgeConfig.parse(in).getConfig("fission").hasProperty("fission_cooling_rate");
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                Config config = ForgeConfig.parse(in).getConfig("fission");
                NCPFFile ncpf = new NCPFFile();
                ncpf.configuration = new Configuration("NuclearCraft", null, "Unknown");
                ncpf.configuration.underhaul = new UnderhaulConfiguration();
                ncpf.configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                boolean waterCoolerRequirements = config.getBoolean("fission_water_cooler_requirement");
                double powerMult = config.getDouble("fission_power");
                double fuelUseMult = config.getDouble("fission_fuel_use");
                double heatMult = config.getDouble("fission_heat_generation");
                ncpf.configuration.underhaul.fissionSFR.minSize = config.getInt("fission_min_size");
                ncpf.configuration.underhaul.fissionSFR.maxSize = config.getInt("fission_max_size");
                ncpf.configuration.underhaul.fissionSFR.neutronReach = config.getInt("fission_neutron_reach");
                ncpf.configuration.underhaul.fissionSFR.moderatorExtraPower = (float) config.getDouble("fission_moderator_extra_power");
                ncpf.configuration.underhaul.fissionSFR.moderatorExtraHeat = (float) config.getDouble("fission_moderator_extra_heat");
                ncpf.configuration.underhaul.fissionSFR.activeCoolerRate = config.getInt("fission_active_cooler_max_rate");
                ConfigList coolingRates = config.getConfigList("fission_cooling_rate");
                multiblock.configuration.underhaul.fissionsfr.Block controller = multiblock.configuration.underhaul.fissionsfr.Block.controller("nuclearcraft:fission_controller_new_fixed", "Fission Controller", "underhaul/controller");
                multiblock.configuration.underhaul.fissionsfr.Block casing = multiblock.configuration.underhaul.fissionsfr.Block.casing("nuclearcraft:fission_block:0", "Casing", "underhaul/casing");
                multiblock.configuration.underhaul.fissionsfr.Block transparentCasing = multiblock.configuration.underhaul.fissionsfr.Block.casing("nuclearcraft:reactor_casing_transparent", "Transparent Casing", "underhaul/transparent_casing");
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(controller);ncpf.configuration.underhaul.fissionSFR.blocks.add(controller);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(casing);ncpf.configuration.underhaul.fissionSFR.blocks.add(casing);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(transparentCasing);ncpf.configuration.underhaul.fissionSFR.blocks.add(transparentCasing);
                multiblock.configuration.underhaul.fissionsfr.Block cell = multiblock.configuration.underhaul.fissionsfr.Block.fuelCell("nuclearcraft:cell_block", "Reactor Cell", "underhaul/cell");
                cell.legacyNames.add("Fuel Cell");
                multiblock.configuration.underhaul.fissionsfr.Block water = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:1", "Water Cooler", (int)coolingRates.getDouble(0), "underhaul/water", multiblock.configuration.underhaul.fissionsfr.PlacementRule.or(multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR)));
                if(!waterCoolerRequirements){
                    water.rules.clear();
                }
                multiblock.configuration.underhaul.fissionsfr.Block redstone = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:2", "Redstone Cooler", (int)coolingRates.getDouble(1), "underhaul/redstone", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block quartz = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:3", "Quartz Cooler", (int)coolingRates.getDouble(2), "underhaul/quartz", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                multiblock.configuration.underhaul.fissionsfr.Block gold = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:4", "Gold Cooler", (int)coolingRates.getDouble(3), "underhaul/gold", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, water), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, redstone));
                multiblock.configuration.underhaul.fissionsfr.Block glowstone = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:5", "Glowstone Cooler", (int)coolingRates.getDouble(4), "underhaul/glowstone", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(2, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                multiblock.configuration.underhaul.fissionsfr.Block lapis = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:6", "Lapis Cooler", (int)coolingRates.getDouble(5), "underhaul/lapis", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL),multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING));
                multiblock.configuration.underhaul.fissionsfr.Block diamond = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:7", "Diamond Cooler",  (int)coolingRates.getDouble(6), "underhaul/diamond", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, water), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, quartz));
                multiblock.configuration.underhaul.fissionsfr.Block helium = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:8", "Liquid Helium Cooler", (int)coolingRates.getDouble(7), "underhaul/helium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.exactly(1, redstone), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING));
                helium.legacyNames.add("Helium Cooler");
                multiblock.configuration.underhaul.fissionsfr.Block enderium = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:9", "Enderium Cooler", (int)coolingRates.getDouble(8), "underhaul/enderium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.and(multiblock.configuration.underhaul.fissionsfr.PlacementRule.exactly(3, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING),multiblock.configuration.underhaul.fissionsfr.PlacementRule.vertex(multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING)));
                multiblock.configuration.underhaul.fissionsfr.Block cryotheum = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:10", "Cryotheum Cooler", (int)coolingRates.getDouble(9), "underhaul/cryotheum", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(2, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block iron = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:11", "Iron Cooler", (int)coolingRates.getDouble(10), "underhaul/iron", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, gold));
                multiblock.configuration.underhaul.fissionsfr.Block emerald = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:12", "Emerald Cooler", (int)coolingRates.getDouble(11), "underhaul/emerald", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block copper = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:13", "Copper Cooler", (int)coolingRates.getDouble(12), "underhaul/copper", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, glowstone));
                multiblock.configuration.underhaul.fissionsfr.Block tin = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:14", "Tin Cooler", (int)coolingRates.getDouble(13), "underhaul/tin", multiblock.configuration.underhaul.fissionsfr.PlacementRule.axis(lapis));
                multiblock.configuration.underhaul.fissionsfr.Block magnesium = multiblock.configuration.underhaul.fissionsfr.Block.cooler("nuclearcraft:cooler:15", "Magnesium Cooler", (int)coolingRates.getDouble(14), "underhaul/magnesium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                multiblock.configuration.underhaul.fissionsfr.Block graphite = multiblock.configuration.underhaul.fissionsfr.Block.moderator("nuclearcraft:ingot_block:8", "Graphite", "underhaul/graphite");
                multiblock.configuration.underhaul.fissionsfr.Block beryllium = multiblock.configuration.underhaul.fissionsfr.Block.moderator("nuclearcraft:ingot_block:9", "Beryllium", "underhaul/beryllium");
                ConfigList activeCoolingRates = config.getConfigList("fission_active_cooling_rate");
                multiblock.configuration.underhaul.fissionsfr.Block activeWater = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:1", "Active Water Cooler", (int)activeCoolingRates.getDouble(0), "Water", "underhaul/water", multiblock.configuration.underhaul.fissionsfr.PlacementRule.or(multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR)));
                multiblock.configuration.underhaul.fissionsfr.Block activeRedstone = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:2", "Active Redstone Cooler", (int)activeCoolingRates.getDouble(1), "Destabilized Redstone", "underhaul/redstone", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block activeQuartz = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:3", "Active Quartz Cooler", (int)activeCoolingRates.getDouble(2), "Molten Quartz", "underhaul/quartz", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                multiblock.configuration.underhaul.fissionsfr.Block activeGold = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:4", "Active Gold Cooler", (int)activeCoolingRates.getDouble(3), "Molten Gold", "underhaul/gold", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, water), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, redstone));
                multiblock.configuration.underhaul.fissionsfr.Block activeGlowstone = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:5", "Active Glowstone Cooler", (int)activeCoolingRates.getDouble(4), "Energized Glowstone", "underhaul/glowstone", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(2, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                multiblock.configuration.underhaul.fissionsfr.Block activeLapis = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:6", "Active Lapis Cooler", (int)activeCoolingRates.getDouble(5), "Molten Lapis", "underhaul/lapis", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL),multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING));
                multiblock.configuration.underhaul.fissionsfr.Block activeDiamond = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:7", "Active Diamond Cooler", (int)activeCoolingRates.getDouble(6), "Molten Diamond", "underhaul/diamond", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, water), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, quartz));
                multiblock.configuration.underhaul.fissionsfr.Block activeHelium = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:8", "Active Helium Cooler", (int)activeCoolingRates.getDouble(7), "Liquid Helium", "underhaul/helium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.exactly(1, redstone), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING));
                multiblock.configuration.underhaul.fissionsfr.Block activeEnderium = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:9", "Active Enderium Cooler", (int)activeCoolingRates.getDouble(8), "Resonant Ender", "underhaul/enderium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.and(multiblock.configuration.underhaul.fissionsfr.PlacementRule.exactly(3, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING),multiblock.configuration.underhaul.fissionsfr.PlacementRule.vertex(multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING)));
                multiblock.configuration.underhaul.fissionsfr.Block activeCryotheum = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:10", "Active Cryotheum Cooler", (int)activeCoolingRates.getDouble(9), "Gelid Cryotheum", "underhaul/cryotheum", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(2, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block activeIron = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:11", "Active Iron Cooler", (int)activeCoolingRates.getDouble(10), "Molten Iron", "underhaul/iron", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, gold));
                multiblock.configuration.underhaul.fissionsfr.Block activeEmerald = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:12", "Active Emerald Cooler", (int)activeCoolingRates.getDouble(11), "Molten Emerald", "underhaul/emerald", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL));
                multiblock.configuration.underhaul.fissionsfr.Block activeCopper = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:13", "Active Copper Cooler", (int)activeCoolingRates.getDouble(12), "Molten Copper", "underhaul/copper", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, glowstone));
                multiblock.configuration.underhaul.fissionsfr.Block activeTin = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:14", "Active Tin Cooler", (int)activeCoolingRates.getDouble(13), "Molten Tin", "underhaul/tin", multiblock.configuration.underhaul.fissionsfr.PlacementRule.axis(lapis));
                multiblock.configuration.underhaul.fissionsfr.Block activeMagnesium = multiblock.configuration.underhaul.fissionsfr.Block.activeCooler("nuclearcraft:active_cooler:15", "Active Magnesium Cooler", (int)activeCoolingRates.getDouble(14), "Molten Magnesium", "underhaul/magnesium", multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING), multiblock.configuration.underhaul.fissionsfr.PlacementRule.atLeast(1, multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR));
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(cell);ncpf.configuration.underhaul.fissionSFR.blocks.add(cell);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(water);ncpf.configuration.underhaul.fissionSFR.blocks.add(water);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(redstone);ncpf.configuration.underhaul.fissionSFR.blocks.add(redstone);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(quartz);ncpf.configuration.underhaul.fissionSFR.blocks.add(quartz);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(gold);ncpf.configuration.underhaul.fissionSFR.blocks.add(gold);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(glowstone);ncpf.configuration.underhaul.fissionSFR.blocks.add(glowstone);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(lapis);ncpf.configuration.underhaul.fissionSFR.blocks.add(lapis);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(diamond);ncpf.configuration.underhaul.fissionSFR.blocks.add(diamond);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(helium);ncpf.configuration.underhaul.fissionSFR.blocks.add(helium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(enderium);ncpf.configuration.underhaul.fissionSFR.blocks.add(enderium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(cryotheum);ncpf.configuration.underhaul.fissionSFR.blocks.add(cryotheum);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(iron);ncpf.configuration.underhaul.fissionSFR.blocks.add(iron);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(emerald);ncpf.configuration.underhaul.fissionSFR.blocks.add(emerald);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(copper);ncpf.configuration.underhaul.fissionSFR.blocks.add(copper);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(tin);ncpf.configuration.underhaul.fissionSFR.blocks.add(tin);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(magnesium);ncpf.configuration.underhaul.fissionSFR.blocks.add(magnesium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(graphite);ncpf.configuration.underhaul.fissionSFR.blocks.add(graphite);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(beryllium);ncpf.configuration.underhaul.fissionSFR.blocks.add(beryllium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeWater);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeWater);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeRedstone);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeRedstone);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeQuartz);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeQuartz);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeGold);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeGold);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeGlowstone);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeGlowstone);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeLapis);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeLapis);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeDiamond);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeDiamond);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeHelium);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeHelium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeEnderium);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeEnderium);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeCryotheum);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeCryotheum);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeIron);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeIron);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeEmerald);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeEmerald);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeCopper);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeCopper);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeTin);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeTin);
                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(activeMagnesium);ncpf.configuration.underhaul.fissionSFR.blocks.add(activeMagnesium);
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "thorium", "TBU", "TBU Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "uranium", "LEU-233", "LEU-233 Oxide", "HEU-233", "HEU-233 Oxide", "LEU-235", "LEU-235 Oxide", "HEU-235", "HEU-235 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "neptunium", "LEN-236", "LEN-236 Oxide", "HEN-236", "HEN-236 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "plutonium", "LEP-239", "LEP-239 Oxide", "HEP-239", "HEP-239 Oxide", "LEP-241", "LEP-241 Oxide", "HEP-241", "HEP-241 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "mox", "MOX-239", "MOX-241");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "americium", "LEA-242", "LEA-242 Oxide", "HEA-242", "HEA-242 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "curium", "LECm-243", "LECm-243 Oxide", "HECm-243", "HECm-243 Oxide", "LECm-245", "LECm-245 Oxide", "HECm-245", "HECm-245 Oxide", "LECm-247", "LECm-247 Oxide", "HECm-247", "HECm-247 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "berkelium", "LEB-248", "LEB-248 Oxide", "HEB-248", "HEB-248 Oxide");
                addFuels(ncpf, config, powerMult, heatMult, fuelUseMult, "californium", "LECf-249", "LECf-249 Oxide", "HECf-249", "HECf-249 Oxide", "LECf-251", "LECf-251 Oxide", "HECf-251", "HECf-251 Oxide");
                return ncpf;
            }
            private void addFuels(NCPFFile ncpf, Config config, double powerMult, double heatMult, double fuelUseMult, String baseName, String... fuelNames){
                ConfigList time = config.getConfigList("fission_"+baseName+"_fuel_time");
                ConfigList power = config.getConfigList("fission_"+baseName+"_power");
                ConfigList heat = config.getConfigList("fission_"+baseName+"_heat_generation");
                for(int i = 0; i<fuelNames.length; i++){
                    multiblock.configuration.underhaul.fissionsfr.Fuel fuel = multiblock.configuration.underhaul.fissionsfr.Fuel.fuel("nuclearcraft:fuel_"+baseName+":"+i, fuelNames[i], (float)(power.getDouble(i)*powerMult), (float)(heat.getDouble(i)*heatMult), (int)(time.getDouble(i)/fuelUseMult), ("underhaul/fuel/fuel_"+baseName+"_"+fuelNames[i].toLowerCase(Locale.ENGLISH).replace(" oxide", "_oxide").replace("-", "_").replace("ecm_", "ec_").replace("ecf_", "ec_")).replace("fuel_mox", "fuel_mixed_oxide"));
                    ncpf.configuration.underhaul.fissionSFR.allFuels.add(fuel);ncpf.configuration.underhaul.fissionSFR.fuels.add(fuel);
                }
            }
        });// UNDERHAUL nuclearcraft.cfg
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                return ForgeConfig.parse(in).getConfig("fission").hasProperty("fission_sink_cooling_rate");
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                Config config = ForgeConfig.parse(in);
                Config fission = config.get("fission");
                Config turbine = config.get("turbine");
                NCPFFile ncpf = new NCPFFile();
                ncpf.configuration = new Configuration("NuclearCraft", "Unknown", null);
                ncpf.configuration.overhaul = new OverhaulConfiguration();
                //<editor-fold defaultstate="collapsed" desc="Fission SFR">
                ncpf.configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                multiblock.configuration.overhaul.fissionsfr.Block controller = multiblock.configuration.overhaul.fissionsfr.Block.controller("nuclearcraft:solid_fission_controller", "Solid Fission Controller", "overhaul/controller");
                multiblock.configuration.overhaul.fissionsfr.Block casing = multiblock.configuration.overhaul.fissionsfr.Block.casing("nuclearcraft:fission_casing", "Reactor Casing", "overhaul/casing", true);
                multiblock.configuration.overhaul.fissionsfr.Block transparentCasing = multiblock.configuration.overhaul.fissionsfr.Block.casing("nuclearcraft:fission_glass", "Reactor Glass", "overhaul/glass", false);
                multiblock.configuration.overhaul.fissionsfr.Block vent = multiblock.configuration.overhaul.fissionsfr.Block.vent("nuclearcraft:fission_vent", "Vent (Input)", "overhaul/vent", "Vent (Output)", "overhaul/vent_output");
                ncpf.configuration.overhaul.fissionSFR.blocks.add(controller);ncpf.configuration.overhaul.fissionSFR.allBlocks.add(controller);
                ncpf.configuration.overhaul.fissionSFR.blocks.add(casing);ncpf.configuration.overhaul.fissionSFR.allBlocks.add(casing);
                ncpf.configuration.overhaul.fissionSFR.blocks.add(transparentCasing);ncpf.configuration.overhaul.fissionSFR.allBlocks.add(transparentCasing);
                ncpf.configuration.overhaul.fissionSFR.blocks.add(vent);ncpf.configuration.overhaul.fissionSFR.allBlocks.add(vent);
                ncpf.configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fission.getInt("fission_cooling_efficiency_leniency");
                ncpf.configuration.overhaul.fissionSFR.minSize = fission.getInt("fission_min_size");
                ncpf.configuration.overhaul.fissionSFR.maxSize = fission.getInt("fission_max_size");
                ncpf.configuration.overhaul.fissionSFR.neutronReach = fission.getInt("fission_neutron_reach");
                double fuelTimeMult = fission.getDouble("fission_fuel_time_multiplier");
                ConfigList sparsity = fission.getConfigList("fission_sparsity_penalty_params");
                ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyMult = (float) sparsity.getDouble(0);
                ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = (float) sparsity.getDouble(1);
                ConfigList sourceEfficiency = fission.getConfigList("fission_source_efficiency");
                multiblock.configuration.overhaul.fissionsfr.Block rabe = multiblock.configuration.overhaul.fissionsfr.Block.source("nuclearcraft:fission_source:0", "Ra-Be Neutron Source", "overhaul/ra-be", (float) sourceEfficiency.getDouble(0));
                multiblock.configuration.overhaul.fissionsfr.Block pobe = multiblock.configuration.overhaul.fissionsfr.Block.source("nuclearcraft:fission_source:1", "Po-Be Neutron Source", "overhaul/po-be", (float) sourceEfficiency.getDouble(1));
                multiblock.configuration.overhaul.fissionsfr.Block cf252 = multiblock.configuration.overhaul.fissionsfr.Block.source("nuclearcraft:fission_source:2", "Cf-252 Neutron Source", "overhaul/cf-252", (float) sourceEfficiency.getDouble(2));
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(rabe);ncpf.configuration.overhaul.fissionSFR.blocks.add(rabe);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(pobe);ncpf.configuration.overhaul.fissionSFR.blocks.add(pobe);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(cf252);ncpf.configuration.overhaul.fissionSFR.blocks.add(cf252);
                ConfigList coolingRates = fission.getConfigList("fission_sink_cooling_rate");
                ConfigList rules = fission.getConfigList("fission_sink_rule");
                multiblock.configuration.overhaul.fissionsfr.Block water = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:0", "Water Heat Sink", coolingRates.getInt(0), "overhaul/water");
                multiblock.configuration.overhaul.fissionsfr.Block iron = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:1", "Iron Heat Sink", coolingRates.getInt(1), "overhaul/iron");
                multiblock.configuration.overhaul.fissionsfr.Block redstone = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:2", "Redstone Heat Sink", coolingRates.getInt(2), "overhaul/redstone");
                multiblock.configuration.overhaul.fissionsfr.Block quartz = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:3", "Quartz Heat Sink", coolingRates.getInt(3), "overhaul/quartz");
                multiblock.configuration.overhaul.fissionsfr.Block obsidian = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:4", "Obsidian Heat Sink", coolingRates.getInt(4), "overhaul/obsidian");
                multiblock.configuration.overhaul.fissionsfr.Block netherBrick = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:5", "Nether Brick Heat Sink", coolingRates.getInt(5), "overhaul/nether brick");
                multiblock.configuration.overhaul.fissionsfr.Block glowstone = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:6", "Glowstone Heat Sink", coolingRates.getInt(6), "overhaul/glowstone");
                multiblock.configuration.overhaul.fissionsfr.Block lapis = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:7", "Lapis Heat Sink", coolingRates.getInt(7), "overhaul/lapis");
                multiblock.configuration.overhaul.fissionsfr.Block gold = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:8", "Gold Heat Sink", coolingRates.getInt(8), "overhaul/gold");
                multiblock.configuration.overhaul.fissionsfr.Block prismarine = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:9", "Prismarine Heat Sink", coolingRates.getInt(9), "overhaul/prismarine");
                multiblock.configuration.overhaul.fissionsfr.Block slime = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:10", "Slime Heat Sink", coolingRates.getInt(10), "overhaul/slime");
                multiblock.configuration.overhaul.fissionsfr.Block endStone = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:11", "End Stone Heat Sink", coolingRates.getInt(11), "overhaul/end stone");
                multiblock.configuration.overhaul.fissionsfr.Block purpur = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:12", "Purpur Heat Sink", coolingRates.getInt(12), "overhaul/purpur");
                multiblock.configuration.overhaul.fissionsfr.Block diamond = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:13", "Diamond Heat Sink", coolingRates.getInt(13), "overhaul/diamond");
                multiblock.configuration.overhaul.fissionsfr.Block emerald = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:14", "Emerald Heat Sink", coolingRates.getInt(14), "overhaul/emerald");
                multiblock.configuration.overhaul.fissionsfr.Block copper = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink:15", "Copper Heat Sink", coolingRates.getInt(15), "overhaul/copper");
                multiblock.configuration.overhaul.fissionsfr.Block tin = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:0", "Tin Heat Sink", coolingRates.getInt(16), "overhaul/tin");
                multiblock.configuration.overhaul.fissionsfr.Block lead = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:1", "Lead Heat Sink", coolingRates.getInt(17), "overhaul/lead");
                multiblock.configuration.overhaul.fissionsfr.Block boron = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:2", "Boron Heat Sink", coolingRates.getInt(18), "overhaul/boron");
                multiblock.configuration.overhaul.fissionsfr.Block lithium = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:3", "Lithium Heat Sink", coolingRates.getInt(19), "overhaul/lithium");
                multiblock.configuration.overhaul.fissionsfr.Block magnesium = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:4", "Magnesium Heat Sink", coolingRates.getInt(20), "overhaul/magnesium");
                multiblock.configuration.overhaul.fissionsfr.Block manganese = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:5", "Manganese Heat Sink", coolingRates.getInt(21), "overhaul/manganese");
                multiblock.configuration.overhaul.fissionsfr.Block aluminum = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:6", "Aluminum Heat Sink", coolingRates.getInt(22), "overhaul/aluminum");
                multiblock.configuration.overhaul.fissionsfr.Block silver = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:7", "Silver Heat Sink", coolingRates.getInt(23), "overhaul/silver");
                multiblock.configuration.overhaul.fissionsfr.Block fluorite = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:8", "Fluorite Heat Sink", coolingRates.getInt(24), "overhaul/fluorite");
                multiblock.configuration.overhaul.fissionsfr.Block villiaumite = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:9", "Villiaumite Heat Sink", coolingRates.getInt(25), "overhaul/villiaumite");
                multiblock.configuration.overhaul.fissionsfr.Block carobbiite = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:10", "Carobbiite Heat Sink", coolingRates.getInt(26), "overhaul/carobbiite");
                multiblock.configuration.overhaul.fissionsfr.Block arsenic = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:11", "Arsenic Heat Sink", coolingRates.getInt(27), "overhaul/arsenic");
                multiblock.configuration.overhaul.fissionsfr.Block nitrogen = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:12", "Liquid Nitrogen Heat Sink", coolingRates.getInt(28), "overhaul/nitrogen");
                multiblock.configuration.overhaul.fissionsfr.Block helium = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:13", "Liquid Helium Heat Sink", coolingRates.getInt(29), "overhaul/helium");
                multiblock.configuration.overhaul.fissionsfr.Block enderium = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:14", "Enderium Heat Sink", coolingRates.getInt(30), "overhaul/enderium");
                multiblock.configuration.overhaul.fissionsfr.Block cryotheum = multiblock.configuration.overhaul.fissionsfr.Block.heatsink("nuclearcraft:solid_fission_sink2:15", "Cryotheum Heat Sink", coolingRates.getInt(31), "overhaul/cryotheum");
                multiblock.configuration.overhaul.fissionsfr.Block cell = multiblock.configuration.overhaul.fissionsfr.Block.cell("nuclearcraft:solid_fission_cell", "Fuel Cell", "overhaul/cell");
                multiblock.configuration.overhaul.fissionsfr.Block cellPort = multiblock.configuration.overhaul.fissionsfr.Block.port(cell, "nuclearcraft:fission_cell_port", "Fuel Cell Port (Input)", "overhaul/cell_port_input", "Fuel Cell Port (Output)", "overhaul/cell_port_output");
                cell.port = cellPort;
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(cell);ncpf.configuration.overhaul.fissionSFR.blocks.add(cell);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(cell.port);ncpf.configuration.overhaul.fissionSFR.blocks.add(cell.port);
                multiblock.configuration.overhaul.fissionsfr.Block irradiator = multiblock.configuration.overhaul.fissionsfr.Block.irradiator("nuclearcraft:fission_irradiator", "Neutron Irradiator", "overhaul/irradiator");
                multiblock.configuration.overhaul.fissionsfr.Block irradiatorPort = multiblock.configuration.overhaul.fissionsfr.Block.port(irradiator, "nuclearcraft:fission_irradiator_port", "Neutron Irradiator Port (Input)", "overhaul/irradiator_port_input", "Neutron Irradiator Port (Output)", "overhaul/irradiator_port_output");
                irradiator.port = irradiatorPort;
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(irradiator);ncpf.configuration.overhaul.fissionSFR.blocks.add(irradiator);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(irradiator.port);ncpf.configuration.overhaul.fissionSFR.blocks.add(irradiator.port);
                multiblock.configuration.overhaul.fissionsfr.Block conductor = multiblock.configuration.overhaul.fissionsfr.Block.conductor("nuclearcraft:fission_conductor", "Conductor", "overhaul/conductor");
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(conductor);ncpf.configuration.overhaul.fissionSFR.blocks.add(conductor);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(water);ncpf.configuration.overhaul.fissionSFR.blocks.add(water);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(iron);ncpf.configuration.overhaul.fissionSFR.blocks.add(iron);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(redstone);ncpf.configuration.overhaul.fissionSFR.blocks.add(redstone);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(quartz);ncpf.configuration.overhaul.fissionSFR.blocks.add(quartz);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(obsidian);ncpf.configuration.overhaul.fissionSFR.blocks.add(obsidian);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(netherBrick);ncpf.configuration.overhaul.fissionSFR.blocks.add(netherBrick);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(glowstone);ncpf.configuration.overhaul.fissionSFR.blocks.add(glowstone);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(lapis);ncpf.configuration.overhaul.fissionSFR.blocks.add(lapis);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(gold);ncpf.configuration.overhaul.fissionSFR.blocks.add(gold);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(prismarine);ncpf.configuration.overhaul.fissionSFR.blocks.add(prismarine);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(slime);ncpf.configuration.overhaul.fissionSFR.blocks.add(slime);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(endStone);ncpf.configuration.overhaul.fissionSFR.blocks.add(endStone);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(purpur);ncpf.configuration.overhaul.fissionSFR.blocks.add(purpur);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(diamond);ncpf.configuration.overhaul.fissionSFR.blocks.add(diamond);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(emerald);ncpf.configuration.overhaul.fissionSFR.blocks.add(emerald);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(copper);ncpf.configuration.overhaul.fissionSFR.blocks.add(copper);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(tin);ncpf.configuration.overhaul.fissionSFR.blocks.add(tin);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(lead);ncpf.configuration.overhaul.fissionSFR.blocks.add(lead);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(boron);ncpf.configuration.overhaul.fissionSFR.blocks.add(boron);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(lithium);ncpf.configuration.overhaul.fissionSFR.blocks.add(lithium);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(magnesium);ncpf.configuration.overhaul.fissionSFR.blocks.add(magnesium);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(manganese);ncpf.configuration.overhaul.fissionSFR.blocks.add(manganese);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(aluminum);ncpf.configuration.overhaul.fissionSFR.blocks.add(aluminum);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(silver);ncpf.configuration.overhaul.fissionSFR.blocks.add(silver);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(fluorite);ncpf.configuration.overhaul.fissionSFR.blocks.add(fluorite);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(villiaumite);ncpf.configuration.overhaul.fissionSFR.blocks.add(villiaumite);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(carobbiite);ncpf.configuration.overhaul.fissionSFR.blocks.add(carobbiite);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(arsenic);ncpf.configuration.overhaul.fissionSFR.blocks.add(arsenic);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(nitrogen);ncpf.configuration.overhaul.fissionSFR.blocks.add(nitrogen);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(helium);ncpf.configuration.overhaul.fissionSFR.blocks.add(helium);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(enderium);ncpf.configuration.overhaul.fissionSFR.blocks.add(enderium);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(cryotheum);ncpf.configuration.overhaul.fissionSFR.blocks.add(cryotheum);
                water.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(0)));
                iron.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(1)));
                redstone.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(2)));
                quartz.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(3)));
                obsidian.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(4)));
                netherBrick.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(5)));
                glowstone.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(6)));
                lapis.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(7)));
                gold.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(8)));
                prismarine.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(9)));
                slime.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(10)));
                endStone.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(11)));
                purpur.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(12)));
                diamond.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(13)));
                emerald.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(14)));
                copper.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(15)));
                tin.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(16)));
                lead.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(17)));
                boron.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(18)));
                lithium.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(19)));
                magnesium.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(20)));
                manganese.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(21)));
                aluminum.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(22)));
                silver.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(23)));
                fluorite.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(24)));
                villiaumite.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(25)));
                carobbiite.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(26)));
                arsenic.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(27)));
                nitrogen.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(28)));
                helium.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(29)));
                enderium.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(30)));
                cryotheum.rules.add(multiblock.configuration.overhaul.fissionsfr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionSFR, rules.getString(31)));
                ConfigList fluxFac = fission.getConfigList("fission_moderator_flux_factor");
                ConfigList modEff = fission.getConfigList("fission_moderator_efficiency");
                multiblock.configuration.overhaul.fissionsfr.Block graphite = multiblock.configuration.overhaul.fissionsfr.Block.moderator("nuclearcraft:ingot_block:8", "Graphite Moderator", "overhaul/graphite", fluxFac.getInt(0), (float) modEff.getDouble(0));
                multiblock.configuration.overhaul.fissionsfr.Block beryllium = multiblock.configuration.overhaul.fissionsfr.Block.moderator("nuclearcraft:ingot_block:9", "Beryllium Moderator", "overhaul/beryllium", fluxFac.getInt(1), (float) modEff.getDouble(1));
                multiblock.configuration.overhaul.fissionsfr.Block heavyWater = multiblock.configuration.overhaul.fissionsfr.Block.moderator("nuclearcraft:heavy_water_moderator", "Heavy Water Moderator", "overhaul/heavy water", fluxFac.getInt(2), (float) modEff.getDouble(2));
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(graphite);ncpf.configuration.overhaul.fissionSFR.blocks.add(graphite);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(beryllium);ncpf.configuration.overhaul.fissionSFR.blocks.add(beryllium);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(heavyWater);ncpf.configuration.overhaul.fissionSFR.blocks.add(heavyWater);
                ConfigList refEff = fission.getConfigList("fission_reflector_efficiency");
                ConfigList refRef = fission.getConfigList("fission_reflector_reflectivity");
                multiblock.configuration.overhaul.fissionsfr.Block bec = multiblock.configuration.overhaul.fissionsfr.Block.reflector("nuclearcraft:fission_reflector:0", "Beryllium-Carbon Reflector", "overhaul/beryllium-carbon", (float) refEff.getDouble(0), (float) refRef.getDouble(0));
                multiblock.configuration.overhaul.fissionsfr.Block pbs = multiblock.configuration.overhaul.fissionsfr.Block.reflector("nuclearcraft:fission_reflector:1", "Lead-Steel Reflector", "overhaul/lead-steel", (float) refEff.getDouble(1), (float) refRef.getDouble(1));
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(bec);ncpf.configuration.overhaul.fissionSFR.blocks.add(bec);
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(pbs);ncpf.configuration.overhaul.fissionSFR.blocks.add(pbs);
                ConfigList shieldHeat = fission.getConfigList("fission_shield_heat_per_flux");
                ConfigList shieldEff = fission.getConfigList("fission_shield_efficiency");
                multiblock.configuration.overhaul.fissionsfr.Block bag = multiblock.configuration.overhaul.fissionsfr.Block.shield("nuclearcraft:fission_shield:0", "Boron-Silver Neutron Shield", "overhaul/boron-silver", "overhaul/boron-silver_closed", (int) shieldHeat.getDouble(0), (float) shieldEff.getDouble(0));
                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(bag);ncpf.configuration.overhaul.fissionSFR.blocks.add(bag);
                ConfigList irrHeat = fission.getConfigList("fission_irradiator_heat_per_flux");
                ConfigList irrEff = fission.getConfigList("fission_irradiator_efficiency");
                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrec1 = multiblock.configuration.overhaul.fissionsfr.BlockRecipe.irradiatorRecipe("nuclearcraft:dust:3", "Thorium Dust", "overhaul/item/thorium_dust", "nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", (float)irrEff.getDouble(0), (float)irrHeat.getDouble(0));
                irrec1.inputLegacyNames.add("Thorium to Protactinium-Enriched Thorium");
                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrec2 = multiblock.configuration.overhaul.fissionsfr.BlockRecipe.irradiatorRecipe("nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", "nuclearcraft:fission_dust:4", "Protactinium-233 Dust", "overhaul/item/protactinium_dust", (float)irrEff.getDouble(1), (float)irrHeat.getDouble(1));
                irrec2.inputLegacyNames.add("Protactinium-Enriched Thorium to Protactinium-233");
                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrec3 = multiblock.configuration.overhaul.fissionsfr.BlockRecipe.irradiatorRecipe("nuclearcraft:fission_dust:0", "Bismuth Dust", "overhaul/item/bismuth_dust", "nuclearcraft:fission_dust:2", "Polonium Dust", "overhaul/item/polonium_dust", (float)irrEff.getDouble(2), (float)irrHeat.getDouble(2));
                irrec3.inputLegacyNames.add("Bismuth Dust to Polonium Dust");
                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolant1 = multiblock.configuration.overhaul.fissionsfr.CoolantRecipe.coolantRecipe("water", "Water", "fluids/water", "high_pressure_steam", "High Pressure Steam", "fluids/hps", 64, 4);
                coolant1.inputLegacyNames.add("Water to High Pressure Steam");
                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolant2 = multiblock.configuration.overhaul.fissionsfr.CoolantRecipe.coolantRecipe("preheated_water", "Preheated Water", "fluids/preheated_water", "high_pressure_steam", "High Pressure Steam", "fluids/hps", 32, 4);
                coolant2.inputLegacyNames.add("Preheated Water to High Pressure Steam");
                irradiator.allRecipes.add(irrec1);irradiator.recipes.add(irrec1);
                irradiator.allRecipes.add(irrec2);irradiator.recipes.add(irrec2);
                irradiator.allRecipes.add(irrec3);irradiator.recipes.add(irrec3);
                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolant1);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolant1);
                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolant2);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolant2);
                addSFRFuels(cell, fission, fuelTimeMult, "thorium", null, "TBU Oxide", "TBU Nitride", "TBU-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "uranium", null, "LEU-233 Oxide", "LEU-233 Nitride", "LEU-233-Zirconium Alloy", null, null, "HEU-233 Oxide", "HEU-233 Nitride", "HEU-233-Zirconium Alloy", null, null, "LEU-235 Oxide", "LEU-235 Nitride", "LEU-235-Zirconium Alloy", null, null, "HEU-235 Oxide", "HEU-235 Nitride", "HEU-235-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "neptunium", null, "LEN-236 Oxide", "LEN-236 Nitride", "LEN-236-Zirconium Alloy", null, null, "HEN-236 Oxide", "HEN-236 Nitride", "HEN-236-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "plutonium", null, "LEP-239 Oxide", "LEP-239 Nitride", "LEP-239-Zirconium Alloy", null, null, "HEP-239 Oxide", "HEP-239 Nitride", "HEP-239-Zirconium Alloy", null, null, "LEP-241 Oxide", "LEP-241 Nitride", "LEP-241-Zirconium Alloy", null, null, "HEP-241 Oxide", "HEP-241 Nitride", "HEP-241-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "mixed", null, "MOX-239", "MNI-239", "MZA-239", null, null, "MOX-241", "MNI-241", "MZA-241", null);
                addSFRFuels(cell, fission, fuelTimeMult, "americium", null, "LEA-242 Oxide", "LEA-242 Nitride", "LEA-242-Zirconium Alloy", null, null, "HEA-242 Oxide", "HEA-242 Nitride", "HEA-242-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "curium", null, "LECm-243 Oxide", "LECm-243 Nitride", "LECm-243-Zirconium Alloy", null, null, "HECm-243 Oxide", "HECm-243 Nitride", "HECm-243-Zirconium Alloy", null, null, "LECm-245 Oxide", "LECm-245 Nitride", "LECm-245-Zirconium Alloy", null, null, "HECm-245 Oxide", "HECm-245 Nitride", "HECm-245-Zirconium Alloy", null, null, "LECm-247 Oxide", "LECm-247 Nitride", "LECm-247-Zirconium Alloy", null, null, "HECm-247 Oxide", "HECm-247 Nitride", "HECm-247-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "berkelium", null, "LEB-248 Oxide", "LEB-248 Nitride", "LEB-248-Zirconium Alloy", null, null, "HEB-248 Oxide", "HEB-248 Nitride", "HEB-248-Zirconium Alloy", null);
                addSFRFuels(cell, fission, fuelTimeMult, "californium", null, "LECf-249 Oxide", "LECf-249 Nitride", "LECf-249-Zirconium Alloy", null, null, "HECf-249 Oxide", "HECf-249 Nitride", "HECf-249-Zirconium Alloy", null, null, "LECf-251 Oxide", "LECf-251 Nitride", "LECf-251-Zirconium Alloy", null, null, "HECf-251 Oxide", "HECf-251 Nitride", "HECf-251-Zirconium Alloy", null);
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Fission MSR">
                ncpf.configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                multiblock.configuration.overhaul.fissionmsr.Block mcontroller = multiblock.configuration.overhaul.fissionmsr.Block.controller("nuclearcraft:salt_fission_controller", "Molten Salt Fission Controller", "overhaul/msr/controller");
                multiblock.configuration.overhaul.fissionmsr.Block mcasing = multiblock.configuration.overhaul.fissionmsr.Block.casing("nuclearcraft:fission_casing", "Reactor Casing", "overhaul/casing", true);
                multiblock.configuration.overhaul.fissionmsr.Block mtransparentCasing = multiblock.configuration.overhaul.fissionmsr.Block.casing("nuclearcraft:fission_glass", "Reactor Glass", "overhaul/glass", false);
                ncpf.configuration.overhaul.fissionMSR.blocks.add(mcontroller);ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcontroller);
                ncpf.configuration.overhaul.fissionMSR.blocks.add(mcasing);ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcasing);
                ncpf.configuration.overhaul.fissionMSR.blocks.add(mtransparentCasing);ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mtransparentCasing);
                ncpf.configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fission.getInt("fission_cooling_efficiency_leniency");
                ncpf.configuration.overhaul.fissionMSR.minSize = fission.getInt("fission_min_size");
                ncpf.configuration.overhaul.fissionMSR.maxSize = fission.getInt("fission_max_size");
                ncpf.configuration.overhaul.fissionMSR.neutronReach = fission.getInt("fission_neutron_reach");
                ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyMult = (float) sparsity.getDouble(0);
                ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = (float) sparsity.getDouble(1);
                multiblock.configuration.overhaul.fissionmsr.Block mrabe = multiblock.configuration.overhaul.fissionmsr.Block.source("nuclearcraft:fission_source:0", "Ra-Be Neutron Source", "overhaul/ra-be", (float) sourceEfficiency.getDouble(0));
                multiblock.configuration.overhaul.fissionmsr.Block mpobe = multiblock.configuration.overhaul.fissionmsr.Block.source("nuclearcraft:fission_source:1", "Po-Be Neutron Source", "overhaul/po-be", (float) sourceEfficiency.getDouble(1));
                multiblock.configuration.overhaul.fissionmsr.Block mcf252 = multiblock.configuration.overhaul.fissionmsr.Block.source("nuclearcraft:fission_source:2", "Cf-252 Neutron Source", "overhaul/cf-252", (float) sourceEfficiency.getDouble(2));
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mrabe);ncpf.configuration.overhaul.fissionMSR.blocks.add(mrabe);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mpobe);ncpf.configuration.overhaul.fissionMSR.blocks.add(mpobe);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcf252);ncpf.configuration.overhaul.fissionMSR.blocks.add(mcf252);
                coolingRates = fission.getConfigList("fission_heater_cooling_rate");
                rules = fission.getConfigList("fission_heater_rule");
                multiblock.configuration.overhaul.fissionmsr.Block mstandard = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:0", "Standard Coolant Heater", "overhaul/msr/standard");
                multiblock.configuration.overhaul.fissionmsr.Block pstandard = multiblock.configuration.overhaul.fissionmsr.Block.port(mstandard, "nuclearcraft:fission_heater_port:0", "Standard Coolant Heater Port (Input)", "overhaul/msr/port/standard", "Standard Coolant Heater Port (Output)", "overhaul/msr/port/output/standard");
                mstandard.port = pstandard;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rstandard = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("nak", "Eutectic NAK Alloy", "overhaul/msr/coolant/nak", "nak_hot", "Hot Eutectic NaK Alloy", "overhaul/msr/coolant/hot/nak", 1, 1, coolingRates.getInt(0));
                mstandard.recipes.add(rstandard);mstandard.allRecipes.add(rstandard);
                multiblock.configuration.overhaul.fissionmsr.Block miron = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:1", "Iron Coolant Heater", "overhaul/msr/iron");
                multiblock.configuration.overhaul.fissionmsr.Block piron = multiblock.configuration.overhaul.fissionmsr.Block.port(miron, "nuclearcraft:fission_heater_port:1", "Iron Coolant Heater Port (Input)", "overhaul/msr/port/iron", "Iron Coolant Heater Port (Output)", "overhaul/msr/port/output/iron");
                miron.port = piron;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe riron = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("iron_nak", "Eutectic NaK-Iron Mixture", "overhaul/msr/coolant/iron", "iron_nak_hot", "Hot Eutectic NaK-Iron Mixture", "overhaul/msr/coolant/hot/iron", 1, 1, coolingRates.getInt(1));
                miron.recipes.add(riron);miron.allRecipes.add(riron);
                multiblock.configuration.overhaul.fissionmsr.Block mredstone = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:2", "Redstone Coolant Heater", "overhaul/msr/redstone");
                multiblock.configuration.overhaul.fissionmsr.Block predstone = multiblock.configuration.overhaul.fissionmsr.Block.port(mredstone, "nuclearcraft:fission_heater_port:2", "Redstone Coolant Heater Port (Input)", "overhaul/msr/port/redstone", "Redstone Coolant Heater Port (Output)", "overhaul/msr/port/output/redstone");
                mredstone.port = predstone;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rredstone = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("redstone_nak", "Eutectic NaK-Redstone Mixture", "overhaul/msr/coolant/redstone", "redstone_nak_hot", "Hot Eutectic NaK-Redstone Mixture", "overhaul/msr/coolant/hot/redstone", 1, 1, coolingRates.getInt(2));
                mredstone.recipes.add(rredstone);mredstone.allRecipes.add(rredstone);
                multiblock.configuration.overhaul.fissionmsr.Block mquartz = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:3", "Quartz Coolant Heater", "overhaul/msr/quartz");
                multiblock.configuration.overhaul.fissionmsr.Block pquartz = multiblock.configuration.overhaul.fissionmsr.Block.port(mquartz, "nuclearcraft:fission_heater_port:3", "Quartz Coolant Heater Port (Input)", "overhaul/msr/port/quartz", "Quartz Coolant Heater Port (Output)", "overhaul/msr/port/output/quartz");
                mquartz.port = pquartz;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rquartz = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("quartz_nak", "Eutectic NaK-Quartz Mixture", "overhaul/msr/coolant/quartz", "quartz_nak_hot", "Hot Eutectic NaK-Quartz Mixture", "overhaul/msr/coolant/hot/quartz", 1, 1, coolingRates.getInt(3));
                mquartz.recipes.add(rquartz);mquartz.allRecipes.add(rquartz);
                multiblock.configuration.overhaul.fissionmsr.Block mobsidian = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:4", "Obsidian Coolant Heater", "overhaul/msr/obsidian");
                multiblock.configuration.overhaul.fissionmsr.Block pobsidian = multiblock.configuration.overhaul.fissionmsr.Block.port(mobsidian, "nuclearcraft:fission_heater_port:4", "Obsidian Coolant Heater Port (Input)", "overhaul/msr/port/obsidian", "Obsidian Coolant Heater Port (Output)", "overhaul/msr/port/output/obsidian");
                mobsidian.port = pobsidian;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe robsidian = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("obsidian_nak", "Eutectic NaK-Obsidian Mixture", "overhaul/msr/coolant/obsidian", "obsidian_nak_hot", "Hot Eutectic NaK-Obsidian Mixture", "overhaul/msr/coolant/hot/obsidian", 1, 1, coolingRates.getInt(4));
                mobsidian.recipes.add(robsidian);mobsidian.allRecipes.add(robsidian);
                multiblock.configuration.overhaul.fissionmsr.Block mnetherBrick = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:5", "Nether Brick Coolant Heater", "overhaul/msr/nether brick");
                multiblock.configuration.overhaul.fissionmsr.Block pnetherBrick = multiblock.configuration.overhaul.fissionmsr.Block.port(mnetherBrick, "nuclearcraft:fission_heater_port:5", "Nether Brick Coolant Heater Port (Input)", "overhaul/msr/port/nether_brick", "Nether Brick Coolant Heater Port (Output)", "overhaul/msr/port/output/nether_brick");
                mnetherBrick.port = pnetherBrick;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rnetherBrick = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("nether_brick_nak", "Eutectic NaK-Nether Brick Mixture", "overhaul/msr/coolant/nether_brick", "nether_brick_nak_hot", "Hot Eutectic NaK-Nether Brick Mixture", "overhaul/msr/coolant/hot/nether_brick", 1, 1, coolingRates.getInt(5));
                mnetherBrick.recipes.add(rnetherBrick);mnetherBrick.allRecipes.add(rnetherBrick);
                multiblock.configuration.overhaul.fissionmsr.Block mglowstone = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:6", "Glowstone Coolant Heater", "overhaul/msr/glowstone");
                multiblock.configuration.overhaul.fissionmsr.Block pglowstone = multiblock.configuration.overhaul.fissionmsr.Block.port(mglowstone, "nuclearcraft:fission_heater_port:6", "Glowstone Coolant Heater Port (Input)", "overhaul/msr/port/glowstone", "Glowstone Coolant Heater Port (Output)", "overhaul/msr/port/output/glowstone");
                mglowstone.port = pglowstone;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rglowstone = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("glowstone_nak", "Eutectic NaK-Glowstone Mixture", "overhaul/msr/coolant/glowstone", "glowstone_nak_hot", "Hot Eutectic NaK-Glowstone Mixture", "overhaul/msr/coolant/hot/glowstone", 1, 1, coolingRates.getInt(6));
                mglowstone.recipes.add(rglowstone);mglowstone.allRecipes.add(rglowstone);
                multiblock.configuration.overhaul.fissionmsr.Block mlapis = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:7", "Lapis Coolant Heater", "overhaul/msr/lapis");
                multiblock.configuration.overhaul.fissionmsr.Block plapis = multiblock.configuration.overhaul.fissionmsr.Block.port(mlapis, "nuclearcraft:fission_heater_port:7", "Lapis Coolant Heater Port (Input)", "overhaul/msr/port/lapis", "Lapis Coolant Heater Port (Output)", "overhaul/msr/port/output/lapis");
                mlapis.port = plapis;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rlapis = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("lapis_nak", "Eutectic NaK-Lapis Mixture", "overhaul/msr/coolant/lapis", "lapis_nak_hot", "Hot Eutectic NaK-Lapis Mixture", "overhaul/msr/coolant/hot/lapis", 1, 1, coolingRates.getInt(7));
                mlapis.recipes.add(rlapis);mlapis.allRecipes.add(rlapis);
                multiblock.configuration.overhaul.fissionmsr.Block mgold = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:8", "Gold Coolant Heater", "overhaul/msr/gold");
                multiblock.configuration.overhaul.fissionmsr.Block pgold = multiblock.configuration.overhaul.fissionmsr.Block.port(mgold, "nuclearcraft:fission_heater_port:8", "Gold Coolant Heater Port (Input)", "overhaul/msr/port/gold", "Gold Coolant Heater Port (Output)", "overhaul/msr/port/output/gold");
                mgold.port = pgold;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rgold = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("gold_nak", "Eutectic NaK-Gold Mixture", "overhaul/msr/coolant/gold", "gold_nak_hot", "Hot Eutectic NaK-Gold Mixture", "overhaul/msr/coolant/hot/gold", 1, 1, coolingRates.getInt(8));
                mgold.recipes.add(rgold);mgold.allRecipes.add(rgold);
                multiblock.configuration.overhaul.fissionmsr.Block mprismarine = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:9", "Prismarine Coolant Heater", "overhaul/msr/prismarine");
                multiblock.configuration.overhaul.fissionmsr.Block pprismarine = multiblock.configuration.overhaul.fissionmsr.Block.port(mprismarine, "nuclearcraft:fission_heater_port:9", "Prismarine Coolant Heater Port (Input)", "overhaul/msr/port/prismarine", "Prismarine Coolant Heater Port (Output)", "overhaul/msr/port/output/prismarine");
                mprismarine.port = pprismarine;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rprismarine = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("prismarine_nak", "Eutectic NaK-Prismarine Mixture", "overhaul/msr/coolant/prismarine", "prismarine_nak_hot", "Hot Eutectic NaK-Prismarine Mixture", "overhaul/msr/coolant/hot/prismarine", 1, 1, coolingRates.getInt(9));
                mprismarine.recipes.add(rprismarine);mprismarine.allRecipes.add(rprismarine);
                multiblock.configuration.overhaul.fissionmsr.Block mslime = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:10", "Slime Coolant Heater", "overhaul/msr/slime");
                multiblock.configuration.overhaul.fissionmsr.Block pslime = multiblock.configuration.overhaul.fissionmsr.Block.port(mslime, "nuclearcraft:fission_heater_port:10", "Slime Coolant Heater Port (Input)", "overhaul/msr/port/slime", "Slime Coolant Heater Port (Output)", "overhaul/msr/port/output/slime");
                mslime.port = pslime;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rslime = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("slime_nak", "Eutectic NaK-Slime Mixture", "overhaul/msr/coolant/slime", "slime_nak_hot", "Hot Eutectic NaK-Slime Mixture", "overhaul/msr/coolant/hot/slime", 1, 1, coolingRates.getInt(10));
                mslime.recipes.add(rslime);mslime.allRecipes.add(rslime);
                multiblock.configuration.overhaul.fissionmsr.Block mendStone = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:11", "End Stone Coolant Heater", "overhaul/msr/end stone");
                multiblock.configuration.overhaul.fissionmsr.Block pendStone = multiblock.configuration.overhaul.fissionmsr.Block.port(mendStone, "nuclearcraft:fission_heater_port:11", "End Stone Coolant Heater Port (Input)", "overhaul/msr/port/end_stone", "End Stone Coolant Heater Port (Output)", "overhaul/msr/port/output/end_stone");
                mendStone.port = pendStone;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rendStone = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("end_stone_nak", "Eutectic NaK-End Stone Mixture", "overhaul/msr/coolant/end_stone", "end_stone_nak_hot", "Hot Eutectic NaK-End Stone Mixture", "overhaul/msr/coolant/hot/end_stone", 1, 1, coolingRates.getInt(11));
                mendStone.recipes.add(rendStone);mendStone.allRecipes.add(rendStone);
                multiblock.configuration.overhaul.fissionmsr.Block mpurpur = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:12", "Purpur Coolant Heater", "overhaul/msr/purpur");
                multiblock.configuration.overhaul.fissionmsr.Block ppurpur = multiblock.configuration.overhaul.fissionmsr.Block.port(mpurpur, "nuclearcraft:fission_heater_port:12", "Purpur Coolant Heater Port (Input)", "overhaul/msr/port/purpur", "Purpur Coolant Heater Port (Output)", "overhaul/msr/port/output/purpur");
                mpurpur.port = ppurpur;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rpurpur = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("purpur_nak", "Eutectic NaK-Purpur Mixture", "overhaul/msr/coolant/purpur", "purpur_nak_hot", "Hot Eutectic NaK-Purpur Mixture", "overhaul/msr/coolant/hot/purpur", 1, 1, coolingRates.getInt(12));
                mpurpur.recipes.add(rpurpur);mpurpur.allRecipes.add(rpurpur);
                multiblock.configuration.overhaul.fissionmsr.Block mdiamond = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:13", "Diamond Coolant Heater", "overhaul/msr/diamond");
                multiblock.configuration.overhaul.fissionmsr.Block pdiamond = multiblock.configuration.overhaul.fissionmsr.Block.port(mdiamond, "nuclearcraft:fission_heater_port:13", "Diamond Coolant Heater Port (Input)", "overhaul/msr/port/diamond", "Diamond Coolant Heater Port (Output)", "overhaul/msr/port/output/diamond");
                mdiamond.port = pdiamond;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rdiamond = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("diamond_nak", "Eutectic NaK-Diamond Mixture", "overhaul/msr/coolant/diamond", "diamond_nak_hot", "Hot Eutectic NaK-Diamond Mixture", "overhaul/msr/coolant/hot/diamond", 1, 1, coolingRates.getInt(13));
                mdiamond.recipes.add(rdiamond);mdiamond.allRecipes.add(rdiamond);
                multiblock.configuration.overhaul.fissionmsr.Block memerald = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:14", "Emerald Coolant Heater", "overhaul/msr/emerald");
                multiblock.configuration.overhaul.fissionmsr.Block pemerald = multiblock.configuration.overhaul.fissionmsr.Block.port(memerald, "nuclearcraft:fission_heater_port:14", "Emerald Coolant Heater Port (Input)", "overhaul/msr/port/emerald", "Emerald Coolant Heater Port (Output)", "overhaul/msr/port/output/emerald");
                memerald.port = pemerald;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe remerald = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("emerald_nak", "Eutectic NaK-Emerald Mixture", "overhaul/msr/coolant/emerald", "emerald_nak_hot", "Hot Eutectic NaK-Emerald Mixture", "overhaul/msr/coolant/hot/emerald", 1, 1, coolingRates.getInt(14));
                memerald.recipes.add(remerald);memerald.allRecipes.add(remerald);
                multiblock.configuration.overhaul.fissionmsr.Block mcopper = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater:15", "Copper Coolant Heater", "overhaul/msr/copper");
                multiblock.configuration.overhaul.fissionmsr.Block pcopper = multiblock.configuration.overhaul.fissionmsr.Block.port(mcopper, "nuclearcraft:fission_heater_port:15", "Copper Coolant Heater Port (Input)", "overhaul/msr/port/copper", "Copper Coolant Heater Port (Output)", "overhaul/msr/port/output/copper");
                mcopper.port = pcopper;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rcopper = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("copper_nak", "Eutectic NaK-Copper Mixture", "overhaul/msr/coolant/copper", "copper_nak_hot", "Hot Eutectic NaK-Copper Mixture", "overhaul/msr/coolant/hot/copper", 1, 1, coolingRates.getInt(15));
                mcopper.recipes.add(rcopper);mcopper.allRecipes.add(rcopper);
                multiblock.configuration.overhaul.fissionmsr.Block mtin = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:0", "Tin Coolant Heater", "overhaul/msr/tin");
                multiblock.configuration.overhaul.fissionmsr.Block ptin = multiblock.configuration.overhaul.fissionmsr.Block.port(mtin, "nuclearcraft:fission_heater_port2:0", "Tin Coolant Heater Port (Input)", "overhaul/msr/port/tin", "Tin Coolant Heater Port (Output)", "overhaul/msr/port/output/tin");
                mtin.port = ptin;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rtin = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("tin_nak", "Eutectic NaK-Tin Mixture", "overhaul/msr/coolant/tin", "tin_nak_hot", "Hot Eutectic NaK-Tin Mixture", "overhaul/msr/coolant/hot/tin", 1, 1, coolingRates.getInt(16));
                mtin.recipes.add(rtin);mtin.allRecipes.add(rtin);
                multiblock.configuration.overhaul.fissionmsr.Block mlead = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:1", "Lead Coolant Heater", "overhaul/msr/lead");
                multiblock.configuration.overhaul.fissionmsr.Block plead = multiblock.configuration.overhaul.fissionmsr.Block.port(mlead, "nuclearcraft:fission_heater_port2:1", "Lead Coolant Heater Port (Input)", "overhaul/msr/port/lead", "Lead Coolant Heater Port (Output)", "overhaul/msr/port/output/lead");
                mlead.port = plead;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rlead = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("lead_nak", "Eutectic NaK-Lead Mixture", "overhaul/msr/coolant/lead", "lead_nak_hot", "Hot Eutectic NaK-Lead Mixture", "overhaul/msr/coolant/hot/lead", 1, 1, coolingRates.getInt(17));
                mlead.recipes.add(rlead);mlead.allRecipes.add(rlead);
                multiblock.configuration.overhaul.fissionmsr.Block mboron = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:2", "Boron Coolant Heater", "overhaul/msr/boron");
                multiblock.configuration.overhaul.fissionmsr.Block pboron = multiblock.configuration.overhaul.fissionmsr.Block.port(mboron, "nuclearcraft:fission_heater_port2:2", "Boron Coolant Heater Port (Input)", "overhaul/msr/port/boron", "Boron Coolant Heater Port (Output)", "overhaul/msr/port/output/boron");
                mboron.port = pboron;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rboron = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("boron_nak", "Eutectic NaK-Boron Mixture", "overhaul/msr/coolant/boron", "boron_nak_hot", "Hot Eutectic NaK-Boron Mixture", "overhaul/msr/coolant/hot/boron", 1, 1, coolingRates.getInt(18));
                mboron.recipes.add(rboron);mboron.allRecipes.add(rboron);
                multiblock.configuration.overhaul.fissionmsr.Block mlithium = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:3", "Lithium Coolant Heater", "overhaul/msr/lithium");
                multiblock.configuration.overhaul.fissionmsr.Block plithium = multiblock.configuration.overhaul.fissionmsr.Block.port(mlithium, "nuclearcraft:fission_heater_port2:3", "Lithium Coolant Heater Port (Input)", "overhaul/msr/port/lithium", "Lithium Coolant Heater Port (Output)", "overhaul/msr/port/output/lithium");
                mlithium.port = plithium;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rlithium = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("lithium_nak", "Eutectic NaK-Lithium Mixture", "overhaul/msr/coolant/lithium", "lithium_nak_hot", "Hot Eutectic NaK-Lithium Mixture", "overhaul/msr/coolant/hot/lithium", 1, 1, coolingRates.getInt(19));
                mlithium.recipes.add(rlithium);mlithium.allRecipes.add(rlithium);
                multiblock.configuration.overhaul.fissionmsr.Block mmagnesium = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:4", "Magnesium Coolant Heater", "overhaul/msr/magnesium");
                multiblock.configuration.overhaul.fissionmsr.Block pmagnesium = multiblock.configuration.overhaul.fissionmsr.Block.port(mmagnesium, "nuclearcraft:fission_heater_port2:4", "Magnesium Coolant Heater Port (Input)", "overhaul/msr/port/magnesium", "Magnesium Coolant Heater Port (Output)", "overhaul/msr/port/output/magnesium");
                mmagnesium.port = pmagnesium;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rmagnesium = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("magnesium_nak", "Eutectic NaK-Magnesium Mixture", "overhaul/msr/coolant/magnesium", "magnesium_nak_hot", "Hot Eutectic NaK-Magnesium Mixture", "overhaul/msr/coolant/hot/magnesium", 1, 1, coolingRates.getInt(20));
                mmagnesium.recipes.add(rmagnesium);mmagnesium.allRecipes.add(rmagnesium);
                multiblock.configuration.overhaul.fissionmsr.Block mmanganese = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:5", "Manganese Coolant Heater", "overhaul/msr/manganese");
                multiblock.configuration.overhaul.fissionmsr.Block pmanganese = multiblock.configuration.overhaul.fissionmsr.Block.port(mmanganese, "nuclearcraft:fission_heater_port2:5", "Manganese Coolant Heater Port (Input)", "overhaul/msr/port/manganese", "Manganese Coolant Heater Port (Output)", "overhaul/msr/port/output/manganese");
                mmanganese.port = pmanganese;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rmanganese = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("manganese_nak", "Eutectic NaK-Manganese Mixture", "overhaul/msr/coolant/manganese", "manganese_nak_hot", "Hot Eutectic NaK-Manganese Mixture", "overhaul/msr/coolant/hot/manganese", 1, 1, coolingRates.getInt(21));
                mmanganese.recipes.add(rmanganese);mmanganese.allRecipes.add(rmanganese);
                multiblock.configuration.overhaul.fissionmsr.Block maluminum = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:6", "Aluminum Coolant Heater", "overhaul/msr/aluminum");
                multiblock.configuration.overhaul.fissionmsr.Block paluminum = multiblock.configuration.overhaul.fissionmsr.Block.port(maluminum, "nuclearcraft:fission_heater_port2:6", "Aluminum Coolant Heater Port (Input)", "overhaul/msr/port/aluminum", "Aluminum Coolant Heater Port (Output)", "overhaul/msr/port/output/aluminum");
                maluminum.port = paluminum;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe raluminum = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("aluminum_nak", "Eutectic NaK-Aluminum Mixture", "overhaul/msr/coolant/aluminum", "aluminum_nak_hot", "Hot Eutectic NaK-Aluminum Mixture", "overhaul/msr/coolant/hot/aluminum", 1, 1, coolingRates.getInt(22));
                maluminum.recipes.add(raluminum);maluminum.allRecipes.add(raluminum);
                multiblock.configuration.overhaul.fissionmsr.Block msilver = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:7", "Silver Coolant Heater", "overhaul/msr/silver");
                multiblock.configuration.overhaul.fissionmsr.Block psilver = multiblock.configuration.overhaul.fissionmsr.Block.port(msilver, "nuclearcraft:fission_heater_port2:7", "Silver Coolant Heater Port (Input)", "overhaul/msr/port/silver", "Silver Coolant Heater Port (Output)", "overhaul/msr/port/output/silver");
                msilver.port = psilver;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rsilver = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("silver_nak", "Eutectic NaK-Silver Mixture", "overhaul/msr/coolant/silver", "silver_nak_hot", "Hot Eutectic NaK-Silver Mixture", "overhaul/msr/coolant/hot/silver", 1, 1, coolingRates.getInt(23));
                msilver.recipes.add(rsilver);msilver.allRecipes.add(rsilver);
                multiblock.configuration.overhaul.fissionmsr.Block mfluorite = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:8", "Fluorite Coolant Heater", "overhaul/msr/fluorite");
                multiblock.configuration.overhaul.fissionmsr.Block pfluorite = multiblock.configuration.overhaul.fissionmsr.Block.port(mfluorite, "nuclearcraft:fission_heater_port2:8", "Fluorite Coolant Heater Port (Input)", "overhaul/msr/port/fluorite", "Fluorite Coolant Heater Port (Output)", "overhaul/msr/port/output/fluorite");
                mfluorite.port = pfluorite;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rfluorite = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("fluorite_nak", "Eutectic NaK-Fluorite Mixture", "overhaul/msr/coolant/fluorite", "fluorite_nak_hot", "Hot Eutectic NaK-Fluorite Mixture", "overhaul/msr/coolant/hot/fluorite", 1, 1, coolingRates.getInt(24));
                mfluorite.recipes.add(rfluorite);mfluorite.allRecipes.add(rfluorite);
                multiblock.configuration.overhaul.fissionmsr.Block mvilliaumite = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:9", "Villiaumite Coolant Heater", "overhaul/msr/villiaumite");
                multiblock.configuration.overhaul.fissionmsr.Block pvilliaumite = multiblock.configuration.overhaul.fissionmsr.Block.port(mvilliaumite, "nuclearcraft:fission_heater_port2:9", "Villiaumite Coolant Heater Port (Input)", "overhaul/msr/port/villiaumite", "Villiaumite Coolant Heater Port (Output)", "overhaul/msr/port/output/villiaumite");
                mvilliaumite.port = pvilliaumite;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rvilliaumite = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("villiaumite_nak", "Eutectic NaK-Villiaumite Mixture", "overhaul/msr/coolant/villiaumite", "villiaumite_nak_hot", "Hot Eutectic NaK-Villiaumite Mixture", "overhaul/msr/coolant/hot/villiaumite", 1, 1, coolingRates.getInt(25));
                mvilliaumite.recipes.add(rvilliaumite);mvilliaumite.allRecipes.add(rvilliaumite);
                multiblock.configuration.overhaul.fissionmsr.Block mcarobbiite = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:10", "Carobbiite Coolant Heater", "overhaul/msr/carobbiite");
                multiblock.configuration.overhaul.fissionmsr.Block pcarobbiite = multiblock.configuration.overhaul.fissionmsr.Block.port(mcarobbiite, "nuclearcraft:fission_heater_port2:10", "Carobbiite Coolant Heater Port (Input)", "overhaul/msr/port/carobbiite", "Carobbiite Coolant Heater Port (Output)", "overhaul/msr/port/output/carobbiite");
                mcarobbiite.port = pcarobbiite;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rcarobbiite = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("carobbiite_nak", "Eutectic NaK-Carobbiite Mixture", "overhaul/msr/coolant/carobbiite", "carobbiite_nak_hot", "Hot Eutectic NaK-Carobbiite Mixture", "overhaul/msr/coolant/hot/carobbiite", 1, 1, coolingRates.getInt(26));
                mcarobbiite.recipes.add(rcarobbiite);mcarobbiite.allRecipes.add(rcarobbiite);
                multiblock.configuration.overhaul.fissionmsr.Block marsenic = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:11", "Arsenic Coolant Heater", "overhaul/msr/arsenic");
                multiblock.configuration.overhaul.fissionmsr.Block parsenic = multiblock.configuration.overhaul.fissionmsr.Block.port(marsenic, "nuclearcraft:fission_heater_port2:11", "Arsenic Coolant Heater Port (Input)", "overhaul/msr/port/arsenic", "Arsenic Coolant Heater Port (Output)", "overhaul/msr/port/output/arsenic");
                marsenic.port = parsenic;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rarsenic = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("arsenic_nak", "Eutectic NaK-Arsenic Mixture", "overhaul/msr/coolant/arsenic", "arsenic_nak_hot", "Hot Eutectic NaK-Arsenic Mixture", "overhaul/msr/coolant/hot/arsenic", 1, 1, coolingRates.getInt(27));
                marsenic.recipes.add(rarsenic);marsenic.allRecipes.add(rarsenic);
                multiblock.configuration.overhaul.fissionmsr.Block mnitrogen = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:12", "Liquid Nitrogen Coolant Heater", "overhaul/msr/nitrogen");
                multiblock.configuration.overhaul.fissionmsr.Block pnitrogen = multiblock.configuration.overhaul.fissionmsr.Block.port(mnitrogen, "nuclearcraft:fission_heater_port2:12", "Liquid Nitrogen Coolant Heater Port (Input)", "overhaul/msr/port/nitrogen", "Liquid Nitrogen Coolant Heater Port (Output)", "overhaul/msr/port/output/nitrogen");
                mnitrogen.port = pnitrogen;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rnitrogen = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("liquid_nitrogen_nak", "Eutectic NaK-Nitrogen Mixture", "overhaul/msr/coolant/nitrogen", "liquid_nitrogen_nak_hot", "Hot Eutectic NaK-Nitrogen Mixture", "overhaul/msr/coolant/hot/nitrogen", 1, 1, coolingRates.getInt(28));
                mnitrogen.recipes.add(rnitrogen);mnitrogen.allRecipes.add(rnitrogen);
                multiblock.configuration.overhaul.fissionmsr.Block mhelium = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:13", "Liquid Helium Coolant Heater", "overhaul/msr/helium");
                multiblock.configuration.overhaul.fissionmsr.Block phelium = multiblock.configuration.overhaul.fissionmsr.Block.port(mhelium, "nuclearcraft:fission_heater_port2:13", "Liquid Helium Coolant Heater Port (Input)", "overhaul/msr/port/helium", "Liquid Helium Coolant Heater Port (Output)", "overhaul/msr/port/output/helium");
                mhelium.port = phelium;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rhelium = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("liquid_helium_nak", "Eutectic NaK-Helium Mixture", "overhaul/msr/coolant/helium", "liquid_helium_nak_hot", "Hot Eutectic NaK-Helium Mixture", "overhaul/msr/coolant/hot/helium", 1, 1, coolingRates.getInt(29));
                mhelium.recipes.add(rhelium);mhelium.allRecipes.add(rhelium);
                multiblock.configuration.overhaul.fissionmsr.Block menderium = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:14", "Enderium Coolant Heater", "overhaul/msr/enderium");
                multiblock.configuration.overhaul.fissionmsr.Block penderium = multiblock.configuration.overhaul.fissionmsr.Block.port(menderium, "nuclearcraft:fission_heater_port2:14", "Enderium Coolant Heater Port (Input)", "overhaul/msr/port/enderium", "Enderium Coolant Heater Port (Output)", "overhaul/msr/port/output/enderium");
                menderium.port = penderium;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe renderium = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("enderium_nak", "Eutectic NaK-Enderium Mixture", "overhaul/msr/coolant/enderium", "enderium_nak_hot", "Hot Eutectic NaK-Enderium Mixture", "overhaul/msr/coolant/hot/enderium", 1, 1, coolingRates.getInt(30));
                menderium.recipes.add(renderium);menderium.allRecipes.add(renderium);
                multiblock.configuration.overhaul.fissionmsr.Block mcryotheum = multiblock.configuration.overhaul.fissionmsr.Block.heater("nuclearcraft:salt_fission_heater2:15", "Cryotheum Coolant Heater", "overhaul/msr/cryotheum");
                multiblock.configuration.overhaul.fissionmsr.Block pcryotheum = multiblock.configuration.overhaul.fissionmsr.Block.port(mcryotheum, "nuclearcraft:fission_heater_port2:15", "Cryotheum Coolant Heater Port (Input)", "overhaul/msr/port/cryotheum", "Cryotheum Coolant Heater Port (Output)", "overhaul/msr/port/output/cryotheum");
                mcryotheum.port = pcryotheum;
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe rcryotheum = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.heater("cryotheum_nak", "Eutectic NaK-Cryotheum Mixture", "overhaul/msr/coolant/cryotheum", "cryotheum_nak_hot", "Hot Eutectic NaK-Cryotheum Mixture", "overhaul/msr/coolant/hot/cryotheum", 1, 1, coolingRates.getInt(31));
                mcryotheum.recipes.add(rcryotheum);mcryotheum.allRecipes.add(rcryotheum);
                multiblock.configuration.overhaul.fissionmsr.Block vessel = multiblock.configuration.overhaul.fissionmsr.Block.vessel("nuclearcraft:salt_fission_vessel", "Fuel Vessel", "overhaul/msr/vessel");
                multiblock.configuration.overhaul.fissionmsr.Block vesselPort = multiblock.configuration.overhaul.fissionmsr.Block.port(vessel, "nuclearcraft:fission_vessel_port", "Fuel Vessel Port (Input)", "overhaul/msr/vessel_port_input", "Fuel Vessel Port (Output)", "overhaul/msr/vessel_port_output");
                vessel.port = vesselPort;
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(vessel);ncpf.configuration.overhaul.fissionMSR.blocks.add(vessel);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(vessel.port);ncpf.configuration.overhaul.fissionMSR.blocks.add(vessel.port);
                multiblock.configuration.overhaul.fissionmsr.Block mirradiator = multiblock.configuration.overhaul.fissionmsr.Block.irradiator("nuclearcraft:fission_irradiator", "Neutron Irradiator", "overhaul/irradiator");
                multiblock.configuration.overhaul.fissionmsr.Block mirradiatorPort = multiblock.configuration.overhaul.fissionmsr.Block.port(mirradiator, "nuclearcraft:fission_irradiator_port", "Neutron Irradiator Port (Input)", "overhaul/irradiator_port_input", "Neutron Irradiator Port (Output)", "overhaul/irradiator_port_output");
                mirradiator.port = mirradiatorPort;
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mirradiator);ncpf.configuration.overhaul.fissionMSR.blocks.add(mirradiator);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mirradiator.port);ncpf.configuration.overhaul.fissionMSR.blocks.add(mirradiator.port);
                multiblock.configuration.overhaul.fissionmsr.Block mconductor = multiblock.configuration.overhaul.fissionmsr.Block.conductor("nuclearcraft:fission_conductor", "Conductor", "overhaul/conductor");
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mconductor);ncpf.configuration.overhaul.fissionMSR.blocks.add(mconductor);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mstandard);ncpf.configuration.overhaul.fissionMSR.blocks.add(mstandard);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pstandard);ncpf.configuration.overhaul.fissionMSR.blocks.add(pstandard);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(miron);ncpf.configuration.overhaul.fissionMSR.blocks.add(miron);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(piron);ncpf.configuration.overhaul.fissionMSR.blocks.add(piron);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mredstone);ncpf.configuration.overhaul.fissionMSR.blocks.add(mredstone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(predstone);ncpf.configuration.overhaul.fissionMSR.blocks.add(predstone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mquartz);ncpf.configuration.overhaul.fissionMSR.blocks.add(mquartz);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pquartz);ncpf.configuration.overhaul.fissionMSR.blocks.add(pquartz);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mobsidian);ncpf.configuration.overhaul.fissionMSR.blocks.add(mobsidian);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pobsidian);ncpf.configuration.overhaul.fissionMSR.blocks.add(pobsidian);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mnetherBrick);ncpf.configuration.overhaul.fissionMSR.blocks.add(mnetherBrick);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pnetherBrick);ncpf.configuration.overhaul.fissionMSR.blocks.add(pnetherBrick);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mglowstone);ncpf.configuration.overhaul.fissionMSR.blocks.add(mglowstone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pglowstone);ncpf.configuration.overhaul.fissionMSR.blocks.add(pglowstone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mlapis);ncpf.configuration.overhaul.fissionMSR.blocks.add(mlapis);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(plapis);ncpf.configuration.overhaul.fissionMSR.blocks.add(plapis);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mgold);ncpf.configuration.overhaul.fissionMSR.blocks.add(mgold);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pgold);ncpf.configuration.overhaul.fissionMSR.blocks.add(pgold);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mprismarine);ncpf.configuration.overhaul.fissionMSR.blocks.add(mprismarine);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pprismarine);ncpf.configuration.overhaul.fissionMSR.blocks.add(pprismarine);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mslime);ncpf.configuration.overhaul.fissionMSR.blocks.add(mslime);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pslime);ncpf.configuration.overhaul.fissionMSR.blocks.add(pslime);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mendStone);ncpf.configuration.overhaul.fissionMSR.blocks.add(mendStone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pendStone);ncpf.configuration.overhaul.fissionMSR.blocks.add(pendStone);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mpurpur);ncpf.configuration.overhaul.fissionMSR.blocks.add(mpurpur);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(ppurpur);ncpf.configuration.overhaul.fissionMSR.blocks.add(ppurpur);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mdiamond);ncpf.configuration.overhaul.fissionMSR.blocks.add(mdiamond);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pdiamond);ncpf.configuration.overhaul.fissionMSR.blocks.add(pdiamond);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(memerald);ncpf.configuration.overhaul.fissionMSR.blocks.add(memerald);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pemerald);ncpf.configuration.overhaul.fissionMSR.blocks.add(pemerald);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcopper);ncpf.configuration.overhaul.fissionMSR.blocks.add(mcopper);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pcopper);ncpf.configuration.overhaul.fissionMSR.blocks.add(pcopper);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mtin);ncpf.configuration.overhaul.fissionMSR.blocks.add(mtin);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(ptin);ncpf.configuration.overhaul.fissionMSR.blocks.add(ptin);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mlead);ncpf.configuration.overhaul.fissionMSR.blocks.add(mlead);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(plead);ncpf.configuration.overhaul.fissionMSR.blocks.add(plead);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mboron);ncpf.configuration.overhaul.fissionMSR.blocks.add(mboron);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pboron);ncpf.configuration.overhaul.fissionMSR.blocks.add(pboron);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mlithium);ncpf.configuration.overhaul.fissionMSR.blocks.add(mlithium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(plithium);ncpf.configuration.overhaul.fissionMSR.blocks.add(plithium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mmagnesium);ncpf.configuration.overhaul.fissionMSR.blocks.add(mmagnesium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pmagnesium);ncpf.configuration.overhaul.fissionMSR.blocks.add(pmagnesium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mmanganese);ncpf.configuration.overhaul.fissionMSR.blocks.add(mmanganese);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pmanganese);ncpf.configuration.overhaul.fissionMSR.blocks.add(pmanganese);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(maluminum);ncpf.configuration.overhaul.fissionMSR.blocks.add(maluminum);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(paluminum);ncpf.configuration.overhaul.fissionMSR.blocks.add(paluminum);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(msilver);ncpf.configuration.overhaul.fissionMSR.blocks.add(msilver);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(psilver);ncpf.configuration.overhaul.fissionMSR.blocks.add(psilver);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mfluorite);ncpf.configuration.overhaul.fissionMSR.blocks.add(mfluorite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pfluorite);ncpf.configuration.overhaul.fissionMSR.blocks.add(pfluorite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mvilliaumite);ncpf.configuration.overhaul.fissionMSR.blocks.add(mvilliaumite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pvilliaumite);ncpf.configuration.overhaul.fissionMSR.blocks.add(pvilliaumite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcarobbiite);ncpf.configuration.overhaul.fissionMSR.blocks.add(mcarobbiite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pcarobbiite);ncpf.configuration.overhaul.fissionMSR.blocks.add(pcarobbiite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(marsenic);ncpf.configuration.overhaul.fissionMSR.blocks.add(marsenic);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(parsenic);ncpf.configuration.overhaul.fissionMSR.blocks.add(parsenic);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mnitrogen);ncpf.configuration.overhaul.fissionMSR.blocks.add(mnitrogen);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pnitrogen);ncpf.configuration.overhaul.fissionMSR.blocks.add(pnitrogen);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mhelium);ncpf.configuration.overhaul.fissionMSR.blocks.add(mhelium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(phelium);ncpf.configuration.overhaul.fissionMSR.blocks.add(phelium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(menderium);ncpf.configuration.overhaul.fissionMSR.blocks.add(menderium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(penderium);ncpf.configuration.overhaul.fissionMSR.blocks.add(penderium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mcryotheum);ncpf.configuration.overhaul.fissionMSR.blocks.add(mcryotheum);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(pcryotheum);ncpf.configuration.overhaul.fissionMSR.blocks.add(pcryotheum);
                mstandard.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(0)));
                miron.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(1)));
                mredstone.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(2)));
                mquartz.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(3)));
                mobsidian.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(4)));
                mnetherBrick.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(5)));
                mglowstone.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(6)));
                mlapis.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(7)));
                mgold.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(8)));
                mprismarine.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(9)));
                mslime.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(10)));
                mendStone.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(11)));
                mpurpur.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(12)));
                mdiamond.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(13)));
                memerald.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(14)));
                mcopper.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(15)));
                mtin.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(16)));
                mlead.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(17)));
                mboron.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(18)));
                mlithium.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(19)));
                mmagnesium.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(20)));
                mmanganese.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(21)));
                maluminum.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(22)));
                msilver.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(23)));
                mfluorite.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(24)));
                mvilliaumite.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(25)));
                mcarobbiite.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(26)));
                marsenic.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(27)));
                mnitrogen.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(28)));
                mhelium.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(29)));
                menderium.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(30)));
                mcryotheum.rules.add(multiblock.configuration.overhaul.fissionmsr.PlacementRule.parseNC(ncpf.configuration.overhaul.fissionMSR, rules.getString(31)));
                multiblock.configuration.overhaul.fissionmsr.Block mgraphite = multiblock.configuration.overhaul.fissionmsr.Block.moderator("nuclearcraft:ingot_block:8", "Graphite Moderator", "overhaul/graphite", fluxFac.getInt(0), (float) modEff.getDouble(0));
                multiblock.configuration.overhaul.fissionmsr.Block mberyllium = multiblock.configuration.overhaul.fissionmsr.Block.moderator("nuclearcraft:ingot_block:9", "Beryllium Moderator", "overhaul/beryllium", fluxFac.getInt(1), (float) modEff.getDouble(1));
                multiblock.configuration.overhaul.fissionmsr.Block mheavyWater = multiblock.configuration.overhaul.fissionmsr.Block.moderator("nuclearcraft:heavy_water_moderator", "Heavy Water Moderator", "overhaul/heavy water", fluxFac.getInt(2), (float) modEff.getDouble(2));
                multiblock.configuration.overhaul.fissionmsr.Block mbec = multiblock.configuration.overhaul.fissionmsr.Block.reflector("nuclearcraft:fission_reflector:0", "Beryllium-Carbon Reflector", "overhaul/beryllium-carbon", (float) refEff.getDouble(0), (float) refRef.getDouble(0));
                multiblock.configuration.overhaul.fissionmsr.Block mpbs = multiblock.configuration.overhaul.fissionmsr.Block.reflector("nuclearcraft:fission_reflector:1", "Lead-Steel Reflector", "overhaul/lead-steel", (float) refEff.getDouble(1), (float) refRef.getDouble(1));
                multiblock.configuration.overhaul.fissionmsr.Block mbag = multiblock.configuration.overhaul.fissionmsr.Block.shield("nuclearcraft:fission_shield:0", "Boron-Silver Neutron Shield", "overhaul/boron-silver", "overhaul/boron-silver_closed", (int) shieldHeat.getDouble(0), (float) shieldEff.getDouble(0));
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe mirrec1 = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.irradiatorRecipe("nuclearcraft:dust:3", "Thorium Dust", "overhaul/item/thorium_dust", "nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", (float)irrEff.getDouble(0), (float)irrHeat.getDouble(0));
                mirrec1.inputLegacyNames.add("Thorium to Protactinium-Enriched Thorium");
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe mirrec2 = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.irradiatorRecipe("nuclearcraft:fission_dust:3", "Protactinium-Enriched Thorium Dust", "overhaul/item/protactinium_enriched_thorium_dust", "nuclearcraft:fission_dust:4", "Protactinium-233 Dust", "overhaul/item/protactinium_dust", (float)irrEff.getDouble(1), (float)irrHeat.getDouble(1));
                mirrec2.inputLegacyNames.add("Protactinium-Enriched Thorium to Protactinium-233");
                multiblock.configuration.overhaul.fissionmsr.BlockRecipe mirrec3 = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.irradiatorRecipe("nuclearcraft:fission_dust:0", "Bismuth Dust", "overhaul/item/bismuth_dust", "nuclearcraft:fission_dust:2", "Polonium Dust", "overhaul/item/polonium_dust", (float)irrEff.getDouble(2), (float)irrHeat.getDouble(2));
                mirrec3.inputLegacyNames.add("Bismuth Dust to Polonium Dust");
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mgraphite);ncpf.configuration.overhaul.fissionMSR.blocks.add(mgraphite);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mberyllium);ncpf.configuration.overhaul.fissionMSR.blocks.add(mberyllium);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mheavyWater);ncpf.configuration.overhaul.fissionMSR.blocks.add(mheavyWater);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mbec);ncpf.configuration.overhaul.fissionMSR.blocks.add(mbec);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mpbs);ncpf.configuration.overhaul.fissionMSR.blocks.add(mpbs);
                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(mbag);ncpf.configuration.overhaul.fissionMSR.blocks.add(mbag);
                mirradiator.allRecipes.add(mirrec1);mirradiator.recipes.add(mirrec1);
                mirradiator.allRecipes.add(mirrec2);mirradiator.recipes.add(mirrec2);
                mirradiator.allRecipes.add(mirrec3);mirradiator.recipes.add(mirrec3);
                addMSRFuels(vessel, fission, fuelTimeMult, "thorium", null, null, null, null, "TBU Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "uranium", null, null, null, null, "LEU-233 Fluoride", null, null, null, null, "HEU-233 Fluoride", null, null, null, null, "LEU-235 Fluoride", null, null, null, null, "HEU-235 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "neptunium", null, null, null, null, "LEN-236 Fluoride", null, null, null, null, "HEN-236 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "plutonium", null, null, null, null, "LEP-239 Fluoride", null, null, null, null, "HEP-239 Fluoride", null, null, null, null, "LEP-241 Fluoride", null, null, null, null, "HEP-241 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "mixed", null, null, null, null, "MF4-239", null, null, null, null, "MF4-241");
                addMSRFuels(vessel, fission, fuelTimeMult, "americium", null, null, null, null, "LEA-242 Fluoride", null, null, null, null, "HEA-242 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "curium", null, null, null, null, "LECm-243 Fluoride", null, null, null, null, "HECm-243 Fluoride", null, null, null, null, "LECm-245 Fluoride", null, null, null, null, "HECm-245 Fluoride", null, null, null, null, "LECm-247 Fluoride", null, null, null, null, "HECm-247 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "berkelium", null, null, null, null, "LEB-248 Fluoride", null, null, null, null, "HEB-248 Fluoride");
                addMSRFuels(vessel, fission, fuelTimeMult, "californium", null, null, null, null, "LECf-249 Fluoride", null, null, null, null, "HECf-249 Fluoride", null, null, null, null, "LECf-251 Fluoride", null, null, null, null, "HECf-251 Fluoride");
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Turbine">
                ncpf.configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                multiblock.configuration.overhaul.turbine.Block tcontroller = multiblock.configuration.overhaul.turbine.Block.controller("nuclearcraft:turbine_controller", "Turbine Controller", "overhaul/turbine/controller");
                multiblock.configuration.overhaul.turbine.Block tcasing = multiblock.configuration.overhaul.turbine.Block.casing("nuclearcraft:turbine_casing", "Turbine Casing", "overhaul/turbine/casing", true);
                multiblock.configuration.overhaul.turbine.Block ttransparentCasing = multiblock.configuration.overhaul.turbine.Block.casing("nuclearcraft:turbine_glass", "Turbine Glass", "overhaul/turbine/glass", false);
                multiblock.configuration.overhaul.turbine.Block tinlet = multiblock.configuration.overhaul.turbine.Block.inlet("nuclearcraft:turbine_inlet", "Fluid Inlet", "overhaul/turbine/inlet");
                multiblock.configuration.overhaul.turbine.Block toutlet = multiblock.configuration.overhaul.turbine.Block.outlet("nuclearcraft:turbine_outlet", "Fluid Outlet", "overhaul/turbine/outlet");
                ncpf.configuration.overhaul.turbine.blocks.add(tcontroller);ncpf.configuration.overhaul.turbine.allBlocks.add(tcontroller);
                ncpf.configuration.overhaul.turbine.blocks.add(tcasing);ncpf.configuration.overhaul.turbine.allBlocks.add(tcasing);
                ncpf.configuration.overhaul.turbine.blocks.add(ttransparentCasing);ncpf.configuration.overhaul.turbine.allBlocks.add(ttransparentCasing);
                ncpf.configuration.overhaul.turbine.blocks.add(tinlet);ncpf.configuration.overhaul.turbine.allBlocks.add(tinlet);
                ncpf.configuration.overhaul.turbine.blocks.add(toutlet);ncpf.configuration.overhaul.turbine.allBlocks.add(toutlet);
                ncpf.configuration.overhaul.turbine.fluidPerBlade = turbine.getInt("turbine_mb_per_blade");
                ncpf.configuration.overhaul.turbine.minLength = turbine.getInt("turbine_min_size");
                ncpf.configuration.overhaul.turbine.minWidth = Math.max(3, turbine.getInt("turbine_min_size"));
                ncpf.configuration.overhaul.turbine.maxSize = turbine.getInt("turbine_max_size");
                ConfigList effLenParams = turbine.getConfigList("turbine_throughput_leniency_params");
                ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = (float)effLenParams.getDouble(0);
                ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = (float)effLenParams.getDouble(1);
                ncpf.configuration.overhaul.turbine.throughputFactor = (float)turbine.getDouble("turbine_tension_throughput_factor");
                ncpf.configuration.overhaul.turbine.powerBonus = (float)turbine.getDouble("turbine_power_bonus_multiplier");
                ConfigList bladeEffs = turbine.getConfigList("turbine_blade_efficiency");
                ConfigList bladeExps = turbine.getConfigList("turbine_blade_expansion");
                multiblock.configuration.overhaul.turbine.Block steel = multiblock.configuration.overhaul.turbine.Block.blade("nuclearcraft:turbine_rotor_blade_steel", "Steel Rotor Blade", "overhaul/turbine/steel", (float)bladeEffs.getDouble(0), (float)bladeExps.getDouble(0));
                multiblock.configuration.overhaul.turbine.Block extreme = multiblock.configuration.overhaul.turbine.Block.blade("nuclearcraft:turbine_rotor_blade_extreme", "Extreme Alloy Rotor Blade", "overhaul/turbine/extreme", (float)bladeEffs.getDouble(1), (float)bladeExps.getDouble(1));
                multiblock.configuration.overhaul.turbine.Block sic = multiblock.configuration.overhaul.turbine.Block.blade("nuclearcraft:turbine_rotor_blade_sic_sic_cmc", "SiC-SiC CMC Rotor Blade", "overhaul/turbine/sic", (float)bladeEffs.getDouble(2), (float)bladeExps.getDouble(2));
                multiblock.configuration.overhaul.turbine.Block stator = multiblock.configuration.overhaul.turbine.Block.stator("nuclearcraft:turbine_rotor_stator", "Rotor Stator", "overhaul/turbine/stator", (float)turbine.getDouble("turbine_stator_expansion"));
                ncpf.configuration.overhaul.turbine.allBlocks.add(steel);ncpf.configuration.overhaul.turbine.blocks.add(steel);
                ncpf.configuration.overhaul.turbine.allBlocks.add(extreme);ncpf.configuration.overhaul.turbine.blocks.add(extreme);
                ncpf.configuration.overhaul.turbine.allBlocks.add(sic);ncpf.configuration.overhaul.turbine.blocks.add(sic);
                ncpf.configuration.overhaul.turbine.allBlocks.add(stator);ncpf.configuration.overhaul.turbine.blocks.add(stator);
                ConfigList coilEffs = turbine.getConfigList("turbine_coil_conductivity");
                ConfigList coilRules = turbine.getConfigList("turbine_coil_rule");
                multiblock.configuration.overhaul.turbine.Block cmagnesium = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:0", "Magnesium Dynamo Coil", "overhaul/turbine/magnesium", (float)coilEffs.getDouble(0));
                multiblock.configuration.overhaul.turbine.Block cberyllium = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:1", "Beryllium Dynamo Coil", "overhaul/turbine/beryllium", (float)coilEffs.getDouble(1));
                multiblock.configuration.overhaul.turbine.Block caluminum = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:2", "Aluminum Dynamo Coil", "overhaul/turbine/aluminum", (float)coilEffs.getDouble(2));
                multiblock.configuration.overhaul.turbine.Block cgold = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:3", "Gold Dynamo Coil", "overhaul/turbine/gold", (float)coilEffs.getDouble(3));
                multiblock.configuration.overhaul.turbine.Block ccopper = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:4", "Copper Dynamo Coil", "overhaul/turbine/copper", (float)coilEffs.getDouble(4));
                multiblock.configuration.overhaul.turbine.Block csilver = multiblock.configuration.overhaul.turbine.Block.coil("nuclearcraft:turbine_dynamo_coil:5", "Silver Dynamo Coil", "overhaul/turbine/silver", (float)coilEffs.getDouble(5));
                multiblock.configuration.overhaul.turbine.Block connector = multiblock.configuration.overhaul.turbine.Block.connector("nuclearcraft:turbine_coil_connector", "Dynamo Coil Connector", "overhaul/turbine/connector");
                multiblock.configuration.overhaul.turbine.Block bearing = multiblock.configuration.overhaul.turbine.Block.bearing("nuclearcraft:turbine_rotor_bearing", "Rotor Bearing", "overhaul/turbine/bearing");
                multiblock.configuration.overhaul.turbine.Block shaft = multiblock.configuration.overhaul.turbine.Block.shaft("nuclearcraft:turbine_rotor_shaft", "Rotor Shaft", "overhaul/turbine/shaft");
                ncpf.configuration.overhaul.turbine.allBlocks.add(bearing);ncpf.configuration.overhaul.turbine.blocks.add(bearing);
                ncpf.configuration.overhaul.turbine.allBlocks.add(shaft);ncpf.configuration.overhaul.turbine.blocks.add(shaft);
                ncpf.configuration.overhaul.turbine.allBlocks.add(cmagnesium);ncpf.configuration.overhaul.turbine.blocks.add(cmagnesium);
                ncpf.configuration.overhaul.turbine.allBlocks.add(cberyllium);ncpf.configuration.overhaul.turbine.blocks.add(cberyllium);
                ncpf.configuration.overhaul.turbine.allBlocks.add(caluminum);ncpf.configuration.overhaul.turbine.blocks.add(caluminum);
                ncpf.configuration.overhaul.turbine.allBlocks.add(cgold);ncpf.configuration.overhaul.turbine.blocks.add(cgold);
                ncpf.configuration.overhaul.turbine.allBlocks.add(ccopper);ncpf.configuration.overhaul.turbine.blocks.add(ccopper);
                ncpf.configuration.overhaul.turbine.allBlocks.add(csilver);ncpf.configuration.overhaul.turbine.blocks.add(csilver);
                ncpf.configuration.overhaul.turbine.allBlocks.add(connector);ncpf.configuration.overhaul.turbine.blocks.add(connector);
                connector.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, turbine.getConfigList("turbine_connector_rule").getString(0)));
                cmagnesium.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(0)));
                cberyllium.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(1)));
                caluminum.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(2)));
                cgold.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(3)));
                ccopper.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(4)));
                csilver.rules.add(multiblock.configuration.overhaul.turbine.PlacementRule.parseNC(ncpf.configuration.overhaul.turbine, coilRules.getString(5)));
                ConfigList rPows = turbine.getConfigList("turbine_power_per_mb");
                ConfigList rCoeffs = turbine.getConfigList("turbine_expansion_level");
                multiblock.configuration.overhaul.turbine.Recipe hps = multiblock.configuration.overhaul.turbine.Recipe.recipe("high_pressure_steam", "High Pressure Steam", "fluids/hps", "exhaust_steam", "Exhaust Steam", "fluids/exhaust_steam", rPows.getDouble(0), rCoeffs.getDouble(0));
                multiblock.configuration.overhaul.turbine.Recipe lps = multiblock.configuration.overhaul.turbine.Recipe.recipe("low_pressure_steam", "Low Pressure Steam", "fluids/lps", "low_quality_steam", "Low Quality Steam", "fluids/lqs", rPows.getDouble(1), rCoeffs.getDouble(1));
                multiblock.configuration.overhaul.turbine.Recipe ste = multiblock.configuration.overhaul.turbine.Recipe.recipe("steam", "Steam", "fluids/steam", "low_quality_steam", "Low Quality Steam", "fluids/lqs", rPows.getDouble(2), rCoeffs.getDouble(2));
                ncpf.configuration.overhaul.turbine.allRecipes.add(hps);ncpf.configuration.overhaul.turbine.recipes.add(hps);
                ncpf.configuration.overhaul.turbine.allRecipes.add(lps);ncpf.configuration.overhaul.turbine.recipes.add(lps);
                ncpf.configuration.overhaul.turbine.allRecipes.add(ste);ncpf.configuration.overhaul.turbine.recipes.add(ste);
//</editor-fold>
                return ncpf;
            }
            private void addSFRFuels(multiblock.configuration.overhaul.fissionsfr.Block cell, Config config, double timeMult, String baseName, String... fuelNames){
                ConfigList time = config.getConfigList("fission_"+baseName+"_fuel_time");
                ConfigList heat = config.getConfigList("fission_"+baseName+"_heat_generation");
                ConfigList efficiency = config.getConfigList("fission_"+baseName+"_efficiency");
                ConfigList criticality = config.getConfigList("fission_"+baseName+"_criticality");
                ConfigList selfPriming = config.getConfigList("fission_"+baseName+"_self_priming");
                for(int i = 0; i<fuelNames.length; i++){
                    if(fuelNames[i]==null)continue;
                    int fuelIndex = i-i/5;
                    String tex = fuelNames[i].toLowerCase(Locale.ENGLISH).replace(" oxide", "_ox").replace("-", "_").replace(" nitride", "_ni").replace("_zirconium alloy", "_za");
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = multiblock.configuration.overhaul.fissionsfr.BlockRecipe.fuel("nuclearcraft:fuel_"+baseName+":"+fuelIndex, fuelNames[i], "overhaul/fuel/"+tex, "nuclearcraft:depleted_fuel_"+baseName+":"+fuelIndex, "Depleted "+fuelNames[i], "overhaul/fuel/depleted/"+tex, (float)efficiency.getDouble(i), heat.getInt(i), (int)(time.getInt(i)*timeMult), criticality.getInt(i), selfPriming.getBoolean(i));
                    cell.allRecipes.add(fuel);cell.recipes.add(fuel);
                }
            }
            private void addMSRFuels(multiblock.configuration.overhaul.fissionmsr.Block vessel, Config config, double timeMult, String baseName, String... fuelNames){
                ConfigList time = config.getConfigList("fission_"+baseName+"_fuel_time");
                ConfigList heat = config.getConfigList("fission_"+baseName+"_heat_generation");
                ConfigList efficiency = config.getConfigList("fission_"+baseName+"_efficiency");
                ConfigList criticality = config.getConfigList("fission_"+baseName+"_criticality");
                ConfigList selfPriming = config.getConfigList("fission_"+baseName+"_self_priming");
                for(int i = 0; i<fuelNames.length; i++){
                    if(fuelNames[i]==null)continue;
                    String baseNam = fuelNames[i].toLowerCase(Locale.ENGLISH).replace("-", "_").replace(" ", "_").replace("mf4","mix")+"_flibe";
                    if(baseName.equals("mixed"))baseNam = fuelNames[i].toLowerCase(Locale.ENGLISH).replace("-", "_").replace(" ", "_").replace("mf4","mix")+"_fluoride_flibe";
                    String tex = fuelNames[i].toLowerCase(Locale.ENGLISH).replace("-", "_").replace(" fluoride", "").replace("mf4","mix");
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = multiblock.configuration.overhaul.fissionmsr.BlockRecipe.fuel(baseNam, fuelNames[i], "overhaul/fuel/msr/"+tex, "depleted_"+baseNam, "Depleted "+fuelNames[i], "overhaul/fuel/depleted/msr/"+tex, (float)efficiency.getDouble(i), heat.getInt(i), (int)(time.getInt(i)*timeMult), criticality.getInt(i), selfPriming.getBoolean(i));
                    vessel.allRecipes.add(fuel);vessel.recipes.add(fuel);
                }
            }
        });// OVERHAUL nuclearcraft.cfg
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                return major==1&&minor==2&&build>=5&&build<=22;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                JSONObject usedFuel = hellrage.getJSONObject("UsedFuel");
                String fuelName = usedFuel.getString("Name");
                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = null;
                for(multiblock.configuration.underhaul.fissionsfr.Fuel fool : Core.configuration.underhaul.fissionSFR.allFuels){
                    for(String nam : fool.getLegacyNames())if(nam.equalsIgnoreCase(fuelName))fuel = fool;
                }
                if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+fuelName);
                UnderhaulSFR sfr = new UnderhaulSFR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]), fuel);
                JSON.JSONArray compressedReactor = hellrage.getJSONArray("CompressedReactor");
                for(Object o : compressedReactor){
                    JSONObject ob = (JSONObject) o;
                    String name = ob.keySet().iterator().next();
                    multiblock.configuration.underhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.underhaul.fissionsfr.Block blok : Core.configuration.underhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace("cooler", "").replace(" ", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSONArray blocks = ob.getJSONArray(name);
                    for(Object blok : blocks){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage .json 1.2.5-1.2.22
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                return major==1&&minor==2&&build>=23;//&&build<=25;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject dims = hellrage.getJSONObject("InteriorDimensions");
                JSONObject usedFuel = hellrage.getJSONObject("UsedFuel");
                String fuelName = usedFuel.getString("Name");
                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = null;
                for(multiblock.configuration.underhaul.fissionsfr.Fuel fool : Core.configuration.underhaul.fissionSFR.allFuels){
                    for(String nam : fool.getLegacyNames())if(nam.equalsIgnoreCase(fuelName))fuel = fool;
                }
                if(fuel==null){
                    for(multiblock.configuration.underhaul.fissionsfr.Fuel fool : Core.configuration.underhaul.fissionSFR.allFuels){
                        if(fool.heat==usedFuel.getFloat("BaseHeat")
                                &&fool.power==usedFuel.getFloat("BasePower"))fuel = fool;
                    }
                }
                if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+fuelName);
                UnderhaulSFR sfr = new UnderhaulSFR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"), fuel);
                JSON.JSONObject compressedReactor = hellrage.getJSONObject("CompressedReactor");
                for(String name : compressedReactor.keySet()){
                    multiblock.configuration.underhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.underhaul.fissionsfr.Block blok : Core.configuration.underhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace("cooler", "").replace(" ", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSONArray blocks = compressedReactor.getJSONArray(name);
                    for(Object blok : blocks){
                        JSONObject blokLoc = (JSONObject) blok;
                        int x = blokLoc.getInt("X");
                        int y = blokLoc.getInt("Y");
                        int z = blokLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage .json 1.2.23-1.2.25 (present)
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==0&&build>=1&&build<=6;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                OverhaulSFR sfr = new OverhaulSFR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]), Core.configuration.overhaul.fissionSFR.allCoolantRecipes.get(0));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean source = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    float highest = 0;
                    for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                        if(scr.source&&scr.sourceEfficiency>highest){
                            src = scr;
                            highest = src.sourceEfficiency;
                        }
                    }
                    if(src==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(source)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.0.1-2.0.6
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==0&&build>=7&&build<=29;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                OverhaulSFR sfr = new OverhaulSFR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]), Core.configuration.overhaul.fissionSFR.allCoolantRecipes.get(0));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    String blokLoc = (String) blok;
                    String[] blockLoc = blokLoc.split(",");
                    int x = Integer.parseInt(blockLoc[0]);
                    int y = Integer.parseInt(blockLoc[1]);
                    int z = Integer.parseInt(blockLoc[2]);
                    sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean source = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    float highest = 0;
                    for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                        if(scr.source&&scr.sourceEfficiency>highest){
                            src = scr;
                            highest = src.sourceEfficiency;
                        }
                    }
                    if(src==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(source)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.0.7-2.0.29
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==0&&build==30;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                String coolantRecipeName = hellrage.getString("CoolantRecipeName").replace("Hight", "High");
                CoolantRecipe coolantRecipe = null;
                for(CoolantRecipe recipe : Core.configuration.overhaul.fissionSFR.allCoolantRecipes){
                    for(String nam : recipe.getLegacyNames())if(nam.equalsIgnoreCase(coolantRecipeName))coolantRecipe = recipe;
                }
                if(coolantRecipe==null)throw new IllegalArgumentException("Unknown coolant recipe: "+coolantRecipeName);
                OverhaulSFR sfr = new OverhaulSFR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]), coolantRecipe);
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    String blokLoc = (String) blok;
                    String[] blockLoc = blokLoc.split(",");
                    int x = Integer.parseInt(blockLoc[0]);
                    int y = Integer.parseInt(blockLoc[1]);
                    int z = Integer.parseInt(blockLoc[2]);
                    sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.0.30
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==0&&build==31;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject dims = hellrage.getJSONObject("InteriorDimensions");
                String coolantRecipeName = hellrage.getString("CoolantRecipeName").replace("Hight", "High");
                CoolantRecipe coolantRecipe = null;
                for(CoolantRecipe recipe : Core.configuration.overhaul.fissionSFR.allCoolantRecipes){
                    for(String nam : recipe.getLegacyNames())if(nam.equalsIgnoreCase(coolantRecipeName))coolantRecipe = recipe;
                }
                if(coolantRecipe==null)throw new IllegalArgumentException("Unknown coolant recipe: "+coolantRecipeName);
                OverhaulSFR sfr = new OverhaulSFR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"), coolantRecipe);
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    JSONObject blockLoc = (JSONObject) blok;
                    int x = blockLoc.getInt("X");
                    int y = blockLoc.getInt("Y");
                    int z = blockLoc.getInt("Z");
                    sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.0.31
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==0&&build>=32&&build<=37;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject dims = hellrage.getJSONObject("InteriorDimensions");
                String coolantRecipeName = hellrage.getString("CoolantRecipeName");
                CoolantRecipe coolantRecipe = null;
                for(CoolantRecipe recipe : Core.configuration.overhaul.fissionSFR.allCoolantRecipes){
                    for(String nam : recipe.getLegacyNames())if(nam.equalsIgnoreCase(coolantRecipeName))coolantRecipe = recipe;
                }
                if(coolantRecipe==null)throw new IllegalArgumentException("Unknown coolant recipe: "+coolantRecipeName);
                OverhaulSFR sfr = new OverhaulSFR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"), coolantRecipe);
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                JSON.JSONObject reflectors = hellrage.getJSONObject("Reflectors");
                for(String name : reflectors.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("reflector", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = reflectors.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.0.32-2.0.37
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSONObject data = hellrage.getJSONObject("Data");
                JSON.JSONObject fuelCells = data.getJSONObject("FuelCells");
                for(String name : fuelCells.keySet()){
                    if(name.startsWith("[F4]"))return false;//that's an MSR!
                }
                return major==2&&minor==1&&build>=1;//&&build<=7;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject data = hellrage.getJSONObject("Data");
                JSONObject dims = data.getJSONObject("InteriorDimensions");
                String coolantRecipeName = data.getString("CoolantRecipeName");
                CoolantRecipe coolantRecipe = null;
                for(CoolantRecipe recipe : Core.configuration.overhaul.fissionSFR.allCoolantRecipes){
                    for(String nam : recipe.getLegacyNames())if(nam.equalsIgnoreCase(coolantRecipeName))coolantRecipe = recipe;
                }
                if(coolantRecipe==null)throw new IllegalArgumentException("Unknown coolant recipe: "+coolantRecipeName);
                OverhaulSFR sfr = new OverhaulSFR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"), coolantRecipe);
                JSON.JSONObject heatSinks = data.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("heatsink", "").replace("liquid", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = data.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = data.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                JSON.JSONObject reflectors = data.getJSONObject("Reflectors");
                for(String name : reflectors.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("reflector", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = reflectors.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject neutronShields = data.getJSONObject("NeutronShields");
                for(String name : neutronShields.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("neutronshield", "").replace("shield", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = neutronShields.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block irradiator = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.irradiator)irradiator = blok;
                }
                if(irradiator==null)throw new IllegalArgumentException("Unknown block: Irradiator");
                JSON.JSONObject irradiators = data.getJSONObject("Irradiators");
                for(String name : irradiators.keySet()){
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = null;
                    try{
                        JSON.JSONObject recipe = JSON.parse(name);
                        for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe irr : irradiator.allRecipes){
                            if(irr.irradiatorHeat==recipe.getFloat("HeatPerFlux")&&irr.irradiatorEfficiency==recipe.getFloat("EfficiencyMultiplier"))irrecipe = irr;
                        }
                    }catch(IOException ex){
                        throw new IllegalArgumentException("Invalid irradiator recipe: "+name);
                    }
                    JSON.JSONArray array = irradiators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, irradiator));
                        sfr.getBlock(x, y, z).recipe = irrecipe;
                    }
                }
                multiblock.configuration.overhaul.fissionsfr.Block cell = null;
                for(multiblock.configuration.overhaul.fissionsfr.Block blok : Core.configuration.overhaul.fissionSFR.allBlocks){
                    if(blok.fuelCell)cell = blok;
                }
                if(cell==null)throw new IllegalArgumentException("Unknown block: Fuel Cell");
                JSON.JSONObject fuelCells = data.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionsfr.Block, multiblock.configuration.overhaul.fissionsfr.Block> sources = new HashMap<>();
                for(String name : fuelCells.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[OX]"))fuelName = fuelName.substring(4)+" Oxide";
                    if(fuelName.startsWith("[NI]"))fuelName = fuelName.substring(4)+" Nitride";
                    if(fuelName.startsWith("[ZA]"))fuelName = fuelName.substring(4)+"-Zirconium Alloy";
                    for(multiblock.configuration.overhaul.fissionsfr.BlockRecipe feul : cell.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionsfr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        if(sourceName.equals("Self"))hasSource = false;
                        else{
                            for(multiblock.configuration.overhaul.fissionsfr.Block scr : Core.configuration.overhaul.fissionSFR.allBlocks){
                                if(!scr.source)continue;
                                for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                            }
                            if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                        }
                    }
                    JSON.JSONArray array = fuelCells.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        sfr.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(Core.configuration, x, y, z, cell));
                        sfr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(sfr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionsfr.Block key : sources.keySet()){
                    key.addNeutronSource(sfr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                sfr.buildDefaultCasingOnConvert();
                file.multiblocks.add(sfr);
                return file;
            }
        });// hellrage SFR .json 2.1.1-2.1.7 (present)
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==0&&build>=1&&build<=6;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                OverhaulMSR msr = new OverhaulMSR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean source = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    float highest = 0;
                    for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                        if(scr.source&&scr.sourceEfficiency>highest){
                            src = scr;
                            highest = src.sourceEfficiency;
                        }
                    }
                    if(src==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(source)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.0.1-2.0.6
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==0&&build>=7&&build<=29;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                OverhaulMSR msr = new OverhaulMSR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    String blokLoc = (String) blok;
                    String[] blockLoc = blokLoc.split(",");
                    int x = Integer.parseInt(blockLoc[0]);
                    int y = Integer.parseInt(blockLoc[1]);
                    int z = Integer.parseInt(blockLoc[2]);
                    msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean source = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    float highest = 0;
                    for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                        if(scr.source&&scr.sourceEfficiency>highest){
                            src = scr;
                            highest = src.sourceEfficiency;
                        }
                    }
                    if(src==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(source)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.0.7-2.0.29
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==0&&build==30;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                String dimS = hellrage.getString("InteriorDimensions");
                String[] dims = dimS.split(",");
                OverhaulMSR msr = new OverhaulMSR(null, Integer.parseInt(dims[0]), Integer.parseInt(dims[1]), Integer.parseInt(dims[2]));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    String blokLoc = (String) blok;
                    String[] blockLoc = blokLoc.split(",");
                    int x = Integer.parseInt(blockLoc[0]);
                    int y = Integer.parseInt(blockLoc[1]);
                    int z = Integer.parseInt(blockLoc[2]);
                    msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        String blokLoc = (String) blok;
                        String[] blockLoc = blokLoc.split(",");
                        int x = Integer.parseInt(blockLoc[0]);
                        int y = Integer.parseInt(blockLoc[1]);
                        int z = Integer.parseInt(blockLoc[2]);
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.0.30
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==0&&build==31;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject dims = hellrage.getJSONObject("InteriorDimensions");
                OverhaulMSR msr = new OverhaulMSR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block reflector = null;
                float best = 0;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.reflector&&blok.reflectorReflectivity>best){
                        reflector = blok;
                        best = blok.reflectorReflectivity;
                    }
                }
                if(reflector==null)throw new IllegalArgumentException("Unknown block: Reflector");
                JSON.JSONArray reflectors = hellrage.getJSONArray("Reflectors");
                for(Object blok : reflectors){
                    JSONObject blockLoc = (JSONObject) blok;
                    int x = blockLoc.getInt("X");
                    int y = blockLoc.getInt("Y");
                    int z = blockLoc.getInt("Z");
                    msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, reflector));
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.0.31
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==0&&build>=32&&build<=37;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject dims = hellrage.getJSONObject("InteriorDimensions");
                OverhaulMSR msr = new OverhaulMSR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"));
                JSON.JSONObject heatSinks = hellrage.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = hellrage.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = hellrage.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                JSON.JSONObject reflectors = hellrage.getJSONObject("Reflectors");
                for(String name : reflectors.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("reflector", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = reflectors.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = hellrage.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                            if(!scr.source)continue;
                            for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                        }
                        if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                    }
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.0.32-2.0.37
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject saveVersion = hellrage.getJSONObject("SaveVersion");
                int major = saveVersion.getInt("Major");
                int minor = saveVersion.getInt("Minor");
                int build = saveVersion.getInt("Build");
                JSONObject data = hellrage.getJSONObject("Data");
                JSON.JSONObject fuelVessels = data.getJSONObject("FuelCells");
                for(String name : fuelVessels.keySet()){
                    if(!name.startsWith("[F4]"))return false;//that's not an MSR!
                }
                return major==2&&minor==1&&build>=1;//&&build<=7;
            }
            @Override
            public synchronized NCPFFile read(InputStream in){
                JSONObject hellrage = JSON.parse(in);
                JSONObject data = hellrage.getJSONObject("Data");
                JSONObject dims = data.getJSONObject("InteriorDimensions");
                OverhaulMSR msr = new OverhaulMSR(null, dims.getInt("X"), dims.getInt("Y"), dims.getInt("Z"));
                JSON.JSONObject heatSinks = data.getJSONObject("HeatSinks");
                for(String name : heatSinks.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("coolant", "").replace("heater", "").replace("liquid", "").equalsIgnoreCase(name.toLowerCase(Locale.ENGLISH).replace("water", "standard").replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = heatSinks.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject moderators = data.getJSONObject("Moderators");
                for(String name : moderators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("moderator", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = moderators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block conductor = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    for(String nam : blok.getLegacyNames())if(nam.equalsIgnoreCase("conductor"))conductor = blok;
                }
                if(conductor==null)throw new IllegalArgumentException("Unknown block: Conductor");
                JSON.JSONArray conductors = data.getJSONArray("Conductors");
                if(conductors!=null){
                    for(Object blok : conductors){
                            JSONObject blockLoc = (JSONObject) blok;
                            int x = blockLoc.getInt("X");
                            int y = blockLoc.getInt("Y");
                            int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, conductor));
                    }
                }
                JSON.JSONObject reflectors = data.getJSONObject("Reflectors");
                for(String name : reflectors.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("reflector", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = reflectors.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                JSON.JSONObject neutronShields = data.getJSONObject("NeutronShields");
                for(String name : neutronShields.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.Block block = null;
                    for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                        for(String nam : blok.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").replace("neutronshield", "").replace("shield", "").equalsIgnoreCase(name.replace(" ", "")))block = blok;
                    }
                    if(block==null)throw new IllegalArgumentException("Unknown block: "+name);
                    JSON.JSONArray array = neutronShields.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, block));
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block irradiator = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.irradiator)irradiator = blok;
                }
                if(irradiator==null)throw new IllegalArgumentException("Unknown block: Irradiator");
                JSON.JSONObject irradiators = data.getJSONObject("Irradiators");
                for(String name : irradiators.keySet()){
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = null;
                    try{
                        JSON.JSONObject recipe = JSON.parse(name);
                        for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe irr : irradiator.allRecipes){
                            if(irr.irradiatorHeat==recipe.getFloat("HeatPerFlux")&&irr.irradiatorEfficiency==recipe.getFloat("EfficiencyMultiplier"))irrecipe = irr;
                        }
                    }catch(IOException ex){
                        throw new IllegalArgumentException("Invalid irradiator recipe: "+name);
                    }
                    JSON.JSONArray array = irradiators.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, irradiator));
                        msr.getBlock(x, y, z).recipe = irrecipe;
                    }
                }
                multiblock.configuration.overhaul.fissionmsr.Block vessel = null;
                for(multiblock.configuration.overhaul.fissionmsr.Block blok : Core.configuration.overhaul.fissionMSR.allBlocks){
                    if(blok.fuelVessel)vessel = blok;
                }
                if(vessel==null)throw new IllegalArgumentException("Unknown block: Fuel Vessel");
                JSON.JSONObject fuelVessels = data.getJSONObject("FuelCells");
                HashMap<multiblock.overhaul.fissionmsr.Block, multiblock.configuration.overhaul.fissionmsr.Block> sources = new HashMap<>();
                for(String name : fuelVessels.keySet()){
                    String[] fuelSettings = name.split(";");
                    String fuelName = fuelSettings[0];
                    boolean hasSource = Boolean.parseBoolean(fuelSettings[1]);
                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = null;
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.substring(4).replace(" ", "")))fuel = feul;
                    }
                    if(fuelName.startsWith("[F4]"))fuelName = fuelName.substring(4)+" Fluoride";
                    for(multiblock.configuration.overhaul.fissionmsr.BlockRecipe feul : vessel.allRecipes){
                        for(String nam : feul.getLegacyNames())if(nam.toLowerCase(Locale.ENGLISH).replace(" ", "").equalsIgnoreCase(fuelName.replace(" ", "")))fuel = feul;
                    }
                    if(fuel==null)throw new IllegalArgumentException("Unknown fuel: "+name);
                    multiblock.configuration.overhaul.fissionmsr.Block src = null;
                    if(hasSource){
                        String sourceName = fuelSettings[2];
                        if(sourceName.equals("Self"))hasSource = false;
                        else{
                            for(multiblock.configuration.overhaul.fissionmsr.Block scr : Core.configuration.overhaul.fissionMSR.allBlocks){
                                if(!scr.source)continue;
                                for(String nam : scr.getLegacyNames())if(nam.equalsIgnoreCase(sourceName))src = scr;
                            }
                            if(src==null)throw new IllegalArgumentException("Unknown source: "+name);
                        }
                    }
                    JSON.JSONArray array = fuelVessels.getJSONArray(name);
                    for(Object blok : array){
                        JSONObject blockLoc = (JSONObject) blok;
                        int x = blockLoc.getInt("X");
                        int y = blockLoc.getInt("Y");
                        int z = blockLoc.getInt("Z");
                        msr.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(Core.configuration, x, y, z, vessel));
                        msr.getBlock(x, y, z).recipe = fuel;
                        if(hasSource)sources.put(msr.getBlock(x, y, z), src);
                    }
                }
                for(multiblock.overhaul.fissionmsr.Block key : sources.keySet()){
                    key.addNeutronSource(msr, sources.get(key));
                }
                NCPFFile file = new NCPFFile();
                msr.buildDefaultCasingOnConvert();
                file.multiblocks.add(msr);
                return file;
            }
        });// hellrage MSR .json 2.1.1-2.1.7 (present)
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)1;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulPostLoadMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    boolean partial = config.get("partial");
                    if(partial)ncpf.configuration = new PartialConfiguration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("underhaul")?config.get("version"):null);
                    else ncpf.configuration = new Configuration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("underhaul")?config.get("version"):null);
                    ncpf.configuration.addon = false;
                    //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                    if(config.hasProperty("underhaul")){
                        ncpf.configuration.underhaul = new UnderhaulConfiguration();
                        Config underhaul = config.get("underhaul");
                        if(underhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = underhaul.get("fissionSFR");
                            ncpf.configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            ncpf.configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                            ConfigList blocks = fissionSFR.get("blocks");
                            underhaulPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                                block.active = blockCfg.get("active");
                                block.cooling = blockCfg.get("cooling", 0);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                block.moderator = blockCfg.get("moderator", false);
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readUnderRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.underhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                                byte index = underhaulPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                                ncpf.configuration.underhaul.fissionSFR.allFuels.add(fuel);ncpf.configuration.underhaul.fissionSFR.fuels.add(fuel);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                    if(config.hasProperty("overhaul")){
                        ncpf.configuration.overhaul = new OverhaulConfiguration();
                        Config overhaul = config.get("overhaul");
                        if(overhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = overhaul.get("fissionSFR");
                            ncpf.configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionSFR.get("blocks");
                            overhaulPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heatsink = true;
                                    block.heatsinkHasBaseStats = true;
                                    block.heatsinkCooling = cooling;
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.overhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulPostLoadMap.keySet()){
                                byte index = overhaulPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelCellHeat = fuelCfg.get("heat");
                                fuel.fuelCellTime = fuelCfg.get("time");
                                fuel.fuelCellCriticality = fuelCfg.get("criticality");
                                fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.fuelCell){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionSFR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(source);ncpf.configuration.overhaul.fissionSFR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                            for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                                Config coolantRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                                }
                            }
                        }
                    }
//</editor-fold>
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
                                break;
                            case 1:
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        multiblock.configuration.underhaul.fissionsfr.PlacementRule vert = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                        vert.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        vert.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        rule.rules.add(vert);
                        multiblock.configuration.underhaul.fissionsfr.PlacementRule exact = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                        exact.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        exact.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        exact.min = exact.max = 3;
                        rule.rules.add(exact);
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        multiblock.configuration.overhaul.fissionsfr.PlacementRule vert = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                        vert.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        vert.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        rule.rules.add(vert);
                        multiblock.configuration.overhaul.fissionsfr.PlacementRule exact = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                        exact.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        exact.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        exact.min = exact.max = 3;
                        rule.rules.add(exact);
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverRule(rulC));
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 1
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)2;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    boolean partial = config.get("partial");
                    if(partial)ncpf.configuration = new PartialConfiguration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("underhaul")?config.get("version"):null);
                    else ncpf.configuration = new Configuration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("underhaul")?config.get("version"):null);
                    ncpf.configuration.addon = false;
                    //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                    if(config.hasProperty("underhaul")){
                        ncpf.configuration.underhaul = new UnderhaulConfiguration();
                        Config underhaul = config.get("underhaul");
                        if(underhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = underhaul.get("fissionSFR");
                            ncpf.configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            ncpf.configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                            ConfigList blocks = fissionSFR.get("blocks");
                            underhaulPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                                block.active = blockCfg.get("active");
                                block.cooling = blockCfg.get("cooling", 0);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                block.moderator = blockCfg.get("moderator", false);
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readUnderRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.underhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                                byte index = underhaulPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                                ncpf.configuration.underhaul.fissionSFR.allFuels.add(fuel);ncpf.configuration.underhaul.fissionSFR.fuels.add(fuel);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                    if(config.hasProperty("overhaul")){
                        ncpf.configuration.overhaul = new OverhaulConfiguration();
                        Config overhaul = config.get("overhaul");
                        //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                        if(overhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = overhaul.get("fissionSFR");
                            ncpf.configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionSFR.get("blocks");
                            overhaulSFRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heatsink = true;
                                    block.heatsinkHasBaseStats = true;
                                    block.heatsinkCooling = cooling;
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverSFRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.overhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                                byte index = overhaulSFRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelCellHeat = fuelCfg.get("heat");
                                fuel.fuelCellTime = fuelCfg.get("time");
                                fuel.fuelCellCriticality = fuelCfg.get("criticality");
                                fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.fuelCell){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionSFR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(source);ncpf.configuration.overhaul.fissionSFR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                            for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                                Config coolantRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                        //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                        if(overhaul.hasProperty("fissionMSR")){
                            ncpf.configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                            Config fissionMSR = overhaul.get("fissionMSR");
                            ncpf.configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            ncpf.configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            ncpf.configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionMSR.get("blocks");
                            overhaulMSRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heater = true;
                                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                    recipe.heaterCooling = cooling;
                                    recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                    recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                    block.allRecipes.add(recipe);block.recipes.add(recipe);
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelVessel = blockCfg.get("fuelVessel", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverMSRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(block);ncpf.configuration.overhaul.fissionMSR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                                byte index = overhaulMSRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionMSR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelVesselHeat = fuelCfg.get("heat");
                                fuel.fuelVesselTime = fuelCfg.get("time");
                                fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                                fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.fuelVessel){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionMSR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(source);ncpf.configuration.overhaul.fissionMSR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                    }
//</editor-fold>
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
                                break;
                            case 1:
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
                                break;
                            case 2:
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        multiblock.configuration.underhaul.fissionsfr.PlacementRule vert = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                        vert.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        vert.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        rule.rules.add(vert);
                        multiblock.configuration.underhaul.fissionsfr.PlacementRule exact = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                        exact.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        exact.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        exact.min = exact.max = 3;
                        rule.rules.add(exact);
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        multiblock.configuration.overhaul.fissionsfr.PlacementRule vert = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                        vert.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        vert.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        rule.rules.add(vert);
                        multiblock.configuration.overhaul.fissionsfr.PlacementRule exact = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                        exact.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        exact.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                        exact.min = exact.max = 3;
                        rule.rules.add(exact);
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        multiblock.configuration.overhaul.fissionmsr.PlacementRule vert = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                        vert.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        vert.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                        rule.rules.add(vert);
                        multiblock.configuration.overhaul.fissionmsr.PlacementRule exact = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                        exact.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        exact.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                        exact.min = exact.max = 3;
                        rule.rules.add(exact);
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 2
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)3;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    boolean partial = config.get("partial");
                    if(partial)ncpf.configuration = new PartialConfiguration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("overhaul")?config.get("underhaulVersion"):config.get("version"));
                    else ncpf.configuration = new Configuration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("overhaul")?config.get("underhaulVersion"):config.get("version"));
                    ncpf.configuration.addon = false;
                    //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                    if(config.hasProperty("underhaul")){
                        ncpf.configuration.underhaul = new UnderhaulConfiguration();
                        Config underhaul = config.get("underhaul");
                        if(underhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = underhaul.get("fissionSFR");
                            ncpf.configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            ncpf.configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                            ConfigList blocks = fissionSFR.get("blocks");
                            underhaulPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                                block.active = blockCfg.get("active");
                                block.cooling = blockCfg.get("cooling", 0);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                block.moderator = blockCfg.get("moderator", false);
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readUnderRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.underhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                                byte index = underhaulPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                                ncpf.configuration.underhaul.fissionSFR.allFuels.add(fuel);ncpf.configuration.underhaul.fissionSFR.fuels.add(fuel);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                    if(config.hasProperty("overhaul")){
                        ncpf.configuration.overhaul = new OverhaulConfiguration();
                        Config overhaul = config.get("overhaul");
                        //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                        if(overhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = overhaul.get("fissionSFR");
                            ncpf.configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionSFR.get("blocks");
                            overhaulSFRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heatsink = true;
                                    block.heatsinkHasBaseStats = true;
                                    block.heatsinkCooling = cooling;
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverSFRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.overhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                                byte index = overhaulSFRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelCellHeat = fuelCfg.get("heat");
                                fuel.fuelCellTime = fuelCfg.get("time");
                                fuel.fuelCellCriticality = fuelCfg.get("criticality");
                                fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.fuelCell){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionSFR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(source);ncpf.configuration.overhaul.fissionSFR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                            for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                                Config coolantRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                        //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                        if(overhaul.hasProperty("fissionMSR")){
                            ncpf.configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                            Config fissionMSR = overhaul.get("fissionMSR");
                            ncpf.configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            ncpf.configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            ncpf.configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionMSR.get("blocks");
                            overhaulMSRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heater = true;
                                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                    recipe.heaterCooling = cooling;
                                    recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                    recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                    block.allRecipes.add(recipe);block.recipes.add(recipe);
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelVessel = blockCfg.get("fuelVessel", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverMSRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(block);ncpf.configuration.overhaul.fissionMSR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                                byte index = overhaulMSRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionMSR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelVesselHeat = fuelCfg.get("heat");
                                fuel.fuelVesselTime = fuelCfg.get("time");
                                fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                                fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.fuelVessel){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionMSR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(source);ncpf.configuration.overhaul.fissionMSR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                        //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                        if(overhaul.hasProperty("turbine")){
                            ncpf.configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                            Config turbine = overhaul.get("turbine");
                            ncpf.configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            ncpf.configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            ncpf.configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            ncpf.configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = .5f;
                            ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = .75f;
                            ncpf.configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            ncpf.configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                            ConfigList coils = turbine.get("coils");
                            overhaulTurbinePostLoadMap.clear();
                            for(Iterator bit = coils.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                                coil.bearing = blockCfg.get("bearing", false);
                                coil.connector = blockCfg.get("connector", false);
                                float eff = blockCfg.get("efficiency");
                                if(eff>0){
                                    coil.coil = true;
                                    coil.coilEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        coil.rules.add(readOverTurbineRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.turbine.allBlocks.add(coil);ncpf.configuration.overhaul.turbine.blocks.add(coil);
                            }
                            ConfigList blades = turbine.get("blades");
                            for(Iterator bit = blades.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                                blade.blade = true;
                                blade.bladeExpansion = blockCfg.get("expansion");
                                blade.bladeEfficiency = blockCfg.get("efficiency");
                                blade.bladeStator = blade.bladeExpansion<1;
                                if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                ncpf.configuration.overhaul.turbine.allBlocks.add(blade);ncpf.configuration.overhaul.turbine.blocks.add(blade);
                            }
                            ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                            ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                            for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                if(b.blade)allBlades.add(b);
                                else allCoils.add(b);
                            }
                            for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                                byte index = overhaulTurbinePostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                }else{
                                    rule.block = allCoils.get(index-1);
                                }
                            }
                            ConfigList recipes = turbine.get("recipes");
                            for(Iterator irit = recipes.iterator(); irit.hasNext();){
                                Config recipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                                ncpf.configuration.overhaul.turbine.allRecipes.add(recipe);ncpf.configuration.overhaul.turbine.recipes.add(recipe);
                            }
                        }
//</editor-fold>
                    }
//</editor-fold>
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 3
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)4;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    boolean partial = config.get("partial");
                    if(partial)ncpf.configuration = new PartialConfiguration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("overhaul")?config.get("underhaulVersion"):config.get("version"));
                    else ncpf.configuration = new Configuration(config.get("name"), config.hasProperty("overhaul")?config.get("version"):null, config.hasProperty("overhaul")?config.get("underhaulVersion"):config.get("version"));
                    ncpf.configuration.addon = false;
                    //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                    if(config.hasProperty("underhaul")){
                        ncpf.configuration.underhaul = new UnderhaulConfiguration();
                        Config underhaul = config.get("underhaul");
                        if(underhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = underhaul.get("fissionSFR");
                            ncpf.configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            ncpf.configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            ncpf.configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                            ConfigList blocks = fissionSFR.get("blocks");
                            underhaulPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                                block.active = blockCfg.get("active");
                                block.cooling = blockCfg.get("cooling", 0);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                block.moderator = blockCfg.get("moderator", false);
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readUnderRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.underhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.underhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                                byte index = underhaulPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                                ncpf.configuration.underhaul.fissionSFR.allFuels.add(fuel);ncpf.configuration.underhaul.fissionSFR.fuels.add(fuel);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                    if(config.hasProperty("overhaul")){
                        ncpf.configuration.overhaul = new OverhaulConfiguration();
                        Config overhaul = config.get("overhaul");
                        //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                        if(overhaul.hasProperty("fissionSFR")){
                            ncpf.configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                            Config fissionSFR = overhaul.get("fissionSFR");
                            ncpf.configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            ncpf.configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            ncpf.configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionSFR.get("blocks");
                            overhaulSFRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heatsink = true;
                                    block.heatsinkHasBaseStats = true;
                                    block.heatsinkCooling = cooling;
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelCell = blockCfg.get("fuelCell", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverSFRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(block);ncpf.configuration.overhaul.fissionSFR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                                byte index = overhaulSFRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionSFR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelCellHeat = fuelCfg.get("heat");
                                fuel.fuelCellTime = fuelCfg.get("time");
                                fuel.fuelCellCriticality = fuelCfg.get("criticality");
                                fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.fuelCell){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionSFR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionSFR.allBlocks.add(source);ncpf.configuration.overhaul.fissionSFR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                            for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                                Config coolantRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                                ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);ncpf.configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                        //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                        if(overhaul.hasProperty("fissionMSR")){
                            ncpf.configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                            Config fissionMSR = overhaul.get("fissionMSR");
                            ncpf.configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            ncpf.configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            ncpf.configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            ncpf.configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            ncpf.configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                            ConfigList blocks = fissionMSR.get("blocks");
                            overhaulMSRPostLoadMap.clear();
                            for(Iterator bit = blocks.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                                int cooling = blockCfg.get("cooling", 0);
                                if(cooling!=0){
                                    block.heater = true;
                                    multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                    recipe.heaterCooling = cooling;
                                    recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                    recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                    block.allRecipes.add(recipe);block.recipes.add(recipe);
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.fuelVessel = blockCfg.get("fuelVessel", false);
                                if(blockCfg.get("reflector", false)){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = true;
                                    block.reflectorEfficiency = blockCfg.get("efficiency");
                                    block.reflectorReflectivity = blockCfg.get("reflectivity");
                                }
                                block.irradiator = blockCfg.get("irradiator", false);
                                if(blockCfg.get("moderator", false)){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = true;
                                    block.moderatorActive = blockCfg.get("activeModerator", false);
                                    block.moderatorFlux = blockCfg.get("flux");
                                    block.moderatorEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.get("shield", false)){
                                    block.shield = true;
                                    block.shieldHasBaseStats = true;
                                    block.shieldHeat = blockCfg.get("heatMult");
                                    block.shieldEfficiency = blockCfg.get("efficiency");
                                }
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.functional = blockCfg.get("functional");
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverMSRRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(block);ncpf.configuration.overhaul.fissionMSR.blocks.add(block);
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                                byte index = overhaulMSRPostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                }else{
                                    rule.block = ncpf.configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                                }
                            }
                            ConfigList fuels = fissionMSR.get("fuels");
                            for(Iterator fit = fuels.iterator(); fit.hasNext();){
                                Config fuelCfg = (Config)fit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                                fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                                fuel.fuelVesselHeat = fuelCfg.get("heat");
                                fuel.fuelVesselTime = fuelCfg.get("time");
                                fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                                fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.fuelVessel){
                                        b.allRecipes.add(fuel);b.recipes.add(fuel);
                                    }
                                }
                            }
                            ConfigList sources = fissionMSR.get("sources");
                            for(Iterator sit = sources.iterator(); sit.hasNext();){
                                Config sourceCfg = (Config)sit.next();
                                multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                                source.source = true;
                                source.sourceEfficiency = sourceCfg.get("efficiency");
                                ncpf.configuration.overhaul.fissionMSR.allBlocks.add(source);ncpf.configuration.overhaul.fissionMSR.blocks.add(source);
                            }
                            ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                            for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                                Config irradiatorRecipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                                irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                                irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                                for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(b.irradiator){
                                        b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                    }
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                if(!b.allRecipes.isEmpty()){
                                    b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                                }
                            }
                        }
//</editor-fold>
                        //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                        if(overhaul.hasProperty("turbine")){
                            ncpf.configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                            Config turbine = overhaul.get("turbine");
                            ncpf.configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            ncpf.configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            ncpf.configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            ncpf.configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = .5f;
                            ncpf.configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = .75f;
                            ncpf.configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            ncpf.configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                            ConfigList coils = turbine.get("coils");
                            overhaulTurbinePostLoadMap.clear();
                            for(Iterator bit = coils.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                                coil.bearing = blockCfg.get("bearing", false);
                                coil.connector = blockCfg.get("connector", false);
                                float eff = blockCfg.get("efficiency");
                                if(eff>0){
                                    coil.coil = true;
                                    coil.coilEfficiency = blockCfg.get("efficiency");
                                }
                                if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        coil.rules.add(readOverTurbineRule(ruleCfg));
                                    }
                                }
                                ncpf.configuration.overhaul.turbine.allBlocks.add(coil);ncpf.configuration.overhaul.turbine.blocks.add(coil);
                            }
                            ConfigList blades = turbine.get("blades");
                            for(Iterator bit = blades.iterator(); bit.hasNext();){
                                Config blockCfg = (Config)bit.next();
                                multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                                blade.blade = true;
                                blade.bladeExpansion = blockCfg.get("expansion");
                                blade.bladeEfficiency = blockCfg.get("efficiency");
                                blade.bladeStator = blade.bladeExpansion<1;
                                blade.bladeStator = blockCfg.get("stator");
                                if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                ncpf.configuration.overhaul.turbine.allBlocks.add(blade);ncpf.configuration.overhaul.turbine.blocks.add(blade);
                            }
                            ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                            ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                            for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                if(b.blade)allBlades.add(b);
                                else allCoils.add(b);
                            }
                            for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                                byte index = overhaulTurbinePostLoadMap.get(rule);
                                if(index==0){
                                    if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                    if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                    rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                }else{
                                    rule.block = allCoils.get(index-1);
                                }
                            }
                            ConfigList recipes = turbine.get("recipes");
                            for(Iterator irit = recipes.iterator(); irit.hasNext();){
                                Config recipeCfg = (Config)irit.next();
                                multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                                ncpf.configuration.overhaul.turbine.allRecipes.add(recipe);ncpf.configuration.overhaul.turbine.recipes.add(recipe);
                            }
                        }
//</editor-fold>
                    }
//</editor-fold>
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 4
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)5;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionsfr.Block cell = new multiblock.configuration.overhaul.fissionsfr.Block("Fuel Cell");
                            cell.fuelCell = true;
                            configuration.overhaul.fissionSFR.allBlocks.add(cell);
                            cell.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionsfr.Block irradiator = new multiblock.configuration.overhaul.fissionsfr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            configuration.overhaul.fissionSFR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionmsr.Block vessel = new multiblock.configuration.overhaul.fissionmsr.Block("Fuel Vessel");
                            vessel.fuelVessel = true;
                            configuration.overhaul.fissionMSR.allBlocks.add(vessel);
                            vessel.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionmsr.Block irradiator = new multiblock.configuration.overhaul.fissionmsr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            configuration.overhaul.fissionMSR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = .5f;
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = .75f;
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            configuration.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : configuration.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionsfr.Block bl = new multiblock.configuration.overhaul.fissionsfr.Block(b.name);
                                bl.fuelCell = b.fuelCell;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionSFR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getInt("outputRatio"));
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionmsr.Block bl = new multiblock.configuration.overhaul.fissionmsr.Block(b.name);
                                bl.fuelVessel = b.fuelVessel;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionMSR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            parent.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : parent.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 5
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)6;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionsfr.Block cell = new multiblock.configuration.overhaul.fissionsfr.Block("Fuel Cell");
                            cell.fuelCell = true;
                            configuration.overhaul.fissionSFR.allBlocks.add(cell);
                            cell.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionsfr.Block irradiator = new multiblock.configuration.overhaul.fissionsfr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            configuration.overhaul.fissionSFR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionmsr.Block vessel = new multiblock.configuration.overhaul.fissionmsr.Block("Fuel Vessel");
                            vessel.fuelVessel = true;
                            configuration.overhaul.fissionMSR.allBlocks.add(vessel);
                            vessel.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionmsr.Block irradiator = new multiblock.configuration.overhaul.fissionmsr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            configuration.overhaul.fissionMSR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = .5f;
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = .75f;
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            configuration.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : configuration.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionsfr.Block bl = new multiblock.configuration.overhaul.fissionsfr.Block(b.name);
                                bl.fuelCell = b.fuelCell;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionSFR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionmsr.Block bl = new multiblock.configuration.overhaul.fissionmsr.Block(b.name);
                                bl.fuelVessel = b.fuelVessel;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionMSR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            parent.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : parent.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 6
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)7;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionsfr.Block cell = new multiblock.configuration.overhaul.fissionsfr.Block("Fuel Cell");
                            cell.fuelCell = true;
                            configuration.overhaul.fissionSFR.allBlocks.add(cell);
                            cell.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionsfr.Block irradiator = new multiblock.configuration.overhaul.fissionsfr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            configuration.overhaul.fissionSFR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionmsr.Block vessel = new multiblock.configuration.overhaul.fissionmsr.Block("Fuel Vessel");
                            vessel.fuelVessel = true;
                            configuration.overhaul.fissionMSR.allBlocks.add(vessel);
                            vessel.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionmsr.Block irradiator = new multiblock.configuration.overhaul.fissionmsr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            configuration.overhaul.fissionMSR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = turbine.get("throughputEfficiencyLeniencyMult");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = turbine.get("throughputEfficiencyLeniencyThreshold");
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            configuration.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : configuration.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionsfr.Block bl = new multiblock.configuration.overhaul.fissionsfr.Block(b.name);
                                bl.fuelCell = b.fuelCell;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionSFR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionmsr.Block bl = new multiblock.configuration.overhaul.fissionmsr.Block(b.name);
                                bl.fuelVessel = b.fuelVessel;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionMSR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            parent.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : parent.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 7
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)8;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fusion.PlacementRule, Byte> overhaulFusionPostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            case 4:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Fusion Reactor">
                                size = data.get("size");
                                OverhaulFusionReactor overhaulFusionReactor = new OverhaulFusionReactor(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),(int)size.get(3),ncpf.configuration.overhaul.fusion.allRecipes.get(data.get("recipe", (byte)-1)),ncpf.configuration.overhaul.fusion.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                blocks = data.get("blocks");
                                int[] findex = new int[1];
                                overhaulFusionReactor.forEachPosition((X, Y, Z) -> {
                                    int bid = (int)blocks.get(findex[0]);
                                    if(bid>0)overhaulFusionReactor.setBlockExact(X, Y, Z, new multiblock.overhaul.fusion.Block(ncpf.configuration, X, Y, Z, ncpf.configuration.overhaul.fusion.allBlocks.get(bid-1)));
                                    findex[0]++;
                                });
                                ConfigNumberList breedingBlanketRecipes = data.get("breedingBlanketRecipes");
                                recipeIndex = 0;
                                for(multiblock.overhaul.fusion.Block block : overhaulFusionReactor.getBlocks()){
                                    if(block.template.breedingBlanket){
                                        int rid = (int) breedingBlanketRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulFusionReactor;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fusion.PlacementRule readOverFusionRule(Config ruleCfg){
                multiblock.configuration.overhaul.fusion.PlacementRule rule = new multiblock.configuration.overhaul.fusion.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionsfr.Block cell = new multiblock.configuration.overhaul.fissionsfr.Block("Fuel Cell");
                            cell.fuelCell = true;
                            configuration.overhaul.fissionSFR.allBlocks.add(cell);
                            cell.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionsfr.Block irradiator = new multiblock.configuration.overhaul.fissionsfr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            configuration.overhaul.fissionSFR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionmsr.Block vessel = new multiblock.configuration.overhaul.fissionmsr.Block("Fuel Vessel");
                            vessel.fuelVessel = true;
                            configuration.overhaul.fissionMSR.allBlocks.add(vessel);
                            vessel.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionmsr.Block irradiator = new multiblock.configuration.overhaul.fissionmsr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            configuration.overhaul.fissionMSR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = turbine.get("throughputEfficiencyLeniencyMult");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = turbine.get("throughputEfficiencyLeniencyThreshold");
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            configuration.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : configuration.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fusion Configuration">
                    if(overhaul.hasProperty("fusion")){
                        configuration.overhaul.fusion = new multiblock.configuration.overhaul.fusion.FusionConfiguration();
                        Config fusion = overhaul.get("fusion");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fusion.minInnerRadius = fusion.get("minInnerRadius");
                            configuration.overhaul.fusion.maxInnerRadius = fusion.get("maxInnerRadius");
                            configuration.overhaul.fusion.minCoreSize = fusion.get("minCoreSize");
                            configuration.overhaul.fusion.maxCoreSize = fusion.get("maxCoreSize");
                            configuration.overhaul.fusion.minToroidWidth = fusion.get("minToroidWidth");
                            configuration.overhaul.fusion.maxToroidWidth = fusion.get("maxToroidWidth");
                            configuration.overhaul.fusion.minLiningThickness = fusion.get("minLiningThickness");
                            configuration.overhaul.fusion.maxLiningThickness = fusion.get("maxLiningThickness");
                            configuration.overhaul.fusion.coolingEfficiencyLeniency = fusion.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fusion.sparsityPenaltyMult = fusion.get("sparsityPenaltyMult");
                            configuration.overhaul.fusion.sparsityPenaltyThreshold = fusion.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fusion.get("blocks");
                        overhaulFusionPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fusion.Block block = new multiblock.configuration.overhaul.fusion.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.core = blockCfg.get("core", false);
                            block.connector = blockCfg.get("connector", false);
                            block.electromagnet = blockCfg.get("electromagnet", false);
                            block.heatingBlanket = blockCfg.get("heatingBlanket", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                            }
                            block.breedingBlanket = blockCfg.get("breedingBlanket", false);
                            block.breedingBlanketAugmented = blockCfg.get("augmentedBreedingBlanket", false);
                            if(blockCfg.get("shielding", false)){
                                block.shielding = true;
                                block.shieldingHasBaseStats = true;
                                block.shieldingShieldiness = blockCfg.get("shieldiness");
                            }
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverFusionRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fusion.allBlocks.add(block);configuration.overhaul.fusion.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fusion.PlacementRule rule : overhaulFusionPostLoadMap.keySet()){
                            byte index = overhaulFusionPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fusion.allBlocks.get(index-1);
                            }
                        }
                        ConfigList breedingBlanketRecipes = fusion.get("breedingBlanketRecipes");
                        for(Iterator irit = breedingBlanketRecipes.iterator(); irit.hasNext();){
                            Config breedingBlanketRecipeCfg = (Config)irit.next();
                            for(multiblock.configuration.overhaul.fusion.Block b : configuration.overhaul.fusion.allBlocks){
                                if(b.breedingBlanket){
                                    multiblock.configuration.overhaul.fusion.BlockRecipe breebrecipe = new multiblock.configuration.overhaul.fusion.BlockRecipe(breedingBlanketRecipeCfg.get("name"), "null");
                                    breebrecipe.breedingBlanketEfficiency = breedingBlanketRecipeCfg.get("efficiency");
                                    breebrecipe.breedingBlanketHeat = breedingBlanketRecipeCfg.get("heat", 0);
                                    breebrecipe.breedingBlanketAugmented = b.breedingBlanketAugmented;
                                    b.allRecipes.add(breebrecipe);b.recipes.add(breebrecipe);
                                }
                            }
                        }
                        ConfigList recipes = fusion.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fusion.Recipe recipe = new multiblock.configuration.overhaul.fusion.Recipe(recipeCfg.get("name"), "null", recipeCfg.get("efficiency"), recipeCfg.get("heat"), recipeCfg.get("time"), recipeCfg.getFloat("fluxiness"));
                            configuration.overhaul.fusion.allRecipes.add(recipe);configuration.overhaul.fusion.recipes.add(recipe);
                        }
                        ConfigList coolantRecipes = fusion.get("coolantRecipes");
                        for(Iterator coit = coolantRecipes.iterator(); coit.hasNext();){
                            Config coolantRecipeCfg = (Config)coit.next();
                            multiblock.configuration.overhaul.fusion.CoolantRecipe coolantRecipe = new multiblock.configuration.overhaul.fusion.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fusion.allCoolantRecipes.add(coolantRecipe);configuration.overhaul.fusion.coolantRecipes.add(coolantRecipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionsfr.Block bl = new multiblock.configuration.overhaul.fissionsfr.Block(b.name);
                                bl.fuelCell = b.fuelCell;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionSFR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.hasProperty("input")?1:0;
                                recipe.outputRate = blockCfg.hasProperty("output")?1:0;
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionmsr.Block bl = new multiblock.configuration.overhaul.fissionmsr.Block(b.name);
                                bl.fuelVessel = b.fuelVessel;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionMSR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            parent.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : parent.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 8
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)9;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fusion.PlacementRule, Byte> overhaulFusionPostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                ConfigNumberList size = data.get("size");
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", (byte)-1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                size = data.get("size");
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList fuels = data.get("fuels");
                                ConfigNumberList sources = data.get("sources");
                                ConfigNumberList irradiatorRecipes = data.get("irradiatorRecipes");
                                int fuelIndex = 0;
                                int sourceIndex = 0;
                                int recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionsfr.Block> srces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionsfr.Block bl : ncpf.configuration.overhaul.fissionSFR.allBlocks){
                                    if(bl.source)srces.add(bl);
                                }
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.fuelCell){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulSFR, srces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                size = data.get("size");
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachInternalPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                fuels = data.get("fuels");
                                sources = data.get("sources");
                                irradiatorRecipes = data.get("irradiatorRecipes");
                                fuelIndex = 0;
                                sourceIndex = 0;
                                recipeIndex = 0;
                                ArrayList<multiblock.configuration.overhaul.fissionmsr.Block> msrces = new ArrayList<>();
                                for(multiblock.configuration.overhaul.fissionmsr.Block bl : ncpf.configuration.overhaul.fissionMSR.allBlocks){
                                    if(bl.source)msrces.add(bl);
                                }
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.fuelVessel){
                                        block.recipe = block.template.allRecipes.get((int)fuels.get(fuelIndex));
                                        fuelIndex++;
                                        int sid = (int) sources.get(sourceIndex);
                                        if(sid>0)block.addNeutronSource(overhaulMSR, msrces.get(sid-1));
                                        sourceIndex++;
                                    }
                                    if(block.template.irradiator){
                                        int rid = (int) irradiatorRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                size = data.get("size");
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)size.get(0), (int)size.get(1), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", (byte)-1)));
                                overhaulTurbine.setBearing((int)size.get(2));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                                ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                                for(multiblock.configuration.overhaul.turbine.Block b : ncpf.configuration.overhaul.turbine.allBlocks){
                                    if(b.blade)allBlades.add(b);
                                    else allCoils.add(b);
                                }
                                ConfigNumberList coils = data.get("coils");
                                int index = 0;
                                for(int z = 0; z<2; z++){
                                    if(z==1)z = overhaulTurbine.getExternalDepth()-1;
                                    for(int x = 1; x<=overhaulTurbine.getInternalWidth(); x++){
                                        for(int y = 1; y<=overhaulTurbine.getInternalHeight(); y++){
                                            int bid = (int) coils.get(index);
                                            if(bid>0){
                                                overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, allCoils.get(bid-1)));
                                            }
                                            index++;
                                        }
                                    }
                                }
                                ConfigNumberList blades = data.get("blades");
                                index = 0;
                                for(int z = 1; z<=overhaulTurbine.getInternalDepth(); z++){
                                    int bid = (int) blades.get(index);
                                    if(bid>0){
                                        overhaulTurbine.setBlade((int)size.get(2), z, allBlades.get(bid-1));
                                    }
                                    index++;
                                }
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            case 4:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Fusion Reactor">
                                size = data.get("size");
                                OverhaulFusionReactor overhaulFusionReactor = new OverhaulFusionReactor(ncpf.configuration, (int)size.get(0),(int)size.get(1),(int)size.get(2),(int)size.get(3),ncpf.configuration.overhaul.fusion.allRecipes.get(data.get("recipe", (byte)-1)),ncpf.configuration.overhaul.fusion.allCoolantRecipes.get(data.get("coolantRecipe", (byte)-1)));
                                blocks = data.get("blocks");
                                int[] findex = new int[1];
                                overhaulFusionReactor.forEachPosition((X, Y, Z) -> {
                                    int bid = (int)blocks.get(findex[0]);
                                    if(bid>0)overhaulFusionReactor.setBlockExact(X, Y, Z, new multiblock.overhaul.fusion.Block(ncpf.configuration, X, Y, Z, ncpf.configuration.overhaul.fusion.allBlocks.get(bid-1)));
                                    findex[0]++;
                                });
                                ConfigNumberList breedingBlanketRecipes = data.get("breedingBlanketRecipes");
                                recipeIndex = 0;
                                for(multiblock.overhaul.fusion.Block block : overhaulFusionReactor.getBlocks()){
                                    if(block.template.breedingBlanket){
                                        int rid = (int) breedingBlanketRecipes.get(recipeIndex);
                                        if(rid>0)block.recipe = block.template.allRecipes.get(rid-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulFusionReactor;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(multiblock instanceof CuboidalMultiblock)((CuboidalMultiblock)multiblock).buildDefaultCasingOnConvert();
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fusion.PlacementRule readOverFusionRule(Config ruleCfg){
                multiblock.configuration.overhaul.fusion.PlacementRule rule = new multiblock.configuration.overhaul.fusion.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionsfr.Block cell = new multiblock.configuration.overhaul.fissionsfr.Block("Fuel Cell");
                            cell.fuelCell = true;
                            configuration.overhaul.fissionSFR.allBlocks.add(cell);
                            cell.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionsfr.Block irradiator = new multiblock.configuration.overhaul.fissionsfr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionsfr.BlockRecipe("",""));
                            configuration.overhaul.fissionSFR.allBlocks.add(irradiator);
                        }
                    }
//</editor-folirradiator
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.get("inputRate", 0);
                                recipe.outputRate = blockCfg.get("outputRate", 0);
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            configuration.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                        if(configuration.addon){
                            multiblock.configuration.overhaul.fissionmsr.Block vessel = new multiblock.configuration.overhaul.fissionmsr.Block("Fuel Vessel");
                            vessel.fuelVessel = true;
                            configuration.overhaul.fissionMSR.allBlocks.add(vessel);
                            vessel.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            multiblock.configuration.overhaul.fissionmsr.Block irradiator = new multiblock.configuration.overhaul.fissionmsr.Block("Neutron Irradiator");
                            irradiator.irradiator = true;
                            irradiator.allRecipes.add(new multiblock.configuration.overhaul.fissionmsr.BlockRecipe("",""));
                            configuration.overhaul.fissionMSR.allBlocks.add(irradiator);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = turbine.get("throughputEfficiencyLeniencyMult");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = turbine.get("throughputEfficiencyLeniencyThreshold");
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            configuration.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : configuration.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fusion Configuration">
                    if(overhaul.hasProperty("fusion")){
                        configuration.overhaul.fusion = new multiblock.configuration.overhaul.fusion.FusionConfiguration();
                        Config fusion = overhaul.get("fusion");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fusion.minInnerRadius = fusion.get("minInnerRadius");
                            configuration.overhaul.fusion.maxInnerRadius = fusion.get("maxInnerRadius");
                            configuration.overhaul.fusion.minCoreSize = fusion.get("minCoreSize");
                            configuration.overhaul.fusion.maxCoreSize = fusion.get("maxCoreSize");
                            configuration.overhaul.fusion.minToroidWidth = fusion.get("minToroidWidth");
                            configuration.overhaul.fusion.maxToroidWidth = fusion.get("maxToroidWidth");
                            configuration.overhaul.fusion.minLiningThickness = fusion.get("minLiningThickness");
                            configuration.overhaul.fusion.maxLiningThickness = fusion.get("maxLiningThickness");
                            configuration.overhaul.fusion.coolingEfficiencyLeniency = fusion.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fusion.sparsityPenaltyMult = fusion.get("sparsityPenaltyMult");
                            configuration.overhaul.fusion.sparsityPenaltyThreshold = fusion.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fusion.get("blocks");
                        overhaulFusionPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fusion.Block block = new multiblock.configuration.overhaul.fusion.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.core = blockCfg.get("core", false);
                            block.connector = blockCfg.get("connector", false);
                            block.electromagnet = blockCfg.get("electromagnet", false);
                            block.heatingBlanket = blockCfg.get("heatingBlanket", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                            }
                            block.breedingBlanket = blockCfg.get("breedingBlanket", false);
                            block.breedingBlanketAugmented = blockCfg.get("augmentedBreedingBlanket", false);
                            if(blockCfg.get("shielding", false)){
                                block.shielding = true;
                                block.shieldingHasBaseStats = true;
                                block.shieldingShieldiness = blockCfg.get("shieldiness");
                            }
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverFusionRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.fusion.allBlocks.add(block);configuration.overhaul.fusion.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fusion.PlacementRule rule : overhaulFusionPostLoadMap.keySet()){
                            byte index = overhaulFusionPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fusion.allBlocks.get(index-1);
                            }
                        }
                        ConfigList breedingBlanketRecipes = fusion.get("breedingBlanketRecipes");
                        for(Iterator irit = breedingBlanketRecipes.iterator(); irit.hasNext();){
                            Config breedingBlanketRecipeCfg = (Config)irit.next();
                            for(multiblock.configuration.overhaul.fusion.Block b : configuration.overhaul.fusion.allBlocks){
                                if(b.breedingBlanket){
                                    multiblock.configuration.overhaul.fusion.BlockRecipe breebrecipe = new multiblock.configuration.overhaul.fusion.BlockRecipe(breedingBlanketRecipeCfg.get("name"), "null");
                                    breebrecipe.breedingBlanketEfficiency = breedingBlanketRecipeCfg.get("efficiency");
                                    breebrecipe.breedingBlanketHeat = breedingBlanketRecipeCfg.get("heat");
                                    breebrecipe.breedingBlanketAugmented = b.breedingBlanketAugmented;
                                    b.allRecipes.add(breebrecipe);b.recipes.add(breebrecipe);
                                }
                            }
                        }
                        ConfigList recipes = fusion.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fusion.Recipe recipe = new multiblock.configuration.overhaul.fusion.Recipe(recipeCfg.get("name"), "null", recipeCfg.get("efficiency"), recipeCfg.get("heat"), recipeCfg.get("time"), recipeCfg.getFloat("fluxiness"));
                            configuration.overhaul.fusion.allRecipes.add(recipe);configuration.overhaul.fusion.recipes.add(recipe);
                        }
                        ConfigList coolantRecipes = fusion.get("coolantRecipes");
                        for(Iterator coit = coolantRecipes.iterator(); coit.hasNext();){
                            Config coolantRecipeCfg = (Config)coit.next();
                            multiblock.configuration.overhaul.fusion.CoolantRecipe coolantRecipe = new multiblock.configuration.overhaul.fusion.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            configuration.overhaul.fusion.allCoolantRecipes.add(coolantRecipe);configuration.overhaul.fusion.coolantRecipes.add(coolantRecipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = true;
                                block.heatsinkCooling = cooling;
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionsfr.Block bl = new multiblock.configuration.overhaul.fissionsfr.Block(b.name);
                                bl.fuelCell = b.fuelCell;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionSFR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelCellEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelCellHeat = fuelCfg.get("heat");
                            fuel.fuelCellTime = fuelCfg.get("time");
                            fuel.fuelCellCriticality = fuelCfg.get("criticality");
                            fuel.fuelCellSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.fuelCell){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionSFR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block source = new multiblock.configuration.overhaul.fissionsfr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionSFR.allBlocks.add(source);configuration.overhaul.fissionSFR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionSFR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : configuration.overhaul.fissionSFR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(coolantRecipeCfg.get("input"), coolantRecipeCfg.get("output"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionsfr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            int cooling = blockCfg.get("cooling", 0);
                            if(cooling!=0){
                                block.heater = true;
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(blockCfg.get("input", ""), blockCfg.get("output", ""));
                                recipe.heaterCooling = cooling;
                                recipe.inputRate = blockCfg.get("inputRate", 0);
                                recipe.outputRate = blockCfg.get("outputRate", 0);
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.fuelVessel = blockCfg.get("fuelVessel", false);
                            if(blockCfg.get("reflector", false)){
                                block.reflector = true;
                                block.reflectorHasBaseStats = true;
                                block.reflectorEfficiency = blockCfg.get("efficiency");
                                block.reflectorReflectivity = blockCfg.get("reflectivity");
                            }
                            block.irradiator = blockCfg.get("irradiator", false);
                            if(blockCfg.get("moderator", false)){
                                block.moderator = true;
                                block.moderatorHasBaseStats = true;
                                block.moderatorActive = blockCfg.get("activeModerator", false);
                                block.moderatorFlux = blockCfg.get("flux");
                                block.moderatorEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.get("shield", false)){
                                block.shield = true;
                                block.shieldHasBaseStats = true;
                                block.shieldHeat = blockCfg.get("heatMult");
                                block.shieldEfficiency = blockCfg.get("efficiency");
                            }
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.functional = blockCfg.get("functional");
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(blockCfg.get("closedTexture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                multiblock.configuration.overhaul.fissionmsr.Block bl = new multiblock.configuration.overhaul.fissionmsr.Block(b.name);
                                bl.fuelVessel = b.fuelVessel;
                                bl.irradiator = b.irradiator;
                                configuration.overhaul.fissionMSR.allBlocks.add(bl);
                            }
                        }
                        ConfigList fuels = fissionMSR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe fuel = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(fuelCfg.get("name"), "null");
                            fuel.fuelVesselEfficiency = fuelCfg.get("efficiency");
                            fuel.fuelVesselHeat = fuelCfg.get("heat");
                            fuel.fuelVesselTime = fuelCfg.get("time");
                            fuel.fuelVesselCriticality = fuelCfg.get("criticality");
                            fuel.fuelVesselSelfPriming = fuelCfg.get("selfPriming", false);
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.allRecipes.add(fuel);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.fuelVessel){
                                    b.recipes.add(fuel);
                                }
                            }
                        }
                        ConfigList sources = fissionMSR.get("sources");
                        for(Iterator sit = sources.iterator(); sit.hasNext();){
                            Config sourceCfg = (Config)sit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block source = new multiblock.configuration.overhaul.fissionmsr.Block(sourceCfg.get("name"));
                            source.source = true;
                            source.sourceEfficiency = sourceCfg.get("efficiency");
                            parent.overhaul.fissionMSR.allBlocks.add(source);configuration.overhaul.fissionMSR.blocks.add(source);
                        }
                        ConfigList irradiatorRecipes = fissionMSR.get("irradiatorRecipes");
                        for(Iterator irit = irradiatorRecipes.iterator(); irit.hasNext();){
                            Config irradiatorRecipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.fissionmsr.BlockRecipe irrecipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(irradiatorRecipeCfg.get("name"), "null");
                            irrecipe.irradiatorEfficiency = irradiatorRecipeCfg.get("efficiency");
                            irrecipe.irradiatorHeat = irradiatorRecipeCfg.get("heat");
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.allRecipes.add(irrecipe);
                                }
                            }
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : configuration.overhaul.fissionMSR.allBlocks){
                                if(b.irradiator){
                                    b.recipes.add(irrecipe);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                            if(!b.allRecipes.isEmpty()){
                                b.port = new multiblock.configuration.overhaul.fissionmsr.Block("null");
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList coils = turbine.get("coils");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = coils.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block coil = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            coil.bearing = blockCfg.get("bearing", false);
                            coil.connector = blockCfg.get("connector", false);
                            float eff = blockCfg.get("efficiency");
                            if(eff>0){
                                coil.coil = true;
                                coil.coilEfficiency = blockCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))coil.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    coil.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(coil);configuration.overhaul.turbine.blocks.add(coil);
                        }
                        ConfigList blades = turbine.get("blades");
                        for(Iterator bit = blades.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block blade = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            blade.blade = true;
                            blade.bladeExpansion = blockCfg.get("expansion");
                            blade.bladeEfficiency = blockCfg.get("efficiency");
                            blade.bladeStator = blockCfg.get("stator");
                            if(blockCfg.hasProperty("texture"))blade.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            parent.overhaul.turbine.allBlocks.add(blade);configuration.overhaul.turbine.blocks.add(blade);
                        }
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allCoils = new ArrayList<>();
                        ArrayList<multiblock.configuration.overhaul.turbine.Block> allBlades = new ArrayList<>();
                        for(multiblock.configuration.overhaul.turbine.Block b : parent.overhaul.turbine.allBlocks){
                            if(b.blade)allBlades.add(b);
                            else allCoils.add(b);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = allCoils.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(recipeCfg.get("input"), recipeCfg.get("output"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 9
        formats.add(new FormatReader(){
            @Override
            public boolean formatMatches(InputStream in){
                try{
                    Config header = Config.newConfig();
                    header.load(in);
                    in.close();
                    return header.get("version", (byte)0)==(byte)10;
                }catch(Throwable t){
                    return false;
                }
            }
            HashMap<multiblock.configuration.underhaul.fissionsfr.PlacementRule, Byte> underhaulPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionsfr.PlacementRule, Byte> overhaulSFRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fissionmsr.PlacementRule, Byte> overhaulMSRPostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.turbine.PlacementRule, Byte> overhaulTurbinePostLoadMap = new HashMap<>();
            HashMap<multiblock.configuration.overhaul.fusion.PlacementRule, Byte> overhaulFusionPostLoadMap = new HashMap<>();
            HashMap<OverhaulTurbine, ArrayList<Integer>> overhaulTurbinePostLoadInputsMap = new HashMap<>();
            @Override
            public synchronized NCPFFile read(InputStream in){
                overhaulTurbinePostLoadInputsMap.clear();
                try{
                    NCPFFile ncpf = new NCPFFile();
                    Config header = Config.newConfig();
                    header.load(in);
                    int multiblocks = header.get("count");
                    if(header.hasProperty("metadata")){
                        Config metadata = header.get("metadata");
                        for(String key : metadata.properties()){
                            ncpf.metadata.put(key, metadata.get(key));
                        }
                    }
                    Config config = Config.newConfig();
                    config.load(in);
                    ncpf.configuration = loadConfiguration(config);
                    for(int i = 0; i<multiblocks; i++){
                        Config data = Config.newConfig();
                        data.load(in);
                        Multiblock multiblock;
                        int id = data.get("id");
                        ConfigNumberList dimensions = data.get("dimensions");
                        switch(id){
                            case 0:
                                //<editor-fold defaultstate="collapsed" desc="Underhaul SFR">
                                UnderhaulSFR underhaulSFR = new UnderhaulSFR(ncpf.configuration, (int)dimensions.get(0),(int)dimensions.get(1),(int)dimensions.get(2),ncpf.configuration.underhaul.fissionSFR.allFuels.get(data.get("fuel", -1)));
                                boolean compact = data.get("compact");
                                ConfigNumberList blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    underhaulSFR.forEachPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0)underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        underhaulSFR.setBlockExact(x, y, z, new multiblock.underhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.underhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                multiblock = underhaulSFR;
//</editor-fold>
                                break;
                            case 1:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul SFR">
                                OverhaulSFR overhaulSFR = new OverhaulSFR(ncpf.configuration, (int)dimensions.get(0),(int)dimensions.get(1),(int)dimensions.get(2),ncpf.configuration.overhaul.fissionSFR.allCoolantRecipes.get(data.get("coolantRecipe", -1)));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulSFR.forEachPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulSFR.setBlockExact(x, y, z, new multiblock.overhaul.fissionsfr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionSFR.allBlocks.get(bid-1)));
                                    }
                                }
                                ConfigNumberList blockRecipes = data.get("blockRecipes");
                                int recipeIndex = 0;
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    multiblock.configuration.overhaul.fissionsfr.Block templ = block.template.parent==null?block.template:block.template.parent;
                                    if(!templ.allRecipes.isEmpty()){
                                        block.recipe = templ.allRecipes.get((int)blockRecipes.get(recipeIndex)-1);
                                        recipeIndex++;
                                    }
                                }
                                ConfigNumberList ports = data.get("ports");
                                int portIndex = 0;
                                for(multiblock.overhaul.fissionsfr.Block block : overhaulSFR.getBlocks()){
                                    if(block.template.parent!=null||block.template.coolantVent){
                                        block.isToggled = ports.get(portIndex)>0;
                                        portIndex++;
                                    }
                                }
                                multiblock = overhaulSFR;
//</editor-fold>
                                break;
                            case 2:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul MSR">
                                OverhaulMSR overhaulMSR = new OverhaulMSR(ncpf.configuration, (int)dimensions.get(0),(int)dimensions.get(1),(int)dimensions.get(2));
                                compact = data.get("compact");
                                blocks = data.get("blocks");
                                if(compact){
                                    int[] index = new int[1];
                                    overhaulMSR.forEachPosition((x, y, z) -> {
                                        int bid = (int) blocks.get(index[0]);
                                        if(bid>0){
                                            overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                        }
                                        index[0]++;
                                    });
                                }else{
                                    for(int j = 0; j<blocks.size(); j+=4){
                                        int x = (int) blocks.get(j)+1;
                                        int y = (int) blocks.get(j+1)+1;
                                        int z = (int) blocks.get(j+2)+1;
                                        int bid = (int) blocks.get(j+3);
                                        overhaulMSR.setBlockExact(x, y, z, new multiblock.overhaul.fissionmsr.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.fissionMSR.allBlocks.get(bid-1)));
                                    }
                                }
                                blockRecipes = data.get("blockRecipes");
                                recipeIndex = 0;
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    multiblock.configuration.overhaul.fissionmsr.Block templ = block.template.parent==null?block.template:block.template.parent;
                                    if(!templ.allRecipes.isEmpty()){
                                        block.recipe = templ.allRecipes.get((int)blockRecipes.get(recipeIndex)-1);
                                        recipeIndex++;
                                    }
                                }
                                ports = data.get("ports");
                                portIndex = 0;
                                for(multiblock.overhaul.fissionmsr.Block block : overhaulMSR.getBlocks()){
                                    if(block.template.parent!=null){
                                        block.isToggled = ports.get(portIndex)>0;
                                        portIndex++;
                                    }
                                }
                                multiblock = overhaulMSR;
//</editor-fold>
                                break;
                            case 3:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Turbine">
                                OverhaulTurbine overhaulTurbine = new OverhaulTurbine(ncpf.configuration, (int)dimensions.get(0), (int)dimensions.get(2), ncpf.configuration.overhaul.turbine.allRecipes.get(data.get("recipe", -1)));
                                if(data.hasProperty("inputs")){
                                    overhaulTurbinePostLoadInputsMap.put(overhaulTurbine, new ArrayList<>());
                                    ConfigNumberList inputs = data.get("inputs");
                                    for(Number number : inputs.iterable()){
                                        overhaulTurbinePostLoadInputsMap.get(overhaulTurbine).add(number.intValue());
                                    }
                                }
                                blocks = data.get("blocks");
                                int[] index = new int[1];
                                overhaulTurbine.forEachPosition((x, y, z) -> {
                                    int bid = (int) blocks.get(index[0]);
                                    if(bid>0){
                                        overhaulTurbine.setBlockExact(x, y, z, new multiblock.overhaul.turbine.Block(ncpf.configuration, x, y, z, ncpf.configuration.overhaul.turbine.allBlocks.get(bid-1)));
                                    }
                                    index[0]++;
                                });
                                multiblock = overhaulTurbine;
//</editor-fold>
                                break;
                            case 4:
                                //<editor-fold defaultstate="collapsed" desc="Overhaul Fusion Reactor">
                                OverhaulFusionReactor overhaulFusionReactor = new OverhaulFusionReactor(ncpf.configuration, (int)dimensions.get(0),(int)dimensions.get(1),(int)dimensions.get(2),(int)dimensions.get(3),ncpf.configuration.overhaul.fusion.allRecipes.get(data.get("recipe", -1)),ncpf.configuration.overhaul.fusion.allCoolantRecipes.get(data.get("coolantRecipe", -1)));
                                blocks = data.get("blocks");
                                int[] findex = new int[0];
                                overhaulFusionReactor.forEachPosition((X, Y, Z) -> {
                                    int bid = (int) blocks.get(findex[0]);
                                    if(bid>0)overhaulFusionReactor.setBlockExact(X, Y, Z, new multiblock.overhaul.fusion.Block(ncpf.configuration, X, Y, Z, ncpf.configuration.overhaul.fusion.allBlocks.get(bid-1)));
                                    findex[0]++;
                                });
                                blockRecipes = data.get("blockRecipes");
                                recipeIndex = 0;
                                for(multiblock.overhaul.fusion.Block block : overhaulFusionReactor.getBlocks()){
                                    if(!block.template.allRecipes.isEmpty()){
                                        block.recipe = block.template.allRecipes.get((int)blockRecipes.get(recipeIndex)-1);
                                        recipeIndex++;
                                    }
                                }
                                multiblock = overhaulFusionReactor;
//</editor-fold>
                                break;
                            default:
                                throw new IllegalArgumentException("Unknown Multiblock ID: "+id);
                        }
                        if(data.hasProperty("metadata")){
                            Config metadata = data.get("metadata");
                            for(String key : metadata.properties()){
                                multiblock.metadata.put(key, metadata.get(key));
                            }
                        }
                        ncpf.multiblocks.add(multiblock);
                    }
                    for(OverhaulTurbine turbine : overhaulTurbinePostLoadInputsMap.keySet()){
                        for(int i : overhaulTurbinePostLoadInputsMap.get(turbine)){
                            turbine.inputs.add(ncpf.multiblocks.get(i));
                        }
                    }
                    in.close();
                    return ncpf;
                }catch(IOException ex){
                    throw new RuntimeException(ex);
                }
            }
            private multiblock.configuration.underhaul.fissionsfr.PlacementRule readUnderRule(Config ruleCfg){
                multiblock.configuration.underhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.underhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        underhaulPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.COOLER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readUnderRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionsfr.PlacementRule readOverSFRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionsfr.PlacementRule rule = new multiblock.configuration.overhaul.fissionsfr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX;
                        overhaulSFRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.HEATSINK;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.FUEL_CELL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverSFRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fissionmsr.PlacementRule readOverMSRRule(Config ruleCfg){
                multiblock.configuration.overhaul.fissionmsr.PlacementRule rule = new multiblock.configuration.overhaul.fissionmsr.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX;
                        overhaulMSRPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CASING;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.HEATER;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.VESSEL;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.MODERATOR;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.SHIELD;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.IRRADIATOR;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.CONDUCTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverMSRRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.turbine.PlacementRule readOverTurbineRule(Config ruleCfg){
                multiblock.configuration.overhaul.turbine.PlacementRule rule = new multiblock.configuration.overhaul.turbine.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE;
                        overhaulTurbinePostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.EDGE_GROUP;
                        coilType = ruleCfg.get("block");
                        switch(coilType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.COIL;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.BEARING;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverTurbineRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private multiblock.configuration.overhaul.fusion.PlacementRule readOverFusionRule(Config ruleCfg){
                multiblock.configuration.overhaul.fusion.PlacementRule rule = new multiblock.configuration.overhaul.fusion.PlacementRule();
                byte type = ruleCfg.get("type");
                switch(type){
                    case 0:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 1:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 2:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX;
                        overhaulFusionPostLoadMap.put(rule, ruleCfg.get("block"));
                        break;
                    case 3:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                        byte blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 4:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        rule.min = ruleCfg.get("min");
                        rule.max = ruleCfg.get("max");
                        break;
                    case 5:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.VERTEX_GROUP;
                        blockType = ruleCfg.get("block");
                        switch(blockType){
                            case 0:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                                break;
                            case 1:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.TOROIDAL_ELECTROMAGNET;
                                break;
                            case 2:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.POLOIDAL_ELECTROMAGNET;
                                break;
                            case 3:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEATING_BLANKET;
                                break;
                            case 4:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.BREEDING_BLANKET;
                                break;
                            case 5:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.REFLECTOR;
                                break;
                            case 6:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.HEAT_SINK;
                                break;
                            case 7:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.SHIELDING;
                                break;
                            case 8:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONDUCTOR;
                                break;
                            case 9:
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.CONNECTOR;
                                break;
                        }
                        break;
                    case 6:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.OR;
                        ConfigList rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                    case 7:
                        rule.ruleType = multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AND;
                        rules = ruleCfg.get("rules");
                        for(Iterator rit = rules.iterator(); rit.hasNext();){
                            Config rulC = (Config)rit.next();
                            rule.rules.add(readOverFusionRule(rulC));
                        }
                        break;
                }
                return rule;
            }
            private Configuration loadConfiguration(Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.underhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.underhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.underhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.underhaul.fissionSFR.moderatorExtraPower = fissionSFR.get("moderatorExtraPower");
                            configuration.underhaul.fissionSFR.moderatorExtraHeat = fissionSFR.get("moderatorExtraHeat");
                            configuration.underhaul.fissionSFR.activeCoolerRate = fissionSFR.get("activeCoolerRate");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            block.casing = blockCfg.get("casing", false);
                            block.controller = blockCfg.get("controller", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            configuration.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            fuel.displayName = fuelCfg.get("displayName");
                            if(fuelCfg.hasProperty("legacyNames")){
                                ConfigList names = fuelCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    fuel.legacyNames.add(names.get(i));
                                }
                            }
                            if(fuelCfg.hasProperty("texture"))fuel.setTexture(loadNCPFTexture(fuelCfg.get("texture")));
                            configuration.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionSFR.minSize = fissionSFR.get("minSize");
                            configuration.overhaul.fissionSFR.maxSize = fissionSFR.get("maxSize");
                            configuration.overhaul.fissionSFR.neutronReach = fissionSFR.get("neutronReach");
                            configuration.overhaul.fissionSFR.coolingEfficiencyLeniency = fissionSFR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionSFR.sparsityPenaltyMult = fissionSFR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionSFR.sparsityPenaltyThreshold = fissionSFR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.functional = blockCfg.get("functional", false);
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.casing = blockCfg.get("casing", false);
                            block.casingEdge = blockCfg.get("casingEdge", false);
                            block.controller = blockCfg.get("controller", false);
                            Config coolantVentCfg = blockCfg.get("coolantVent");
                            if(coolantVentCfg!=null){
                                block.coolantVent = true;
                                if(coolantVentCfg.hasProperty("outTexture"))block.setCoolantVentOutputTexture(loadNCPFTexture(coolantVentCfg.get("outTexture")));
                                block.coolantVentOutputDisplayName = coolantVentCfg.get("outDisplayName");
                            }
                            boolean hasRecipes = blockCfg.getConfigList("recipes", new ConfigList()).size()>0;
                            Config fuelCellCfg = blockCfg.get("fuelCell");
                            if(fuelCellCfg!=null){
                                block.fuelCell = true;
                                block.fuelCellHasBaseStats = fuelCellCfg.get("hasBaseStats", !hasRecipes);
                                if(block.fuelCellHasBaseStats){
                                    block.fuelCellEfficiency = fuelCellCfg.get("efficiency");
                                    block.fuelCellHeat = fuelCellCfg.get("heat");
                                    block.fuelCellCriticality = fuelCellCfg.get("criticality");
                                    block.fuelCellSelfPriming = fuelCellCfg.get("selfPriming", false);
                                }
                            }
                            Config irradiatorCfg = blockCfg.get("irradiator");
                            if(irradiatorCfg!=null){
                                block.irradiator = true;
                                block.irradiatorHasBaseStats = irradiatorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.irradiatorHasBaseStats){
                                    block.irradiatorEfficiency = irradiatorCfg.get("efficiency");
                                    block.irradiatorHeat = irradiatorCfg.get("heat");
                                }
                            }
                            Config reflectorCfg = blockCfg.get("reflector");
                            if(reflectorCfg!=null){
                                block.reflector = true;
                                block.reflectorHasBaseStats = reflectorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.reflectorHasBaseStats){
                                    block.reflectorEfficiency = reflectorCfg.get("efficiency");
                                    block.reflectorReflectivity = reflectorCfg.get("reflectivity");
                                }
                            }
                            Config moderatorCfg = blockCfg.get("moderator");
                            if(moderatorCfg!=null){
                                block.moderator = true;
                                block.moderatorHasBaseStats = moderatorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.moderatorHasBaseStats){
                                    block.moderatorFlux = moderatorCfg.get("flux");
                                    block.moderatorEfficiency = moderatorCfg.get("efficiency");
                                    block.moderatorActive = moderatorCfg.get("active", false);
                                }
                            }
                            Config shieldCfg = blockCfg.get("shield");
                            if(shieldCfg!=null){
                                block.shield = true;
                                block.shieldHasBaseStats = shieldCfg.get("hasBaseStats", !hasRecipes);
                                if(block.shieldHasBaseStats){
                                    block.shieldHeat = shieldCfg.get("heat");
                                    block.shieldEfficiency = shieldCfg.get("efficiency");
                                    if(shieldCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(shieldCfg.get("closedTexture")));
                                }
                            }
                            Config heatsinkCfg = blockCfg.get("heatsink");
                            if(heatsinkCfg!=null){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = heatsinkCfg.get("hasBaseStats", !hasRecipes);
                                if(block.heatsinkHasBaseStats){
                                    block.heatsinkCooling = heatsinkCfg.get("cooling");
                                }
                            }
                            Config sourceCfg = blockCfg.get("source");
                            if(sourceCfg!=null){
                                block.source = true;
                                block.sourceEfficiency = sourceCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(hasRecipes&&!configuration.addon){
                                Config portCfg = blockCfg.get("port");
                                block.port = new multiblock.configuration.overhaul.fissionsfr.Block(portCfg.get("name"));
                                block.port.parent = block;
                                block.port.displayName = portCfg.get("inputDisplayName");
                                if(portCfg.hasProperty("inputTexture"))block.port.setTexture(loadNCPFTexture(portCfg.get("inputTexture")));
                                block.port.portOutputDisplayName = portCfg.get("outputDisplayName");
                                if(portCfg.hasProperty("outputTexture"))block.port.setPortOutputTexture(loadNCPFTexture(portCfg.get("outputTexture")));
                            }
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverSFRRule(ruleCfg));
                                }
                            }
                            ConfigList recipes = blockCfg.get("recipes", new ConfigList());
                            for(int i = 0; i<recipes.size(); i++){
                                Config recipeCfg = recipes.get(i);
                                Config inputCfg = recipeCfg.get("input");
                                Config outputCfg = recipeCfg.get("output");
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(inputCfg.get("name"), outputCfg.get("name"));
                                recipe.inputDisplayName = inputCfg.get("displayName");
                                if(inputCfg.hasProperty("legacyNames")){
                                    ConfigList names = inputCfg.getConfigList("legacyNames");
                                    for(int j = 0; j<names.size(); j++){
                                        recipe.inputLegacyNames.add(names.get(j));
                                    }
                                }
                                if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                                recipe.inputRate = inputCfg.get("rate", 0);
                                recipe.outputDisplayName = outputCfg.get("displayName");
                                if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                                recipe.outputRate = outputCfg.get("rate", 0);
                                if(block.fuelCell){
                                    Config recipeFuelCellCfg = recipeCfg.get("fuelCell");
                                    recipe.fuelCellEfficiency = recipeFuelCellCfg.get("efficiency");
                                    recipe.fuelCellHeat = recipeFuelCellCfg.get("heat");
                                    recipe.fuelCellTime = recipeFuelCellCfg.get("time");
                                    recipe.fuelCellCriticality = recipeFuelCellCfg.get("criticality");
                                    recipe.fuelCellSelfPriming = recipeFuelCellCfg.get("selfPriming", false);
                                }
                                if(block.irradiator){
                                    Config recipeIrradiatorCfg = recipeCfg.get("irradiator");
                                    recipe.irradiatorEfficiency = recipeIrradiatorCfg.get("efficiency");
                                    recipe.irradiatorHeat = recipeIrradiatorCfg.get("heat");
                                }
                                if(block.reflector){
                                    Config recipeReflectorCfg = recipeCfg.get("reflector");
                                    recipe.reflectorEfficiency = recipeReflectorCfg.get("efficiency");
                                    recipe.reflectorReflectivity = recipeReflectorCfg.get("reflectivity");
                                }
                                if(block.moderator){
                                    Config recipeModeratorCfg = recipeCfg.get("moderator");
                                    recipe.moderatorFlux = recipeModeratorCfg.get("flux");
                                    recipe.moderatorEfficiency = recipeModeratorCfg.get("efficiency");
                                    recipe.moderatorActive = recipeModeratorCfg.get("active", false);
                                }
                                if(block.shield){
                                    Config recipeShieldCfg = recipeCfg.get("shield");
                                    recipe.shieldHeat = recipeShieldCfg.get("heat");
                                    recipe.shieldEfficiency = recipeShieldCfg.get("efficiency");
                                }
                                if(block.heatsink){
                                    Config recipeHeatsinkCfg = recipeCfg.get("heatsink");
                                    recipe.heatsinkCooling = recipeHeatsinkCfg.get("cooling");
                                }
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            configuration.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                            if(block.port!=null){
                                configuration.overhaul.fissionSFR.allBlocks.add(block.port);configuration.overhaul.fissionSFR.blocks.add(block.port);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            Config inputCfg = coolantRecipeCfg.get("input");
                            Config outputCfg = coolantRecipeCfg.get("output");
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(inputCfg.get("name"), outputCfg.get("name"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            coolRecipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    coolRecipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))coolRecipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            coolRecipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))coolRecipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                            configuration.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fissionMSR.minSize = fissionMSR.get("minSize");
                            configuration.overhaul.fissionMSR.maxSize = fissionMSR.get("maxSize");
                            configuration.overhaul.fissionMSR.neutronReach = fissionMSR.get("neutronReach");
                            configuration.overhaul.fissionMSR.coolingEfficiencyLeniency = fissionMSR.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fissionMSR.sparsityPenaltyMult = fissionMSR.get("sparsityPenaltyMult");
                            configuration.overhaul.fissionMSR.sparsityPenaltyThreshold = fissionMSR.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.functional = blockCfg.get("functional", false);
                            block.blocksLOS = blockCfg.get("blocksLOS", false);
                            block.casing = blockCfg.get("casing", false);
                            block.casingEdge = blockCfg.get("casingEdge", false);
                            block.controller = blockCfg.get("controller", false);
                            boolean hasRecipes = blockCfg.getConfigList("recipes", new ConfigList()).size()>0;
                            Config fuelVesselCfg = blockCfg.get("fuelVessel");
                            if(fuelVesselCfg!=null){
                                block.fuelVessel = true;
                                block.fuelVesselHasBaseStats = fuelVesselCfg.get("hasBaseStats", !hasRecipes);
                                if(block.fuelVesselHasBaseStats){
                                    block.fuelVesselEfficiency = fuelVesselCfg.get("efficiency");
                                    block.fuelVesselHeat = fuelVesselCfg.get("heat");
                                    block.fuelVesselCriticality = fuelVesselCfg.get("criticality");
                                    block.fuelVesselSelfPriming = fuelVesselCfg.get("selfPriming", false);
                                }
                            }
                            Config irradiatorCfg = blockCfg.get("irradiator");
                            if(irradiatorCfg!=null){
                                block.irradiator = true;
                                block.irradiatorHasBaseStats = irradiatorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.irradiatorHasBaseStats){
                                    block.irradiatorEfficiency = irradiatorCfg.get("efficiency");
                                    block.irradiatorHeat = irradiatorCfg.get("heat");
                                }
                            }
                            Config reflectorCfg = blockCfg.get("reflector");
                            if(reflectorCfg!=null){
                                block.reflector = true;
                                block.reflectorHasBaseStats = reflectorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.reflectorHasBaseStats){
                                    block.reflectorEfficiency = reflectorCfg.get("efficiency");
                                    block.reflectorReflectivity = reflectorCfg.get("reflectivity");
                                }
                            }
                            Config moderatorCfg = blockCfg.get("moderator");
                            if(moderatorCfg!=null){
                                block.moderator = true;
                                block.moderatorHasBaseStats = moderatorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.moderatorHasBaseStats){
                                    block.moderatorFlux = moderatorCfg.get("flux");
                                    block.moderatorEfficiency = moderatorCfg.get("efficiency");
                                    block.moderatorActive = moderatorCfg.get("active", false);
                                }
                            }
                            Config shieldCfg = blockCfg.get("shield");
                            if(shieldCfg!=null){
                                block.shield = true;
                                block.shieldHasBaseStats = shieldCfg.get("hasBaseStats", !hasRecipes);
                                if(block.shieldHasBaseStats){
                                    block.shieldHeat = shieldCfg.get("heat");
                                    block.shieldEfficiency = shieldCfg.get("efficiency");
                                    if(shieldCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(shieldCfg.get("closedTexture")));
                                }
                            }
                            Config heaterCfg = blockCfg.get("heater");
                            if(heaterCfg!=null){
                                block.heater = true;
                                block.heaterHasBaseStats = heaterCfg.get("hasBaseStats", !hasRecipes);
                                if(block.heaterHasBaseStats){
                                    block.heaterCooling = heaterCfg.get("cooling");
                                }
                            }
                            Config sourceCfg = blockCfg.get("source");
                            if(sourceCfg!=null){
                                block.source = true;
                                block.sourceEfficiency = sourceCfg.get("efficiency");
                            }
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(hasRecipes&&!configuration.addon){
                                Config portCfg = blockCfg.get("port");
                                block.port = new multiblock.configuration.overhaul.fissionmsr.Block(portCfg.get("name"));
                                block.port.parent = block;
                                block.port.displayName = portCfg.get("inputDisplayName");
                                if(portCfg.hasProperty("inputTexture"))block.port.setTexture(loadNCPFTexture(portCfg.get("inputTexture")));
                                block.port.portOutputDisplayName = portCfg.get("outputDisplayName");
                                if(portCfg.hasProperty("outputTexture"))block.port.setPortOutputTexture(loadNCPFTexture(portCfg.get("outputTexture")));
                            }
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverMSRRule(ruleCfg));
                                }
                            }
                            ConfigList recipes = blockCfg.get("recipes", new ConfigList());
                            for(int i = 0; i<recipes.size(); i++){
                                Config recipeCfg = recipes.get(i);
                                Config inputCfg = recipeCfg.get("input");
                                Config outputCfg = recipeCfg.get("output");
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(inputCfg.get("name"), outputCfg.get("name"));
                                recipe.inputDisplayName = inputCfg.get("displayName");
                                if(inputCfg.hasProperty("legacyNames")){
                                    ConfigList names = inputCfg.getConfigList("legacyNames");
                                    for(int j = 0; j<names.size(); j++){
                                        recipe.inputLegacyNames.add(names.get(j));
                                    }
                                }
                                if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                                recipe.inputRate = inputCfg.get("rate", 0);
                                recipe.outputDisplayName = outputCfg.get("displayName");
                                if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                                recipe.outputRate = outputCfg.get("rate", 0);
                                if(block.fuelVessel){
                                    Config recipeFuelVesselCfg = recipeCfg.get("fuelVessel");
                                    recipe.fuelVesselEfficiency = recipeFuelVesselCfg.get("efficiency");
                                    recipe.fuelVesselHeat = recipeFuelVesselCfg.get("heat");
                                    recipe.fuelVesselTime = recipeFuelVesselCfg.get("time");
                                    recipe.fuelVesselCriticality = recipeFuelVesselCfg.get("criticality");
                                    recipe.fuelVesselSelfPriming = recipeFuelVesselCfg.get("selfPriming", false);
                                }
                                if(block.irradiator){
                                    Config recipeIrradiatorCfg = recipeCfg.get("irradiator");
                                    recipe.irradiatorEfficiency = recipeIrradiatorCfg.get("efficiency");
                                    recipe.irradiatorHeat = recipeIrradiatorCfg.get("heat");
                                }
                                if(block.reflector){
                                    Config recipeReflectorCfg = recipeCfg.get("reflector");
                                    recipe.reflectorEfficiency = recipeReflectorCfg.get("efficiency");
                                    recipe.reflectorReflectivity = recipeReflectorCfg.get("reflectivity");
                                }
                                if(block.moderator){
                                    Config recipeModeratorCfg = recipeCfg.get("moderator");
                                    recipe.moderatorFlux = recipeModeratorCfg.get("flux");
                                    recipe.moderatorEfficiency = recipeModeratorCfg.get("efficiency");
                                    recipe.moderatorActive = recipeModeratorCfg.get("active", false);
                                }
                                if(block.shield){
                                    Config recipeShieldCfg = recipeCfg.get("shield");
                                    recipe.shieldHeat = recipeShieldCfg.get("heat");
                                    recipe.shieldEfficiency = recipeShieldCfg.get("efficiency");
                                }
                                if(block.heater){
                                    Config recipeHeaterCfg = recipeCfg.get("heater");
                                    recipe.heaterCooling = recipeHeaterCfg.get("cooling");
                                }
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            configuration.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                            if(block.port!=null){
                                configuration.overhaul.fissionMSR.allBlocks.add(block.port);configuration.overhaul.fissionMSR.blocks.add(block.port);
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.turbine.minWidth = turbine.get("minWidth");
                            configuration.overhaul.turbine.minLength = turbine.get("minLength");
                            configuration.overhaul.turbine.maxSize = turbine.get("maxSize");
                            configuration.overhaul.turbine.fluidPerBlade = turbine.get("fluidPerBlade");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyMult = turbine.get("throughputEfficiencyLeniencyMult");
                            configuration.overhaul.turbine.throughputEfficiencyLeniencyThreshold = turbine.get("throughputEfficiencyLeniencyThreshold");
                            configuration.overhaul.turbine.throughputFactor = turbine.get("throughputFactor");
                            configuration.overhaul.turbine.powerBonus = turbine.get("powerBonus");
                        }
                        ConfigList blocks = turbine.get("blocks");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block block = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            Config bladeCfg = blockCfg.get("blade");
                            if(bladeCfg!=null){
                                block.blade = true;
                                block.bladeEfficiency = bladeCfg.get("efficiency");
                                block.bladeExpansion = bladeCfg.get("expansion");
                                block.bladeStator = bladeCfg.get("stator", false);
                            }
                            Config coilCfg = blockCfg.get("coil");
                            if(coilCfg!=null){
                                block.coil = true;
                                block.coilEfficiency = coilCfg.get("efficiency");
                            }
                            block.bearing = blockCfg.get("bearing", false);
                            block.shaft = blockCfg.get("shaft", false);
                            block.connector = blockCfg.get("connector", false);
                            block.controller = blockCfg.get("controller", false);
                            block.casing = blockCfg.get("casing", false);
                            block.casingEdge = blockCfg.get("casingEdge", false);
                            block.inlet = blockCfg.get("inlet", false);
                            block.outlet = blockCfg.get("outlet", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            configuration.overhaul.turbine.allBlocks.add(block);configuration.overhaul.turbine.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = configuration.overhaul.turbine.allBlocks.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            Config inputCfg = recipeCfg.get("input");
                            Config outputCfg = recipeCfg.get("output");
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(inputCfg.get("name"), outputCfg.get("name"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            recipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    recipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            recipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                            configuration.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fusion Configuration">
                    if(overhaul.hasProperty("fusion")){
                        configuration.overhaul.fusion = new multiblock.configuration.overhaul.fusion.FusionConfiguration();
                        Config fusion = overhaul.get("fusion");
                        if(!partial&&!configuration.addon){
                            configuration.overhaul.fusion.minInnerRadius = fusion.get("minInnerRadius");
                            configuration.overhaul.fusion.maxInnerRadius = fusion.get("maxInnerRadius");
                            configuration.overhaul.fusion.minCoreSize = fusion.get("minCoreSize");
                            configuration.overhaul.fusion.maxCoreSize = fusion.get("maxCoreSize");
                            configuration.overhaul.fusion.minToroidWidth = fusion.get("minToroidWidth");
                            configuration.overhaul.fusion.maxToroidWidth = fusion.get("maxToroidWidth");
                            configuration.overhaul.fusion.minLiningThickness = fusion.get("minLiningThickness");
                            configuration.overhaul.fusion.maxLiningThickness = fusion.get("maxLiningThickness");
                            configuration.overhaul.fusion.coolingEfficiencyLeniency = fusion.get("coolingEfficiencyLeniency");
                            configuration.overhaul.fusion.sparsityPenaltyMult = fusion.get("sparsityPenaltyMult");
                            configuration.overhaul.fusion.sparsityPenaltyThreshold = fusion.get("sparsityPenaltyThreshold");
                        }
                        ConfigList blocks = fusion.get("blocks");
                        overhaulFusionPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fusion.Block block = new multiblock.configuration.overhaul.fusion.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            block.cluster = blockCfg.get("cluster", false);
                            block.createCluster = blockCfg.get("createCluster", false);
                            block.conductor = blockCfg.get("conductor", false);
                            block.connector = blockCfg.get("connector", false);
                            block.core = blockCfg.get("core", false);
                            block.electromagnet = blockCfg.get("electromagnet", false);
                            block.heatingBlanket = blockCfg.get("heatingBlanket", false);
                            block.functional = blockCfg.get("functional", false);
                            boolean hasRecipes = blockCfg.getConfigList("recipes", new ConfigList()).size()>0;
                            Config breedingBlanketCfg = blockCfg.get("breedingBlanket");
                            if(breedingBlanketCfg!=null){
                                block.breedingBlanket = true;
                                block.breedingBlanketHasBaseStats = breedingBlanketCfg.get("hasBaseStats", !hasRecipes);
                                if(block.breedingBlanketHasBaseStats){
                                    block.breedingBlanketEfficiency = breedingBlanketCfg.get("efficiency");
                                    block.breedingBlanketHeat = breedingBlanketCfg.get("heat");
                                    block.breedingBlanketAugmented = breedingBlanketCfg.get("augmented", false);
                                }
                            }
                            Config shieldingCfg = blockCfg.get("shielding");
                            if(shieldingCfg!=null){
                                block.shielding = true;
                                block.shieldingHasBaseStats = shieldingCfg.get("hasBaseStats", !hasRecipes);
                                if(block.shieldingHasBaseStats){
                                    block.shieldingShieldiness = shieldingCfg.get("shieldiness");
                                }
                            }
                            Config reflectorCfg = blockCfg.get("reflector");
                            if(reflectorCfg!=null){
                                block.reflector = true;
                                block.reflectorHasBaseStats = reflectorCfg.get("hasBaseStats", !hasRecipes);
                                if(block.reflectorHasBaseStats){
                                    block.reflectorEfficiency = reflectorCfg.get("efficiency");
                                }
                            }
                            Config heatsinkCfg = blockCfg.get("heatsink");
                            if(heatsinkCfg!=null){
                                block.heatsink = true;
                                block.heatsinkHasBaseStats = heatsinkCfg.get("hasBaseStats", !hasRecipes);
                                if(block.heatsinkHasBaseStats){
                                    block.heatsinkCooling = heatsinkCfg.get("cooling");
                                }
                            }
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverFusionRule(ruleCfg));
                                }
                            }
                            ConfigList recipes = blockCfg.get("recipes", new ConfigList());
                            for(int i = 0; i<recipes.size(); i++){
                                Config recipeCfg = recipes.get(i);
                                Config inputCfg = recipeCfg.get("input");
                                Config outputCfg = recipeCfg.get("output");
                                multiblock.configuration.overhaul.fusion.BlockRecipe recipe = new multiblock.configuration.overhaul.fusion.BlockRecipe(inputCfg.get("name"), outputCfg.get("name"));
                                recipe.inputDisplayName = inputCfg.get("displayName");
                                if(inputCfg.hasProperty("legacyNames")){
                                    ConfigList names = inputCfg.getConfigList("legacyNames");
                                    for(int j = 0; j<names.size(); j++){
                                        recipe.inputLegacyNames.add(names.get(j));
                                    }
                                }
                                if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                                recipe.inputRate = inputCfg.get("rate", 0);
                                recipe.outputDisplayName = outputCfg.get("displayName");
                                if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                                recipe.outputRate = outputCfg.get("rate", 0);
                                if(block.breedingBlanket){
                                    Config recipeBreedingBlanketCfg = recipeCfg.get("breedingBlanket");
                                    recipe.breedingBlanketAugmented = recipeBreedingBlanketCfg.get("augmented", false);
                                    recipe.breedingBlanketEfficiency = recipeBreedingBlanketCfg.get("efficiency");
                                    recipe.breedingBlanketHeat = recipeBreedingBlanketCfg.get("heat");
                                }
                                if(block.shielding){
                                    Config recipeShieldingCfg = recipeCfg.get("shielding");
                                    recipe.shieldingShieldiness = recipeShieldingCfg.get("shieldiness");
                                }
                                if(block.reflector){
                                    Config recipeReflectorCfg = recipeCfg.get("reflector");
                                    recipe.reflectorEfficiency = recipeReflectorCfg.get("efficiency");
                                }
                                if(block.heatsink){
                                    Config recipeHeatsinkCfg = recipeCfg.get("heatsink");
                                    recipe.heatsinkCooling = recipeHeatsinkCfg.get("cooling");
                                }
                                block.allRecipes.add(recipe);block.recipes.add(recipe);
                            }
                            configuration.overhaul.fusion.allBlocks.add(block);configuration.overhaul.fusion.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.fusion.PlacementRule rule : overhaulFusionPostLoadMap.keySet()){
                            byte index = overhaulFusionPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fusion.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fusion.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = configuration.overhaul.fusion.allBlocks.get(index-1);
                            }
                        }
                        ConfigList recipes = fusion.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            Config inputCfg = recipeCfg.get("input");
                            Config outputCfg = recipeCfg.get("output");
                            multiblock.configuration.overhaul.fusion.Recipe recipe = new multiblock.configuration.overhaul.fusion.Recipe(inputCfg.get("name"), outputCfg.get("name"), recipeCfg.get("efficiency"), recipeCfg.get("heat"), recipeCfg.get("time"), recipeCfg.getFloat("fluxiness"));
                            recipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    recipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            recipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                            configuration.overhaul.fusion.allRecipes.add(recipe);configuration.overhaul.fusion.recipes.add(recipe);
                        }
                        ConfigList coolantRecipes = fusion.get("coolantRecipes");
                        for(Iterator coit = coolantRecipes.iterator(); coit.hasNext();){
                            Config coolantRecipeCfg = (Config)coit.next();
                            Config inputCfg = coolantRecipeCfg.get("input");
                            Config outputCfg = coolantRecipeCfg.get("output");
                            multiblock.configuration.overhaul.fusion.CoolantRecipe coolantRecipe = new multiblock.configuration.overhaul.fusion.CoolantRecipe(inputCfg.get("name"), outputCfg.get("name"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            coolantRecipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    coolantRecipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))coolantRecipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            coolantRecipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))coolantRecipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                            configuration.overhaul.fusion.allCoolantRecipes.add(coolantRecipe);configuration.overhaul.fusion.coolantRecipes.add(coolantRecipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private Configuration loadAddon(Configuration parent, Config config){
                boolean partial = config.get("partial");
                Configuration configuration;
                if(partial)configuration = new PartialConfiguration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                else configuration = new Configuration(config.get("name"), config.get("version"), config.get("underhaulVersion"));
                configuration.addon = config.get("addon");
                //<editor-fold defaultstate="collapsed" desc="Underhaul Configuration">
                if(config.hasProperty("underhaul")){
                    configuration.underhaul = new UnderhaulConfiguration();
                    Config underhaul = config.get("underhaul");
                    if(underhaul.hasProperty("fissionSFR")){
                        configuration.underhaul.fissionSFR = new multiblock.configuration.underhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = underhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        underhaulPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.underhaul.fissionsfr.Block block = new multiblock.configuration.underhaul.fissionsfr.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            block.active = blockCfg.get("active");
                            block.cooling = blockCfg.get("cooling", 0);
                            block.fuelCell = blockCfg.get("fuelCell", false);
                            block.moderator = blockCfg.get("moderator", false);
                            block.casing = blockCfg.get("casing", false);
                            block.controller = blockCfg.get("controller", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readUnderRule(ruleCfg));
                                }
                            }
                            parent.underhaul.fissionSFR.allBlocks.add(block);configuration.underhaul.fissionSFR.blocks.add(block);
                        }
                        for(multiblock.configuration.underhaul.fissionsfr.PlacementRule rule : underhaulPostLoadMap.keySet()){
                            byte index = underhaulPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.underhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.underhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.underhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList fuels = fissionSFR.get("fuels");
                        for(Iterator fit = fuels.iterator(); fit.hasNext();){
                            Config fuelCfg = (Config)fit.next();
                            multiblock.configuration.underhaul.fissionsfr.Fuel fuel = new multiblock.configuration.underhaul.fissionsfr.Fuel(fuelCfg.get("name"), fuelCfg.get("power"), fuelCfg.get("heat"), fuelCfg.get("time"));
                            fuel.displayName = fuelCfg.get("displayName");
                            if(fuelCfg.hasProperty("legacyNames")){
                                ConfigList names = fuelCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    fuel.legacyNames.add(names.get(i));
                                }
                            }
                            if(fuelCfg.hasProperty("texture"))fuel.setTexture(loadNCPFTexture(fuelCfg.get("texture")));
                            parent.underhaul.fissionSFR.allFuels.add(fuel);configuration.underhaul.fissionSFR.fuels.add(fuel);
                        }
                    }
                }
//</editor-fold>
                //<editor-fold defaultstate="collapsed" desc="Overhaul Configuration">
                if(config.hasProperty("overhaul")){
                    configuration.overhaul = new OverhaulConfiguration();
                    Config overhaul = config.get("overhaul");
                    //<editor-fold defaultstate="collapsed" desc="Fission SFR Configuration">
                    if(overhaul.hasProperty("fissionSFR")){
                        configuration.overhaul.fissionSFR = new multiblock.configuration.overhaul.fissionsfr.FissionSFRConfiguration();
                        Config fissionSFR = overhaul.get("fissionSFR");
                        ConfigList blocks = fissionSFR.get("blocks");
                        overhaulSFRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionsfr.Block theBlockThatThisBlockIsAnAddonRecipeBlockFor = null;
                            multiblock.configuration.overhaul.fissionsfr.Block block = new multiblock.configuration.overhaul.fissionsfr.Block(blockCfg.get("name"));
                            for(multiblock.configuration.overhaul.fissionsfr.Block b : parent.overhaul.fissionSFR.allBlocks){
                                if(b.name.equals(block.name)){
                                    theBlockThatThisBlockIsAnAddonRecipeBlockFor = b;
                                }
                            }
                            if(theBlockThatThisBlockIsAnAddonRecipeBlockFor==null){
                                block.displayName = blockCfg.get("displayName");
                                if(blockCfg.hasProperty("legacyNames")){
                                    ConfigList names = blockCfg.getConfigList("legacyNames");
                                    for(int i = 0; i<names.size(); i++){
                                        block.legacyNames.add(names.get(i));
                                    }
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.functional = blockCfg.get("functional", false);
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.casing = blockCfg.get("casing", false);
                                block.casingEdge = blockCfg.get("casingEdge", false);
                                block.controller = blockCfg.get("controller", false);
                                Config coolantVentCfg = blockCfg.get("coolantVent");
                                if(coolantVentCfg!=null){
                                    block.coolantVent = true;
                                    if(coolantVentCfg.hasProperty("outTexture"))block.setCoolantVentOutputTexture(loadNCPFTexture(coolantVentCfg.get("outTexture")));
                                    block.coolantVentOutputDisplayName = coolantVentCfg.get("outDisplayName");
                                }
                                boolean hasRecipes = blockCfg.getConfigList("recipes", new ConfigList()).size()>0;
                                Config fuelCellCfg = blockCfg.get("fuelCell");
                                if(fuelCellCfg!=null){
                                    block.fuelCell = true;
                                    block.fuelCellHasBaseStats = fuelCellCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.fuelCellHasBaseStats){
                                        block.fuelCellEfficiency = fuelCellCfg.get("efficiency");
                                        block.fuelCellHeat = fuelCellCfg.get("heat");
                                        block.fuelCellCriticality = fuelCellCfg.get("criticality");
                                        block.fuelCellSelfPriming = fuelCellCfg.get("selfPriming", false);
                                    }
                                }
                                Config irradiatorCfg = blockCfg.get("irradiator");
                                if(irradiatorCfg!=null){
                                    block.irradiator = true;
                                    block.irradiatorHasBaseStats = irradiatorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.irradiatorHasBaseStats){
                                        block.irradiatorEfficiency = irradiatorCfg.get("efficiency");
                                        block.irradiatorHeat = irradiatorCfg.get("heat");
                                    }
                                }
                                Config reflectorCfg = blockCfg.get("reflector");
                                if(reflectorCfg!=null){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = reflectorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.reflectorHasBaseStats){
                                        block.reflectorEfficiency = reflectorCfg.get("efficiency");
                                        block.reflectorReflectivity = reflectorCfg.get("reflectivity");
                                    }
                                }
                                Config moderatorCfg = blockCfg.get("moderator");
                                if(moderatorCfg!=null){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = moderatorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.moderatorHasBaseStats){
                                        block.moderatorFlux = moderatorCfg.get("flux");
                                        block.moderatorEfficiency = moderatorCfg.get("efficiency");
                                        block.moderatorActive = moderatorCfg.get("active", false);
                                    }
                                }
                                Config shieldCfg = blockCfg.get("shield");
                                if(shieldCfg!=null){
                                    block.shield = true;
                                    block.shieldHasBaseStats = shieldCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.shieldHasBaseStats){
                                        block.shieldHeat = shieldCfg.get("heat");
                                        block.shieldEfficiency = shieldCfg.get("efficiency");
                                        if(shieldCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(shieldCfg.get("closedTexture")));
                                    }
                                }
                                Config heatsinkCfg = blockCfg.get("heatsink");
                                if(heatsinkCfg!=null){
                                    block.heatsink = true;
                                    block.heatsinkHasBaseStats = heatsinkCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.heatsinkHasBaseStats){
                                        block.heatsinkCooling = heatsinkCfg.get("cooling");
                                    }
                                }
                                Config sourceCfg = blockCfg.get("source");
                                if(sourceCfg!=null){
                                    block.source = true;
                                    block.sourceEfficiency = sourceCfg.get("efficiency");
                                }
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(hasRecipes){
                                    Config portCfg = blockCfg.get("port");
                                    block.port = new multiblock.configuration.overhaul.fissionsfr.Block(portCfg.get("name"));
                                    block.port.parent = block;
                                    block.port.displayName = portCfg.get("inputDisplayName");
                                    if(portCfg.hasProperty("inputTexture"))block.port.setTexture(loadNCPFTexture(portCfg.get("inputTexture")));
                                    block.port.portOutputDisplayName = portCfg.get("outputDisplayName");
                                    if(portCfg.hasProperty("outputTexture"))block.port.setPortOutputTexture(loadNCPFTexture(portCfg.get("outputTexture")));
                                }
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverSFRRule(ruleCfg));
                                    }
                                }
                            }else{
                                block.fuelCell = blockCfg.hasProperty("fuelCell");
                                block.irradiator = blockCfg.hasProperty("irradiator");
                                block.reflector = blockCfg.hasProperty("reflector");
                                block.moderator = blockCfg.hasProperty("moderator");
                                block.shield = blockCfg.hasProperty("shield");
                                block.heatsink = blockCfg.hasProperty("heatsink");
                            }
                            ConfigList recipes = blockCfg.get("recipes", new ConfigList());
                            for(int i = 0; i<recipes.size(); i++){
                                Config recipeCfg = recipes.get(i);
                                Config inputCfg = recipeCfg.get("input");
                                Config outputCfg = recipeCfg.get("output");
                                multiblock.configuration.overhaul.fissionsfr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionsfr.BlockRecipe(inputCfg.get("name"), outputCfg.get("name"));
                                recipe.inputDisplayName = inputCfg.get("displayName");
                                if(inputCfg.hasProperty("legacyNames")){
                                    ConfigList names = inputCfg.getConfigList("legacyNames");
                                    for(int j = 0; j<names.size(); j++){
                                        recipe.inputLegacyNames.add(names.get(j));
                                    }
                                }
                                if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                                recipe.inputRate = inputCfg.get("rate", 0);
                                recipe.outputDisplayName = outputCfg.get("displayName");
                                if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                                recipe.outputRate = outputCfg.get("rate", 0);
                                if(block.fuelCell){
                                    Config recipeFuelCellCfg = recipeCfg.get("fuelCell");
                                    recipe.fuelCellEfficiency = recipeFuelCellCfg.get("efficiency");
                                    recipe.fuelCellHeat = recipeFuelCellCfg.get("heat");
                                    recipe.fuelCellTime = recipeFuelCellCfg.get("time");
                                    recipe.fuelCellCriticality = recipeFuelCellCfg.get("criticality");
                                    recipe.fuelCellSelfPriming = recipeFuelCellCfg.get("selfPriming", false);
                                }
                                if(block.irradiator){
                                    Config recipeIrradiatorCfg = recipeCfg.get("irradiator");
                                    recipe.irradiatorEfficiency = recipeIrradiatorCfg.get("efficiency");
                                    recipe.irradiatorHeat = recipeIrradiatorCfg.get("heat");
                                }
                                if(block.reflector){
                                    Config recipeReflectorCfg = recipeCfg.get("reflector");
                                    recipe.reflectorEfficiency = recipeReflectorCfg.get("efficiency");
                                    recipe.reflectorReflectivity = recipeReflectorCfg.get("reflectivity");
                                }
                                if(block.moderator){
                                    Config recipeModeratorCfg = recipeCfg.get("moderator");
                                    recipe.moderatorFlux = recipeModeratorCfg.get("flux");
                                    recipe.moderatorEfficiency = recipeModeratorCfg.get("efficiency");
                                    recipe.moderatorActive = recipeModeratorCfg.get("active", false);
                                }
                                if(block.shield){
                                    Config recipeShieldCfg = recipeCfg.get("shield");
                                    recipe.shieldHeat = recipeShieldCfg.get("heat");
                                    recipe.shieldEfficiency = recipeShieldCfg.get("efficiency");
                                }
                                if(block.heatsink){
                                    Config recipeHeatsinkCfg = recipeCfg.get("heatsink");
                                    recipe.heatsinkCooling = recipeHeatsinkCfg.get("cooling");
                                }
                                if(theBlockThatThisBlockIsAnAddonRecipeBlockFor!=null)theBlockThatThisBlockIsAnAddonRecipeBlockFor.allRecipes.add(recipe);
                                else block.allRecipes.add(recipe);
                                block.recipes.add(recipe);
                            }
                            if(theBlockThatThisBlockIsAnAddonRecipeBlockFor!=null){
                                configuration.overhaul.fissionSFR.allBlocks.add(block);
                            }else{
                                parent.overhaul.fissionSFR.allBlocks.add(block);configuration.overhaul.fissionSFR.blocks.add(block);
                                if(block.port!=null){
                                    parent.overhaul.fissionSFR.allBlocks.add(block.port);configuration.overhaul.fissionSFR.blocks.add(block.port);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionsfr.PlacementRule rule : overhaulSFRPostLoadMap.keySet()){
                            byte index = overhaulSFRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionsfr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionsfr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionSFR.allBlocks.get(index-1);
                            }
                        }
                        ConfigList coolantRecipes = fissionSFR.get("coolantRecipes");
                        for(Iterator irit = coolantRecipes.iterator(); irit.hasNext();){
                            Config coolantRecipeCfg = (Config)irit.next();
                            Config inputCfg = coolantRecipeCfg.get("input");
                            Config outputCfg = coolantRecipeCfg.get("output");
                            multiblock.configuration.overhaul.fissionsfr.CoolantRecipe coolRecipe = new multiblock.configuration.overhaul.fissionsfr.CoolantRecipe(inputCfg.get("name"), outputCfg.get("name"), coolantRecipeCfg.get("heat"), coolantRecipeCfg.getFloat("outputRatio"));
                            coolRecipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    coolRecipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))coolRecipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            coolRecipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))coolRecipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));;
                            parent.overhaul.fissionSFR.allCoolantRecipes.add(coolRecipe);configuration.overhaul.fissionSFR.coolantRecipes.add(coolRecipe);
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Fission MSR Configuration">
                    if(overhaul.hasProperty("fissionMSR")){
                        configuration.overhaul.fissionMSR = new multiblock.configuration.overhaul.fissionmsr.FissionMSRConfiguration();
                        Config fissionMSR = overhaul.get("fissionMSR");
                        ConfigList blocks = fissionMSR.get("blocks");
                        overhaulMSRPostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.fissionmsr.Block theBlockThatThisBlockIsAnAddonRecipeBlockFor = null;
                            multiblock.configuration.overhaul.fissionmsr.Block block = new multiblock.configuration.overhaul.fissionmsr.Block(blockCfg.get("name"));
                            for(multiblock.configuration.overhaul.fissionmsr.Block b : parent.overhaul.fissionMSR.allBlocks){
                                if(b.name.equals(block.name)){
                                    theBlockThatThisBlockIsAnAddonRecipeBlockFor = b;
                                }
                            }
                            if(theBlockThatThisBlockIsAnAddonRecipeBlockFor==null){
                                block.displayName = blockCfg.get("displayName");
                                if(blockCfg.hasProperty("legacyNames")){
                                    ConfigList names = blockCfg.getConfigList("legacyNames");
                                    for(int i = 0; i<names.size(); i++){
                                        block.legacyNames.add(names.get(i));
                                    }
                                }
                                block.cluster = blockCfg.get("cluster", false);
                                block.createCluster = blockCfg.get("createCluster", false);
                                block.conductor = blockCfg.get("conductor", false);
                                block.functional = blockCfg.get("functional", false);
                                block.blocksLOS = blockCfg.get("blocksLOS", false);
                                block.casing = blockCfg.get("casing", false);
                                block.casingEdge = blockCfg.get("casingEdge", false);
                                block.controller = blockCfg.get("controller", false);
                                boolean hasRecipes = blockCfg.getConfigList("recipes", new ConfigList()).size()>0;
                                Config fuelVesselCfg = blockCfg.get("fuelVessel");
                                if(fuelVesselCfg!=null){
                                    block.fuelVessel = true;
                                    block.fuelVesselHasBaseStats = fuelVesselCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.fuelVesselHasBaseStats){
                                        block.fuelVesselEfficiency = fuelVesselCfg.get("efficiency");
                                        block.fuelVesselHeat = fuelVesselCfg.get("heat");
                                        block.fuelVesselCriticality = fuelVesselCfg.get("criticality");
                                        block.fuelVesselSelfPriming = fuelVesselCfg.get("selfPriming", false);
                                    }
                                }
                                Config irradiatorCfg = blockCfg.get("irradiator");
                                if(irradiatorCfg!=null){
                                    block.irradiator = true;
                                    block.irradiatorHasBaseStats = irradiatorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.irradiatorHasBaseStats){
                                        block.irradiatorEfficiency = irradiatorCfg.get("efficiency");
                                        block.irradiatorHeat = irradiatorCfg.get("heat");
                                    }
                                }
                                Config reflectorCfg = blockCfg.get("reflector");
                                if(reflectorCfg!=null){
                                    block.reflector = true;
                                    block.reflectorHasBaseStats = reflectorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.reflectorHasBaseStats){
                                        block.reflectorEfficiency = reflectorCfg.get("efficiency");
                                        block.reflectorReflectivity = reflectorCfg.get("reflectivity");
                                    }
                                }
                                Config moderatorCfg = blockCfg.get("moderator");
                                if(moderatorCfg!=null){
                                    block.moderator = true;
                                    block.moderatorHasBaseStats = moderatorCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.moderatorHasBaseStats){
                                        block.moderatorFlux = moderatorCfg.get("flux");
                                        block.moderatorEfficiency = moderatorCfg.get("efficiency");
                                        block.moderatorActive = moderatorCfg.get("active", false);
                                    }
                                }
                                Config shieldCfg = blockCfg.get("shield");
                                if(shieldCfg!=null){
                                    block.shield = true;
                                    block.shieldHasBaseStats = shieldCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.shieldHasBaseStats){
                                        block.shieldHeat = shieldCfg.get("heat");
                                        block.shieldEfficiency = shieldCfg.get("efficiency");
                                        if(shieldCfg.hasProperty("closedTexture"))block.setShieldClosedTexture(loadNCPFTexture(shieldCfg.get("closedTexture")));
                                    }
                                }
                                Config heaterCfg = blockCfg.get("heater");
                                if(heaterCfg!=null){
                                    block.heater = true;
                                    block.heaterHasBaseStats = heaterCfg.get("hasBaseStats", !hasRecipes);
                                    if(block.heaterHasBaseStats){
                                        block.heaterCooling = heaterCfg.get("cooling");
                                    }
                                }
                                Config sourceCfg = blockCfg.get("source");
                                if(sourceCfg!=null){
                                    block.source = true;
                                    block.sourceEfficiency = sourceCfg.get("efficiency");
                                }
                                if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                                if(hasRecipes){
                                    Config portCfg = blockCfg.get("port");
                                    block.port = new multiblock.configuration.overhaul.fissionmsr.Block(portCfg.get("name"));
                                    block.port.parent = block;
                                    block.port.displayName = portCfg.get("inputDisplayName");
                                    if(portCfg.hasProperty("inputTexture"))block.port.setTexture(loadNCPFTexture(portCfg.get("inputTexture")));
                                    block.port.portOutputDisplayName = portCfg.get("outputDisplayName");
                                    if(portCfg.hasProperty("outputTexture"))block.port.setPortOutputTexture(loadNCPFTexture(portCfg.get("outputTexture")));
                                }
                                if(blockCfg.hasProperty("rules")){
                                    ConfigList rules = blockCfg.get("rules");
                                    for(Iterator rit = rules.iterator(); rit.hasNext();){
                                        Config ruleCfg = (Config)rit.next();
                                        block.rules.add(readOverMSRRule(ruleCfg));
                                    }
                                }
                            }else{
                                block.fuelVessel = blockCfg.hasProperty("fuelVessel");
                                block.irradiator = blockCfg.hasProperty("irradiator");
                                block.reflector = blockCfg.hasProperty("reflector");
                                block.moderator = blockCfg.hasProperty("moderator");
                                block.shield = blockCfg.hasProperty("shield");
                                block.heater = blockCfg.hasProperty("heater");
                            }
                            ConfigList recipes = blockCfg.get("recipes", new ConfigList());
                            for(int i = 0; i<recipes.size(); i++){
                                Config recipeCfg = recipes.get(i);
                                Config inputCfg = recipeCfg.get("input");
                                Config outputCfg = recipeCfg.get("output");
                                multiblock.configuration.overhaul.fissionmsr.BlockRecipe recipe = new multiblock.configuration.overhaul.fissionmsr.BlockRecipe(inputCfg.get("name"), outputCfg.get("name"));
                                recipe.inputDisplayName = inputCfg.get("displayName");
                                if(inputCfg.hasProperty("legacyNames")){
                                    ConfigList names = inputCfg.getConfigList("legacyNames");
                                    for(int j = 0; j<names.size(); j++){
                                        recipe.inputLegacyNames.add(names.get(j));
                                    }
                                }
                                if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                                recipe.inputRate = inputCfg.get("rate", 0);
                                recipe.outputDisplayName = outputCfg.get("displayName");
                                if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                                recipe.outputRate = outputCfg.get("rate", 0);
                                if(block.fuelVessel){
                                    Config recipeFuelVesselCfg = recipeCfg.get("fuelVessel");
                                    recipe.fuelVesselEfficiency = recipeFuelVesselCfg.get("efficiency");
                                    recipe.fuelVesselHeat = recipeFuelVesselCfg.get("heat");
                                    recipe.fuelVesselTime = recipeFuelVesselCfg.get("time");
                                    recipe.fuelVesselCriticality = recipeFuelVesselCfg.get("criticality");
                                    recipe.fuelVesselSelfPriming = recipeFuelVesselCfg.get("selfPriming", false);
                                }
                                if(block.irradiator){
                                    Config recipeIrradiatorCfg = recipeCfg.get("irradiator");
                                    recipe.irradiatorEfficiency = recipeIrradiatorCfg.get("efficiency");
                                    recipe.irradiatorHeat = recipeIrradiatorCfg.get("heat");
                                }
                                if(block.reflector){
                                    Config recipeReflectorCfg = recipeCfg.get("reflector");
                                    recipe.reflectorEfficiency = recipeReflectorCfg.get("efficiency");
                                    recipe.reflectorReflectivity = recipeReflectorCfg.get("reflectivity");
                                }
                                if(block.moderator){
                                    Config recipeModeratorCfg = recipeCfg.get("moderator");
                                    recipe.moderatorFlux = recipeModeratorCfg.get("flux");
                                    recipe.moderatorEfficiency = recipeModeratorCfg.get("efficiency");
                                    recipe.moderatorActive = recipeModeratorCfg.get("active", false);
                                }
                                if(block.shield){
                                    Config recipeShieldCfg = recipeCfg.get("shield");
                                    recipe.shieldHeat = recipeShieldCfg.get("heat");
                                    recipe.shieldEfficiency = recipeShieldCfg.get("efficiency");
                                }
                                if(block.heater){
                                    Config recipeHeaterCfg = recipeCfg.get("heater");
                                    recipe.heaterCooling = recipeHeaterCfg.get("cooling");
                                }
                                if(theBlockThatThisBlockIsAnAddonRecipeBlockFor!=null)theBlockThatThisBlockIsAnAddonRecipeBlockFor.allRecipes.add(recipe);
                                else block.allRecipes.add(recipe);
                                block.recipes.add(recipe);
                            }
                            if(theBlockThatThisBlockIsAnAddonRecipeBlockFor!=null){
                                configuration.overhaul.fissionMSR.allBlocks.add(block);
                            }else{
                                parent.overhaul.fissionMSR.allBlocks.add(block);configuration.overhaul.fissionMSR.blocks.add(block);
                                if(block.port!=null){
                                    parent.overhaul.fissionMSR.allBlocks.add(block.port);configuration.overhaul.fissionMSR.blocks.add(block.port);
                                }
                            }
                        }
                        for(multiblock.configuration.overhaul.fissionmsr.PlacementRule rule : overhaulMSRPostLoadMap.keySet()){
                            byte index = overhaulMSRPostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.fissionmsr.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.fissionmsr.PlacementRule.BlockType.AIR;
                            }else{
                                rule.block = parent.overhaul.fissionMSR.allBlocks.get(index-1);
                            }
                        }
                    }
//</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="Turbine Configuration">
                    if(overhaul.hasProperty("turbine")){
                        configuration.overhaul.turbine = new multiblock.configuration.overhaul.turbine.TurbineConfiguration();
                        Config turbine = overhaul.get("turbine");
                        ConfigList blocks = turbine.get("blocks");
                        overhaulTurbinePostLoadMap.clear();
                        for(Iterator bit = blocks.iterator(); bit.hasNext();){
                            Config blockCfg = (Config)bit.next();
                            multiblock.configuration.overhaul.turbine.Block block = new multiblock.configuration.overhaul.turbine.Block(blockCfg.get("name"));
                            block.displayName = blockCfg.get("displayName");
                            if(blockCfg.hasProperty("legacyNames")){
                                ConfigList names = blockCfg.getConfigList("legacyNames");
                                for(int i = 0; i<names.size(); i++){
                                    block.legacyNames.add(names.get(i));
                                }
                            }
                            Config bladeCfg = blockCfg.get("blade");
                            if(bladeCfg!=null){
                                block.blade = true;
                                block.bladeEfficiency = bladeCfg.get("efficiency");
                                block.bladeExpansion = bladeCfg.get("expansion");
                                block.bladeStator = bladeCfg.get("stator", false);
                            }
                            Config coilCfg = blockCfg.get("coil");
                            if(coilCfg!=null){
                                block.coil = true;
                                block.coilEfficiency = coilCfg.get("efficiency");
                            }
                            block.bearing = blockCfg.get("bearing", false);
                            block.shaft = blockCfg.get("shaft", false);
                            block.connector = blockCfg.get("connector", false);
                            block.controller = blockCfg.get("controller", false);
                            block.casing = blockCfg.get("casing", false);
                            block.casingEdge = blockCfg.get("casingEdge", false);
                            block.inlet = blockCfg.get("inlet", false);
                            block.outlet = blockCfg.get("outlet", false);
                            if(blockCfg.hasProperty("texture"))block.setTexture(loadNCPFTexture(blockCfg.get("texture")));
                            if(blockCfg.hasProperty("rules")){
                                ConfigList rules = blockCfg.get("rules");
                                for(Iterator rit = rules.iterator(); rit.hasNext();){
                                    Config ruleCfg = (Config)rit.next();
                                    block.rules.add(readOverTurbineRule(ruleCfg));
                                }
                            }
                            parent.overhaul.turbine.allBlocks.add(block);configuration.overhaul.turbine.blocks.add(block);
                        }
                        for(multiblock.configuration.overhaul.turbine.PlacementRule rule : overhaulTurbinePostLoadMap.keySet()){
                            byte index = overhaulTurbinePostLoadMap.get(rule);
                            if(index==0){
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.AXIAL_GROUP;
                                if(rule.ruleType==multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN)rule.ruleType=multiblock.configuration.overhaul.turbine.PlacementRule.RuleType.BETWEEN_GROUP;
                                rule.blockType = multiblock.configuration.overhaul.turbine.PlacementRule.BlockType.CASING;
                            }else{
                                rule.block = parent.overhaul.turbine.allBlocks.get(index-1);
                            }
                        }
                        ConfigList recipes = turbine.get("recipes");
                        for(Iterator irit = recipes.iterator(); irit.hasNext();){
                            Config recipeCfg = (Config)irit.next();
                            Config inputCfg = recipeCfg.get("input");
                            Config outputCfg = recipeCfg.get("output");
                            multiblock.configuration.overhaul.turbine.Recipe recipe = new multiblock.configuration.overhaul.turbine.Recipe(inputCfg.get("name"), outputCfg.get("name"), recipeCfg.get("power"), recipeCfg.get("coefficient"));
                            recipe.inputDisplayName = inputCfg.get("displayName");
                            if(inputCfg.hasProperty("legacyNames")){
                                ConfigList names = inputCfg.getConfigList("legacyNames");
                                for(int j = 0; j<names.size(); j++){
                                    recipe.inputLegacyNames.add(names.get(j));
                                }
                            }
                            if(inputCfg.hasProperty("texture"))recipe.setInputTexture(loadNCPFTexture(inputCfg.get("texture")));
                            recipe.outputDisplayName = outputCfg.get("displayName");
                            if(outputCfg.hasProperty("texture"))recipe.setOutputTexture(loadNCPFTexture(outputCfg.get("texture")));
                            parent.overhaul.turbine.allRecipes.add(recipe);configuration.overhaul.turbine.recipes.add(recipe);
                        }
                    }
//</editor-fold>
                }
//</editor-fold>
                if(config.hasProperty("addons")){
                    ConfigList addons = config.get("addons");
                    for(int i = 0; i<addons.size(); i++){
                        configuration.addons.add(loadAddon(configuration, addons.get(i)));
                    }
                }
                return configuration;
            }
            private BufferedImage loadNCPFTexture(ConfigNumberList texture){
                int size = (int) texture.get(0);
                BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
                int index = 1;
                for(int x = 0; x<image.getWidth(); x++){
                    for(int y = 0; y<image.getHeight(); y++){
                        image.setRGB(x, y, (int)texture.get(index));
                        index++;
                    }
                }
                return image;
            }
        });// .ncpf version 10
    }
    public static NCPFFile read(InputStreamProvider provider){
        for(FormatReader reader : formats){
            boolean matches = false;
            try{
                if(reader.formatMatches(provider.getInputStream()))matches = true;
            }catch(Throwable t){}
            if(matches)return reader.read(provider.getInputStream());
        }
        throw new IllegalArgumentException("Unknown file format!");
    }
    public static NCPFFile read(File file){
        return read(() -> {
            try{
                return new FileInputStream(file);
            }catch(FileNotFoundException ex){
                return null;
            }
        });
    }
}