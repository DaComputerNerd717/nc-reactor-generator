package planner.menu.configuration.underhaul;
import multiblock.configuration.Configuration;
import multiblock.configuration.underhaul.fissionsfr.Block;
import multiblock.configuration.underhaul.fissionsfr.Fuel;
import planner.Core;
import planner.menu.component.MenuComponentLabel;
import planner.menu.component.MenuComponentMinimaList;
import planner.menu.component.MenuComponentMinimalistButton;
import planner.menu.component.MenuComponentMinimalistTextBox;
import planner.menu.configuration.ConfigurationMenu;
import planner.menu.configuration.underhaul.fissionsfr.MenuBlockConfiguration;
import planner.menu.configuration.underhaul.fissionsfr.MenuComponentBlock;
import planner.menu.configuration.underhaul.fissionsfr.MenuComponentFuel;
import planner.menu.configuration.underhaul.fissionsfr.MenuFuelConfiguration;
import simplelibrary.opengl.gui.GUI;
import simplelibrary.opengl.gui.Menu;
import simplelibrary.opengl.gui.components.MenuComponentButton;
public class MenuUnderhaulSFRConfiguration extends ConfigurationMenu{
    private final MenuComponentMinimalistTextBox minSize, maxSize, neutronReach, moderatorExtraPower, moderatorExtraHeat, activeCoolerRate;
    private final MenuComponentLabel blocksLabel, fuelsLabel;
    private final MenuComponentMinimaList blocksList, fuelsList;
    private final MenuComponentMinimalistButton addBlock, addFuel;
    private boolean refreshNeeded = false;
    public MenuUnderhaulSFRConfiguration(GUI gui, Menu parent, Configuration configuration){
        super(gui, parent, configuration, "Underhaul SFR");
        minSize = add(new MenuComponentMinimalistTextBox(sidebar.width, 0, 0, configuration.addon?0:48, "", true, "Minimum Size").setIntFilter()).setTooltip("The minimum size of this multiblock");
        maxSize = add(new MenuComponentMinimalistTextBox(sidebar.width, minSize.height, 0, configuration.addon?0:48, "", true, "Maximum Size").setIntFilter()).setTooltip("The maximum size of this multiblock");
        moderatorExtraPower = add(new MenuComponentMinimalistTextBox(sidebar.width, 0, 0, configuration.addon?0:48, "", true, "Moderator Extra Power").setFloatFilter()).setTooltip("Determines the extra power generated by each moderator block adjacent to a reactor cell.\n Equal to the effective number of extra cell's worth of power that would be generated by a cell totally surrounded by moderator blocks.\n Each moderator block will contribute one sixth of this amount of power (the amount of additional power scales linearly with the number of moderator blocks)");
        moderatorExtraHeat = add(new MenuComponentMinimalistTextBox(sidebar.width, moderatorExtraPower.height, 0, configuration.addon?0:48, "", true, "Moderator Extra Heat").setFloatFilter()).setTooltip("Determines the extra heat generated by each moderator block adjacent to a reactor cell.\n Equal to the effective number of extra cell's worth of heat that would be generated by a cell totally surrounded by moderator blocks.\n Each moderator block will contribute one sixth of this amount of heat (the amount of additional heat scales linearly with the number of moderator blocks)");
        neutronReach = add(new MenuComponentMinimalistTextBox(sidebar.width, 0, 0, configuration.addon?0:48, "", true, "Neutron Reach").setIntFilter()).setTooltip("Maximum number of moderator blocks that can be between two cells for neutron radiation to be shared between them and their efficiency to increase");
        activeCoolerRate = add(new MenuComponentMinimalistTextBox(sidebar.width, neutronReach.height, 0, configuration.addon?0:48, "", true, "Active Cooler Rate").setIntFilter()).setTooltip("Maximum rate at which the Active Fluid Cooler uses coolant in mB/s");
        blocksLabel = add(new MenuComponentLabel(sidebar.width, maxSize.y+maxSize.height, 0, 48, "Blocks"));
        fuelsLabel = add(new MenuComponentLabel(sidebar.width, maxSize.y+maxSize.height, 0, 48, "Fuels"));
        blocksList = add(new MenuComponentMinimaList(sidebar.width, blocksLabel.y+blocksLabel.height, 0, 0, 16));
        fuelsList = add(new MenuComponentMinimaList(sidebar.width, fuelsLabel.y+fuelsLabel.height, 0, 0, 16));
        addBlock = add(new MenuComponentMinimalistButton(sidebar.width, 0, 0, 48, "Add Block", true, true));
        addFuel = add(new MenuComponentMinimalistButton(sidebar.width, 0, 0, 48, "Add Fuel", true, true));
        addBlock.addActionListener((e) -> {
            Block b = new Block("nuclearcraft:new_block");
            configuration.underhaul.fissionSFR.blocks.add(b);
            Core.configuration.underhaul.fissionSFR.allBlocks.add(b);
            gui.open(new MenuBlockConfiguration(gui, this, configuration, b));
        });
        addFuel.addActionListener((e) -> {
            Fuel f = new Fuel("nuclearcraft:new_fuel", 0, 0, 0);
            configuration.underhaul.fissionSFR.fuels.add(f);
            Core.configuration.underhaul.fissionSFR.allFuels.add(f);
            gui.open(new MenuFuelConfiguration(gui, this, configuration, f));
        });
    }
    @Override
    public void onGUIOpened(){
        if(configuration.underhaul.fissionSFR.blocks.size()>0)blocksLabel.text = "Blocks ("+configuration.underhaul.fissionSFR.blocks.size()+")";
        if(configuration.underhaul.fissionSFR.fuels.size()>0)fuelsLabel.text = "Fuels ("+configuration.underhaul.fissionSFR.fuels.size()+")";
        minSize.text = configuration.underhaul.fissionSFR.minSize+"";
        maxSize.text = configuration.underhaul.fissionSFR.maxSize+"";
        neutronReach.text = configuration.underhaul.fissionSFR.neutronReach+"";
        moderatorExtraPower.text = configuration.underhaul.fissionSFR.moderatorExtraPower+"";
        moderatorExtraHeat.text = configuration.underhaul.fissionSFR.moderatorExtraHeat+"";
        activeCoolerRate.text = configuration.underhaul.fissionSFR.activeCoolerRate+"";
        blocksList.components.clear();
        for(Block b : configuration.underhaul.fissionSFR.blocks){
            blocksList.add(new MenuComponentBlock(b));
        }
        fuelsList.components.clear();
        for(Fuel f : configuration.underhaul.fissionSFR.fuels){
            fuelsList.add(new MenuComponentFuel(f));
        }
    }
    @Override
    public void onGUIClosed(){
        configuration.underhaul.fissionSFR.minSize = Integer.parseInt(minSize.text);
        configuration.underhaul.fissionSFR.maxSize = Integer.parseInt(maxSize.text);
        configuration.underhaul.fissionSFR.neutronReach = Integer.parseInt(neutronReach.text);
        configuration.underhaul.fissionSFR.moderatorExtraPower = Float.parseFloat(moderatorExtraPower.text);
        configuration.underhaul.fissionSFR.moderatorExtraHeat = Float.parseFloat(moderatorExtraHeat.text);
        configuration.underhaul.fissionSFR.activeCoolerRate = Integer.parseInt(activeCoolerRate.text);
    }
    @Override
    public void tick(){
        if(refreshNeeded){
            onGUIOpened();
            refreshNeeded = false;
        }
        super.tick();
    }
    @Override
    public void render(int millisSinceLastTick){
        double w = gui.helper.displayWidth()-sidebar.width;
        minSize.width = maxSize.width = neutronReach.width = moderatorExtraPower.width = moderatorExtraHeat.width = activeCoolerRate.width = w/3;
        maxSize.y = moderatorExtraHeat.y = activeCoolerRate.y = minSize.y+minSize.height;;
        moderatorExtraPower.x = moderatorExtraHeat.x = sidebar.width+w/3;
        neutronReach.x = activeCoolerRate.x = sidebar.width+w*2/3;
        addBlock.width = addFuel.width = blocksLabel.width = fuelsLabel.width = blocksList.width = fuelsList.width = w/2;
        addFuel.x = fuelsLabel.x = fuelsList.x = blocksLabel.x+blocksLabel.width;
        addBlock.y = addFuel.y = Core.helper.displayHeight()-addBlock.height;
        blocksList.height = fuelsList.height = addBlock.y-(fuelsLabel.y+fuelsLabel.height);
        super.render(millisSinceLastTick);
    }
    @Override
    public void buttonClicked(MenuComponentButton button){
        for(simplelibrary.opengl.gui.components.MenuComponent c : blocksList.components){
            if(c instanceof MenuComponentBlock){
                if(button==((MenuComponentBlock) c).delete){
                    configuration.underhaul.fissionSFR.blocks.remove(((MenuComponentBlock) c).block);
                    Core.configuration.underhaul.fissionSFR.allBlocks.remove(((MenuComponentBlock) c).block);
                    refreshNeeded = true;
                    return;
                }
                if(button==((MenuComponentBlock) c).edit){
                    gui.open(new MenuBlockConfiguration(gui, this, configuration, ((MenuComponentBlock) c).block));
                    return;
                }
            }
        }
        for(simplelibrary.opengl.gui.components.MenuComponent c : fuelsList.components){
            if(c instanceof MenuComponentFuel){
                if(button==((MenuComponentFuel) c).delete){
                    configuration.underhaul.fissionSFR.fuels.remove(((MenuComponentFuel) c).fuel);
                    Core.configuration.underhaul.fissionSFR.allFuels.remove(((MenuComponentFuel) c).fuel);
                    refreshNeeded = true;
                    return;
                }
                if(button==((MenuComponentFuel) c).edit){
                    gui.open(new MenuFuelConfiguration(gui, this, configuration, ((MenuComponentFuel) c).fuel));
                    return;
                }
            }
        }
        super.buttonClicked(button);
    }
}