package planner.menu.configuration.underhaul;
import multiblock.configuration.Configuration;
import multiblock.configuration.underhaul.fissionsfr.Block;
import multiblock.configuration.underhaul.fissionsfr.Fuel;
import planner.Core;
import planner.menu.configuration.MultiblockConfigurationMenu;
import planner.menu.configuration.underhaul.fissionsfr.MenuBlockConfiguration;
import planner.menu.configuration.underhaul.fissionsfr.MenuComponentBlock;
import planner.menu.configuration.underhaul.fissionsfr.MenuComponentFuel;
import planner.menu.configuration.underhaul.fissionsfr.MenuFuelConfiguration;
import simplelibrary.opengl.gui.GUI;
import simplelibrary.opengl.gui.Menu;
public class MenuUnderhaulSFRConfiguration extends MultiblockConfigurationMenu{
    public MenuUnderhaulSFRConfiguration(GUI gui, Menu parent, Configuration configuration){
        super(gui, parent, configuration, "Underhaul SFR");
        addSettingInt("Minimum Size", configuration.underhaul.fissionSFR::getMinSize, configuration.underhaul.fissionSFR::setMinSize).setTooltip("The minimum size of this multiblock");
        addSettingFloat("Moderator Extra Power", configuration.underhaul.fissionSFR::getModeratorExtraPower, configuration.underhaul.fissionSFR::setModeratorExtraPower).setTooltip("Determines the extra power generated by each moderator block adjacent to a reactor cell.\n Equal to the effective number of extra cell's worth of power that would be generated by a cell totally surrounded by moderator blocks.\n Each moderator block will contribute one sixth of this amount of power (the amount of additional power scales linearly with the number of moderator blocks)");
        addSettingInt("Neutron Reach", configuration.underhaul.fissionSFR::getNeutronReach, configuration.underhaul.fissionSFR::setNeutronReach).setTooltip("Maximum number of moderator blocks that can be between two cells for neutron radiation to be shared between them and their efficiency to increase");
        addSettingRow();
        addSettingInt("Maximum Size", configuration.underhaul.fissionSFR::getMaxSize, configuration.underhaul.fissionSFR::setMaxSize).setTooltip("The maximum size of this multiblock");
        addSettingFloat("Moderator Extra Heat", configuration.underhaul.fissionSFR::getModeratorExtraHeat, configuration.underhaul.fissionSFR::setModeratorExtraHeat).setTooltip("Determines the extra heat generated by each moderator block adjacent to a reactor cell.\n Equal to the effective number of extra cell's worth of heat that would be generated by a cell totally surrounded by moderator blocks.\n Each moderator block will contribute one sixth of this amount of heat (the amount of additional heat scales linearly with the number of moderator blocks)");
        addSettingInt("Active Cooler Rate", configuration.underhaul.fissionSFR::getActiveCoolerRate, configuration.underhaul.fissionSFR::setActiveCoolerRate).setTooltip("Maximum rate at which the Active Fluid Cooler uses coolant in mB/s");
        addList(() -> {return "Blocks ("+configuration.underhaul.fissionSFR.blocks.size()+")";}, "Add Block", ()->{
            Block b = new Block("nuclearcraft:new_block");
            configuration.underhaul.fissionSFR.blocks.add(b);
            Core.configuration.underhaul.fissionSFR.allBlocks.add(b);
            gui.open(new MenuBlockConfiguration(gui, this, configuration, b));
        }, (list)->{
            list.components.clear();
            for(Block b : configuration.underhaul.fissionSFR.blocks){
                list.add(new MenuComponentBlock(b, () -> {//edit
                    gui.open(new MenuBlockConfiguration(gui, this, configuration, b));
                }, () -> {//delete
                    configuration.underhaul.fissionSFR.blocks.remove(b);
                    Core.configuration.underhaul.fissionSFR.allBlocks.remove(b);
                    refresh();
                }));
            }
        });
        addList(() -> {return "Fuels ("+configuration.underhaul.fissionSFR.fuels.size()+")";}, "Add Fuel", ()->{
            Fuel f = new Fuel("nuclearcraft:new_fuel", 0, 0, 0);
            configuration.underhaul.fissionSFR.fuels.add(f);
            Core.configuration.underhaul.fissionSFR.allFuels.add(f);
            gui.open(new MenuFuelConfiguration(gui, this, configuration, f));
        }, (list)->{
            list.components.clear();
            for(Fuel f : configuration.underhaul.fissionSFR.fuels){
                list.add(new MenuComponentFuel(f, () -> {//edit
                    gui.open(new MenuFuelConfiguration(gui, this, configuration, f));
                }, () -> {//delete
                    configuration.underhaul.fissionSFR.fuels.remove(f);
                    Core.configuration.underhaul.fissionSFR.allFuels.remove(f);
                    refresh();
                }));
            }
        });
    }
}